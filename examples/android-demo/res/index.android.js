/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete installedModules[moduleId];
/******/ 		}
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./FeedsHomePage.js":
/*!**************************!*\
  !*** ./FeedsHomePage.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return FeedsHomePage; });\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"./node_modules/@babel/runtime/helpers/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"./node_modules/@babel/runtime/helpers/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ \"./node_modules/@babel/runtime/helpers/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js\");\n/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/getPrototypeOf.js\");\n/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _hippy_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @hippy/react */ \"./node_modules/@hippy/react/dist/index.js\");\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default()(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable react/sort-comp */\n\n/* eslint-disable react/no-unused-state */\n\n\nvar a = {\n  id: 3950123151,\n  name: '',\n  score: '',\n  from: '',\n  type2: ''\n};\n\nvar FeedsHomePage = /*#__PURE__*/function (_Component) {\n  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(FeedsHomePage, _Component);\n\n  var _super = _createSuper(FeedsHomePage);\n\n  function FeedsHomePage() {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, FeedsHomePage);\n\n    return _super.apply(this, arguments);\n  }\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(FeedsHomePage, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(_hippy_react__WEBPACK_IMPORTED_MODULE_6__[\"View\"], {\n        style: {\n          width: 200,\n          height: 100,\n          backgroundColor: 'red'\n        }\n      });\n    }\n  }]);\n\n  return FeedsHomePage;\n}(react__WEBPACK_IMPORTED_MODULE_5__[\"Component\"]);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9GZWVkc0hvbWVQYWdlLmpzPzQ4NzgiXSwibmFtZXMiOlsiYSIsImkiLCJuYW1lIiwic2NvcmUiLCJmcm9tIiwidHlwZTIiLCJGZWVkc0hvbWVQYWdlIiwid2lkdGgiLCJoZWlnaHQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJDb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFLQSxJQUFJQSxDQUFDLEdBQUc7QUFDTkMsR0FBQyxFQUFFLFVBREc7QUFFTkMsTUFBSSxFQUFFLEVBRkE7QUFHTkMsT0FBSyxFQUFFLEVBSEQ7QUFJTkMsTUFBSSxFQUFFLEVBSkE7QUFLTkMsT0FBSyxFQUFFO0FBTEQsQ0FBUjs7SUFRcUJDLGE7Ozs7Ozs7Ozs7Ozs7V0FDbkIsa0JBQVM7QUFDUCwwQkFBUSwyREFBQyxpREFBRDtBQUFNLGFBQUssRUFBRTtBQUNuQkMsZUFBSyxFQUFFLEdBRFk7QUFFbkJDLGdCQUFNLEVBQUUsR0FGVztBQUduQkMseUJBQWUsRUFBRTtBQUhFO0FBQWIsUUFBUjtBQU1EOzs7O0VBUndDQywrQyIsImZpbGUiOiIuL0ZlZWRzSG9tZVBhZ2UuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9zb3J0LWNvbXAgKi9cbi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L25vLXVudXNlZC1zdGF0ZSAqL1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gIFZpZXcsXG4gIFRleHQsXG59IGZyb20gJ0BoaXBweS9yZWFjdCc7XG5cbnZhciBhID0ge1xuICBpOiAzOTUwMTIzMTUxLFxuICBuYW1lOiAnJyxcbiAgc2NvcmU6ICcnLFxuICBmcm9tOiAnJyxcbiAgdHlwZTI6ICcnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmVlZHNIb21lUGFnZSBleHRlbmRzIENvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKDxWaWV3IHN0eWxlPXt7XG4gICAgICB3aWR0aDogMjAwLFxuICAgICAgaGVpZ2h0OiAxMDAsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZWQnLFxuICAgIH19PlxuICAgIDwvVmlldz4pO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./FeedsHomePage.js\n");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _hippy_react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hippy/react */ \"./node_modules/@hippy/react/dist/index.js\");\n/* harmony import */ var _FeedsHomePage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./FeedsHomePage */ \"./FeedsHomePage.js\");\n\n\nvar hippy = new _hippy_react__WEBPACK_IMPORTED_MODULE_0__[\"Hippy\"]({\n  appName: 'Demo',\n  entryPage: _FeedsHomePage__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  silent: false // \\u662f\\u5426\\u5c55\\u793a\\u8c03\\u8bd5\\u4fe1\\u606f\n\n});\nhippy.regist();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9pbmRleC5qcz80MWY1Il0sIm5hbWVzIjpbImhpcHB5IiwiSGlwcHkiLCJhcHBOYW1lIiwiZW50cnlQYWdlIiwiRmVlZHNIb21lUGFnZSIsInNpbGVudCIsInJlZ2lzdCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUVBLElBQU1BLEtBQUssR0FBRyxJQUFJQyxrREFBSixDQUFVO0FBQ3RCQyxTQUFPLEVBQUUsTUFEYTtBQUV0QkMsV0FBUyxFQUFFQyxzREFGVztBQUd0QkMsUUFBTSxFQUFFLEtBSGMsQ0FHUDs7QUFITyxDQUFWLENBQWQ7QUFNQUwsS0FBSyxDQUFDTSxNQUFOIiwiZmlsZSI6Ii4vaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIaXBweSB9IGZyb20gJ0BoaXBweS9yZWFjdCc7XG5pbXBvcnQgRmVlZHNIb21lUGFnZSBmcm9tICcuL0ZlZWRzSG9tZVBhZ2UnO1xuXG5jb25zdCBoaXBweSA9IG5ldyBIaXBweSh7XG4gIGFwcE5hbWU6ICdEZW1vJyxcbiAgZW50cnlQYWdlOiBGZWVkc0hvbWVQYWdlLFxuICBzaWxlbnQ6IGZhbHNlLCAvLyBcXHU2NjJmXFx1NTQyNlxcdTVjNTVcXHU3OTNhXFx1OGMwM1xcdThiZDVcXHU0ZmUxXFx1NjA2ZlxufSk7XG5cbmhpcHB5LnJlZ2lzdCgpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./index.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/arrayLikeToArray.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayLikeToArray.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheUxpa2VUb0FycmF5LmpzPzVhNDMiXSwibmFtZXMiOlsiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJsZW5ndGgiLCJpIiwiYXJyMiIsIkFycmF5IiwibW9kdWxlIiwiZXhwb3J0cyIsIl9fZXNNb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLGlCQUFULENBQTJCQyxHQUEzQixFQUFnQ0MsR0FBaEMsRUFBcUM7QUFDbkMsTUFBSUEsR0FBRyxJQUFJLElBQVAsSUFBZUEsR0FBRyxHQUFHRCxHQUFHLENBQUNFLE1BQTdCLEVBQXFDRCxHQUFHLEdBQUdELEdBQUcsQ0FBQ0UsTUFBVjs7QUFFckMsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBUixFQUFXQyxJQUFJLEdBQUcsSUFBSUMsS0FBSixDQUFVSixHQUFWLENBQXZCLEVBQXVDRSxDQUFDLEdBQUdGLEdBQTNDLEVBQWdERSxDQUFDLEVBQWpELEVBQXFEO0FBQ25EQyxRQUFJLENBQUNELENBQUQsQ0FBSixHQUFVSCxHQUFHLENBQUNHLENBQUQsQ0FBYjtBQUNEOztBQUVELFNBQU9DLElBQVA7QUFDRDs7QUFFREUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCUixpQkFBakI7QUFDQU8sTUFBTSxDQUFDQyxPQUFQLENBQWUsU0FBZixJQUE0QkQsTUFBTSxDQUFDQyxPQUFuQyxFQUE0Q0QsTUFBTSxDQUFDQyxPQUFQLENBQWVDLFVBQWYsR0FBNEIsSUFBeEUiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheUxpa2VUb0FycmF5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyMltpXSA9IGFycltpXTtcbiAgfVxuXG4gIHJldHVybiBhcnIyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hcnJheUxpa2VUb0FycmF5O1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/arrayLikeToArray.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/arrayWithHoles.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithHoles.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheVdpdGhIb2xlcy5qcz9jMTM1Il0sIm5hbWVzIjpbIl9hcnJheVdpdGhIb2xlcyIsImFyciIsIkFycmF5IiwiaXNBcnJheSIsIm1vZHVsZSIsImV4cG9ydHMiLCJfX2VzTW9kdWxlIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxlQUFULENBQXlCQyxHQUF6QixFQUE4QjtBQUM1QixNQUFJQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0YsR0FBZCxDQUFKLEVBQXdCLE9BQU9BLEdBQVA7QUFDekI7O0FBRURHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkwsZUFBakI7QUFDQUksTUFBTSxDQUFDQyxPQUFQLENBQWUsU0FBZixJQUE0QkQsTUFBTSxDQUFDQyxPQUFuQyxFQUE0Q0QsTUFBTSxDQUFDQyxPQUFQLENBQWVDLFVBQWYsR0FBNEIsSUFBeEUiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheVdpdGhIb2xlcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlXaXRoSG9sZXM7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/arrayWithHoles.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray.js */ \"./node_modules/@babel/runtime/helpers/arrayLikeToArray.js\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheVdpdGhvdXRIb2xlcy5qcz8yMjM2Il0sIm5hbWVzIjpbImFycmF5TGlrZVRvQXJyYXkiLCJyZXF1aXJlIiwiX2FycmF5V2l0aG91dEhvbGVzIiwiYXJyIiwiQXJyYXkiLCJpc0FycmF5IiwibW9kdWxlIiwiZXhwb3J0cyIsIl9fZXNNb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLGdCQUFnQixHQUFHQyxtQkFBTyxDQUFDLHdGQUFELENBQTlCOztBQUVBLFNBQVNDLGtCQUFULENBQTRCQyxHQUE1QixFQUFpQztBQUMvQixNQUFJQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0YsR0FBZCxDQUFKLEVBQXdCLE9BQU9ILGdCQUFnQixDQUFDRyxHQUFELENBQXZCO0FBQ3pCOztBQUVERyxNQUFNLENBQUNDLE9BQVAsR0FBaUJMLGtCQUFqQjtBQUNBSSxNQUFNLENBQUNDLE9BQVAsQ0FBZSxTQUFmLElBQTRCRCxNQUFNLENBQUNDLE9BQW5DLEVBQTRDRCxNQUFNLENBQUNDLE9BQVAsQ0FBZUMsVUFBZixHQUE0QixJQUF4RSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5V2l0aG91dEhvbGVzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFycmF5TGlrZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCIpO1xuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aG91dEhvbGVzO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/assertThisInitialized.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanM/M2M5NiJdLCJuYW1lcyI6WyJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyIsIl9fZXNNb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLHNCQUFULENBQWdDQyxJQUFoQyxFQUFzQztBQUNwQyxNQUFJQSxJQUFJLEtBQUssS0FBSyxDQUFsQixFQUFxQjtBQUNuQixVQUFNLElBQUlDLGNBQUosQ0FBbUIsMkRBQW5CLENBQU47QUFDRDs7QUFFRCxTQUFPRCxJQUFQO0FBQ0Q7O0FBRURFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkosc0JBQWpCO0FBQ0FHLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlLFNBQWYsSUFBNEJELE1BQU0sQ0FBQ0MsT0FBbkMsRUFBNENELE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxVQUFmLEdBQTRCLElBQXhFIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/assertThisInitialized.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/classCallCheck.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/classCallCheck.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcz85NzBiIl0sIm5hbWVzIjpbIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiX19lc01vZHVsZSJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsZUFBVCxDQUF5QkMsUUFBekIsRUFBbUNDLFdBQW5DLEVBQWdEO0FBQzlDLE1BQUksRUFBRUQsUUFBUSxZQUFZQyxXQUF0QixDQUFKLEVBQXdDO0FBQ3RDLFVBQU0sSUFBSUMsU0FBSixDQUFjLG1DQUFkLENBQU47QUFDRDtBQUNGOztBQUVEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJMLGVBQWpCO0FBQ0FJLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlLFNBQWYsSUFBNEJELE1BQU0sQ0FBQ0MsT0FBbkMsRUFBNENELE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxVQUFmLEdBQTRCLElBQXhFIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jbGFzc0NhbGxDaGVjaztcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/classCallCheck.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/createClass.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/createClass.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcz81YmMzIl0sIm5hbWVzIjpbIl9kZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwiX2NyZWF0ZUNsYXNzIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiX19lc01vZHVsZSJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsaUJBQVQsQ0FBMkJDLE1BQTNCLEVBQW1DQyxLQUFuQyxFQUEwQztBQUN4QyxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdELEtBQUssQ0FBQ0UsTUFBMUIsRUFBa0NELENBQUMsRUFBbkMsRUFBdUM7QUFDckMsUUFBSUUsVUFBVSxHQUFHSCxLQUFLLENBQUNDLENBQUQsQ0FBdEI7QUFDQUUsY0FBVSxDQUFDQyxVQUFYLEdBQXdCRCxVQUFVLENBQUNDLFVBQVgsSUFBeUIsS0FBakQ7QUFDQUQsY0FBVSxDQUFDRSxZQUFYLEdBQTBCLElBQTFCO0FBQ0EsUUFBSSxXQUFXRixVQUFmLEVBQTJCQSxVQUFVLENBQUNHLFFBQVgsR0FBc0IsSUFBdEI7QUFDM0JDLFVBQU0sQ0FBQ0MsY0FBUCxDQUFzQlQsTUFBdEIsRUFBOEJJLFVBQVUsQ0FBQ00sR0FBekMsRUFBOENOLFVBQTlDO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTTyxZQUFULENBQXNCQyxXQUF0QixFQUFtQ0MsVUFBbkMsRUFBK0NDLFdBQS9DLEVBQTREO0FBQzFELE1BQUlELFVBQUosRUFBZ0JkLGlCQUFpQixDQUFDYSxXQUFXLENBQUNHLFNBQWIsRUFBd0JGLFVBQXhCLENBQWpCO0FBQ2hCLE1BQUlDLFdBQUosRUFBaUJmLGlCQUFpQixDQUFDYSxXQUFELEVBQWNFLFdBQWQsQ0FBakI7QUFDakIsU0FBT0YsV0FBUDtBQUNEOztBQUVESSxNQUFNLENBQUNDLE9BQVAsR0FBaUJOLFlBQWpCO0FBQ0FLLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlLFNBQWYsSUFBNEJELE1BQU0sQ0FBQ0MsT0FBbkMsRUFBNENELE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxVQUFmLEdBQTRCLElBQXhFIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NyZWF0ZUNsYXNzO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/createClass.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/defineProperty.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/defineProperty.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eS5qcz85NTIzIl0sIm5hbWVzIjpbIl9kZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImtleSIsInZhbHVlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiX19lc01vZHVsZSJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsZUFBVCxDQUF5QkMsR0FBekIsRUFBOEJDLEdBQTlCLEVBQW1DQyxLQUFuQyxFQUEwQztBQUN4QyxNQUFJRCxHQUFHLElBQUlELEdBQVgsRUFBZ0I7QUFDZEcsVUFBTSxDQUFDQyxjQUFQLENBQXNCSixHQUF0QixFQUEyQkMsR0FBM0IsRUFBZ0M7QUFDOUJDLFdBQUssRUFBRUEsS0FEdUI7QUFFOUJHLGdCQUFVLEVBQUUsSUFGa0I7QUFHOUJDLGtCQUFZLEVBQUUsSUFIZ0I7QUFJOUJDLGNBQVEsRUFBRTtBQUpvQixLQUFoQztBQU1ELEdBUEQsTUFPTztBQUNMUCxPQUFHLENBQUNDLEdBQUQsQ0FBSCxHQUFXQyxLQUFYO0FBQ0Q7O0FBRUQsU0FBT0YsR0FBUDtBQUNEOztBQUVEUSxNQUFNLENBQUNDLE9BQVAsR0FBaUJWLGVBQWpCO0FBQ0FTLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlLFNBQWYsSUFBNEJELE1BQU0sQ0FBQ0MsT0FBbkMsRUFBNENELE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxVQUFmLEdBQTRCLElBQXhFIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmaW5lUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/defineProperty.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/getPrototypeOf.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZi5qcz8zNmM2Il0sIm5hbWVzIjpbIl9nZXRQcm90b3R5cGVPZiIsIm8iLCJtb2R1bGUiLCJleHBvcnRzIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9fZXNNb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLGVBQVQsQ0FBeUJDLENBQXpCLEVBQTRCO0FBQzFCQyxRQUFNLENBQUNDLE9BQVAsR0FBaUJILGVBQWUsR0FBR0ksTUFBTSxDQUFDQyxjQUFQLEdBQXdCRCxNQUFNLENBQUNFLGNBQS9CLEdBQWdELFNBQVNOLGVBQVQsQ0FBeUJDLENBQXpCLEVBQTRCO0FBQzdHLFdBQU9BLENBQUMsQ0FBQ00sU0FBRixJQUFlSCxNQUFNLENBQUNFLGNBQVAsQ0FBc0JMLENBQXRCLENBQXRCO0FBQ0QsR0FGRDtBQUdBQyxRQUFNLENBQUNDLE9BQVAsQ0FBZSxTQUFmLElBQTRCRCxNQUFNLENBQUNDLE9BQW5DLEVBQTRDRCxNQUFNLENBQUNDLE9BQVAsQ0FBZUssVUFBZixHQUE0QixJQUF4RTtBQUNBLFNBQU9SLGVBQWUsQ0FBQ0MsQ0FBRCxDQUF0QjtBQUNEOztBQUVEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJILGVBQWpCO0FBQ0FFLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlLFNBQWYsSUFBNEJELE1BQU0sQ0FBQ0MsT0FBbkMsRUFBNENELE1BQU0sQ0FBQ0MsT0FBUCxDQUFlSyxVQUFmLEdBQTRCLElBQXhFIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2YuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZjtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/getPrototypeOf.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/inherits.js":
/*!*********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/inherits.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf.js */ \"./node_modules/@babel/runtime/helpers/setPrototypeOf.js\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcz9lZDZkIl0sIm5hbWVzIjpbInNldFByb3RvdHlwZU9mIiwicmVxdWlyZSIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIlR5cGVFcnJvciIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwidmFsdWUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJfX2VzTW9kdWxlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxjQUFjLEdBQUdDLG1CQUFPLENBQUMsb0ZBQUQsQ0FBNUI7O0FBRUEsU0FBU0MsU0FBVCxDQUFtQkMsUUFBbkIsRUFBNkJDLFVBQTdCLEVBQXlDO0FBQ3ZDLE1BQUksT0FBT0EsVUFBUCxLQUFzQixVQUF0QixJQUFvQ0EsVUFBVSxLQUFLLElBQXZELEVBQTZEO0FBQzNELFVBQU0sSUFBSUMsU0FBSixDQUFjLG9EQUFkLENBQU47QUFDRDs7QUFFREYsVUFBUSxDQUFDRyxTQUFULEdBQXFCQyxNQUFNLENBQUNDLE1BQVAsQ0FBY0osVUFBVSxJQUFJQSxVQUFVLENBQUNFLFNBQXZDLEVBQWtEO0FBQ3JFRyxlQUFXLEVBQUU7QUFDWEMsV0FBSyxFQUFFUCxRQURJO0FBRVhRLGNBQVEsRUFBRSxJQUZDO0FBR1hDLGtCQUFZLEVBQUU7QUFISDtBQUR3RCxHQUFsRCxDQUFyQjtBQU9BLE1BQUlSLFVBQUosRUFBZ0JKLGNBQWMsQ0FBQ0csUUFBRCxFQUFXQyxVQUFYLENBQWQ7QUFDakI7O0FBRURTLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlosU0FBakI7QUFDQVcsTUFBTSxDQUFDQyxPQUFQLENBQWUsU0FBZixJQUE0QkQsTUFBTSxDQUFDQyxPQUFuQyxFQUE0Q0QsTUFBTSxDQUFDQyxPQUFQLENBQWVDLFVBQWYsR0FBNEIsSUFBeEUiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuL3NldFByb3RvdHlwZU9mLmpzXCIpO1xuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2luaGVyaXRzO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/inherits.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/iterableToArray.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArray.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pdGVyYWJsZVRvQXJyYXkuanM/MTFiMCJdLCJuYW1lcyI6WyJfaXRlcmFibGVUb0FycmF5IiwiaXRlciIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiQXJyYXkiLCJmcm9tIiwibW9kdWxlIiwiZXhwb3J0cyIsIl9fZXNNb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLGdCQUFULENBQTBCQyxJQUExQixFQUFnQztBQUM5QixNQUFJLE9BQU9DLE1BQVAsS0FBa0IsV0FBbEIsSUFBaUNELElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxRQUFSLENBQUosSUFBeUIsSUFBMUQsSUFBa0VGLElBQUksQ0FBQyxZQUFELENBQUosSUFBc0IsSUFBNUYsRUFBa0csT0FBT0csS0FBSyxDQUFDQyxJQUFOLENBQVdKLElBQVgsQ0FBUDtBQUNuRzs7QUFFREssTUFBTSxDQUFDQyxPQUFQLEdBQWlCUCxnQkFBakI7QUFDQU0sTUFBTSxDQUFDQyxPQUFQLENBQWUsU0FBZixJQUE0QkQsTUFBTSxDQUFDQyxPQUFuQyxFQUE0Q0QsTUFBTSxDQUFDQyxPQUFQLENBQWVDLFVBQWYsR0FBNEIsSUFBeEUiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pdGVyYWJsZVRvQXJyYXkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2l0ZXJhYmxlVG9BcnJheTtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/iterableToArray.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qcz85YjQyIl0sIm5hbWVzIjpbIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsImFyciIsImkiLCJfaSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX2FyciIsIl9uIiwiX2QiLCJfcyIsIl9lIiwiY2FsbCIsIm5leHQiLCJkb25lIiwicHVzaCIsInZhbHVlIiwibGVuZ3RoIiwiZXJyIiwibW9kdWxlIiwiZXhwb3J0cyIsIl9fZXNNb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLHFCQUFULENBQStCQyxHQUEvQixFQUFvQ0MsQ0FBcEMsRUFBdUM7QUFDckMsTUFBSUMsRUFBRSxHQUFHRixHQUFHLElBQUksSUFBUCxHQUFjLElBQWQsR0FBcUIsT0FBT0csTUFBUCxLQUFrQixXQUFsQixJQUFpQ0gsR0FBRyxDQUFDRyxNQUFNLENBQUNDLFFBQVIsQ0FBcEMsSUFBeURKLEdBQUcsQ0FBQyxZQUFELENBQTFGOztBQUVBLE1BQUlFLEVBQUUsSUFBSSxJQUFWLEVBQWdCO0FBQ2hCLE1BQUlHLElBQUksR0FBRyxFQUFYO0FBQ0EsTUFBSUMsRUFBRSxHQUFHLElBQVQ7QUFDQSxNQUFJQyxFQUFFLEdBQUcsS0FBVDs7QUFFQSxNQUFJQyxFQUFKLEVBQVFDLEVBQVI7O0FBRUEsTUFBSTtBQUNGLFNBQUtQLEVBQUUsR0FBR0EsRUFBRSxDQUFDUSxJQUFILENBQVFWLEdBQVIsQ0FBVixFQUF3QixFQUFFTSxFQUFFLEdBQUcsQ0FBQ0UsRUFBRSxHQUFHTixFQUFFLENBQUNTLElBQUgsRUFBTixFQUFpQkMsSUFBeEIsQ0FBeEIsRUFBdUROLEVBQUUsR0FBRyxJQUE1RCxFQUFrRTtBQUNoRUQsVUFBSSxDQUFDUSxJQUFMLENBQVVMLEVBQUUsQ0FBQ00sS0FBYjs7QUFFQSxVQUFJYixDQUFDLElBQUlJLElBQUksQ0FBQ1UsTUFBTCxLQUFnQmQsQ0FBekIsRUFBNEI7QUFDN0I7QUFDRixHQU5ELENBTUUsT0FBT2UsR0FBUCxFQUFZO0FBQ1pULE1BQUUsR0FBRyxJQUFMO0FBQ0FFLE1BQUUsR0FBR08sR0FBTDtBQUNELEdBVEQsU0FTVTtBQUNSLFFBQUk7QUFDRixVQUFJLENBQUNWLEVBQUQsSUFBT0osRUFBRSxDQUFDLFFBQUQsQ0FBRixJQUFnQixJQUEzQixFQUFpQ0EsRUFBRSxDQUFDLFFBQUQsQ0FBRjtBQUNsQyxLQUZELFNBRVU7QUFDUixVQUFJSyxFQUFKLEVBQVEsTUFBTUUsRUFBTjtBQUNUO0FBQ0Y7O0FBRUQsU0FBT0osSUFBUDtBQUNEOztBQUVEWSxNQUFNLENBQUNDLE9BQVAsR0FBaUJuQixxQkFBakI7QUFDQWtCLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlLFNBQWYsSUFBNEJELE1BQU0sQ0FBQ0MsT0FBbkMsRUFBNENELE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxVQUFmLEdBQTRCLElBQXhFIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXRlcmFibGVUb0FycmF5TGltaXQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIHZhciBfaSA9IGFyciA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXTtcblxuICBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuO1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcblxuICB2YXIgX3MsIF9lO1xuXG4gIHRyeSB7XG4gICAgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2l0ZXJhYmxlVG9BcnJheUxpbWl0O1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/nonIterableRest.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableRest.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableRest;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVJlc3QuanM/YzI0MCJdLCJuYW1lcyI6WyJfbm9uSXRlcmFibGVSZXN0IiwiVHlwZUVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyIsIl9fZXNNb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLGdCQUFULEdBQTRCO0FBQzFCLFFBQU0sSUFBSUMsU0FBSixDQUFjLDJJQUFkLENBQU47QUFDRDs7QUFFREMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCSCxnQkFBakI7QUFDQUUsTUFBTSxDQUFDQyxPQUFQLENBQWUsU0FBZixJQUE0QkQsTUFBTSxDQUFDQyxPQUFuQyxFQUE0Q0QsTUFBTSxDQUFDQyxPQUFQLENBQWVDLFVBQWYsR0FBNEIsSUFBeEUiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVJlc3QuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9ub25JdGVyYWJsZVJlc3Q7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/nonIterableRest.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/nonIterableSpread.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableSpread.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVNwcmVhZC5qcz8wNjc2Il0sIm5hbWVzIjpbIl9ub25JdGVyYWJsZVNwcmVhZCIsIlR5cGVFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJfX2VzTW9kdWxlIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxrQkFBVCxHQUE4QjtBQUM1QixRQUFNLElBQUlDLFNBQUosQ0FBYyxzSUFBZCxDQUFOO0FBQ0Q7O0FBRURDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkgsa0JBQWpCO0FBQ0FFLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlLFNBQWYsSUFBNEJELE1BQU0sQ0FBQ0MsT0FBbkMsRUFBNENELE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxVQUFmLEdBQTRCLElBQXhFIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvbm9uSXRlcmFibGVTcHJlYWQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9ub25JdGVyYWJsZVNwcmVhZDtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/nonIterableSpread.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/objectWithoutProperties.js":
/*!************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/objectWithoutProperties.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var objectWithoutPropertiesLoose = __webpack_require__(/*! ./objectWithoutPropertiesLoose.js */ \"./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js\");\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutProperties;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcy5qcz80MDgyIl0sIm5hbWVzIjpbIm9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJyZXF1aXJlIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwic291cmNlIiwiZXhjbHVkZWQiLCJ0YXJnZXQiLCJrZXkiLCJpIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic291cmNlU3ltYm9sS2V5cyIsImxlbmd0aCIsImluZGV4T2YiLCJwcm90b3R5cGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImNhbGwiLCJtb2R1bGUiLCJleHBvcnRzIiwiX19lc01vZHVsZSJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsNEJBQTRCLEdBQUdDLG1CQUFPLENBQUMsZ0hBQUQsQ0FBMUM7O0FBRUEsU0FBU0Msd0JBQVQsQ0FBa0NDLE1BQWxDLEVBQTBDQyxRQUExQyxFQUFvRDtBQUNsRCxNQUFJRCxNQUFNLElBQUksSUFBZCxFQUFvQixPQUFPLEVBQVA7QUFDcEIsTUFBSUUsTUFBTSxHQUFHTCw0QkFBNEIsQ0FBQ0csTUFBRCxFQUFTQyxRQUFULENBQXpDO0FBQ0EsTUFBSUUsR0FBSixFQUFTQyxDQUFUOztBQUVBLE1BQUlDLE1BQU0sQ0FBQ0MscUJBQVgsRUFBa0M7QUFDaEMsUUFBSUMsZ0JBQWdCLEdBQUdGLE1BQU0sQ0FBQ0MscUJBQVAsQ0FBNkJOLE1BQTdCLENBQXZCOztBQUVBLFNBQUtJLENBQUMsR0FBRyxDQUFULEVBQVlBLENBQUMsR0FBR0csZ0JBQWdCLENBQUNDLE1BQWpDLEVBQXlDSixDQUFDLEVBQTFDLEVBQThDO0FBQzVDRCxTQUFHLEdBQUdJLGdCQUFnQixDQUFDSCxDQUFELENBQXRCO0FBQ0EsVUFBSUgsUUFBUSxDQUFDUSxPQUFULENBQWlCTixHQUFqQixLQUF5QixDQUE3QixFQUFnQztBQUNoQyxVQUFJLENBQUNFLE1BQU0sQ0FBQ0ssU0FBUCxDQUFpQkMsb0JBQWpCLENBQXNDQyxJQUF0QyxDQUEyQ1osTUFBM0MsRUFBbURHLEdBQW5ELENBQUwsRUFBOEQ7QUFDOURELFlBQU0sQ0FBQ0MsR0FBRCxDQUFOLEdBQWNILE1BQU0sQ0FBQ0csR0FBRCxDQUFwQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBT0QsTUFBUDtBQUNEOztBQUVEVyxNQUFNLENBQUNDLE9BQVAsR0FBaUJmLHdCQUFqQjtBQUNBYyxNQUFNLENBQUNDLE9BQVAsQ0FBZSxTQUFmLElBQTRCRCxNQUFNLENBQUNDLE9BQW5DLEVBQTRDRCxNQUFNLENBQUNDLE9BQVAsQ0FBZUMsVUFBZixHQUE0QixJQUF4RSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgPSByZXF1aXJlKFwiLi9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzXCIpO1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG4gIHZhciBrZXksIGk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/objectWithoutProperties.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzP2YwZTQiXSwibmFtZXMiOlsiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJzb3VyY2UiLCJleGNsdWRlZCIsInRhcmdldCIsInNvdXJjZUtleXMiLCJPYmplY3QiLCJrZXlzIiwia2V5IiwiaSIsImxlbmd0aCIsImluZGV4T2YiLCJtb2R1bGUiLCJleHBvcnRzIiwiX19lc01vZHVsZSJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsNkJBQVQsQ0FBdUNDLE1BQXZDLEVBQStDQyxRQUEvQyxFQUF5RDtBQUN2RCxNQUFJRCxNQUFNLElBQUksSUFBZCxFQUFvQixPQUFPLEVBQVA7QUFDcEIsTUFBSUUsTUFBTSxHQUFHLEVBQWI7QUFDQSxNQUFJQyxVQUFVLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZTCxNQUFaLENBQWpCO0FBQ0EsTUFBSU0sR0FBSixFQUFTQyxDQUFUOztBQUVBLE9BQUtBLENBQUMsR0FBRyxDQUFULEVBQVlBLENBQUMsR0FBR0osVUFBVSxDQUFDSyxNQUEzQixFQUFtQ0QsQ0FBQyxFQUFwQyxFQUF3QztBQUN0Q0QsT0FBRyxHQUFHSCxVQUFVLENBQUNJLENBQUQsQ0FBaEI7QUFDQSxRQUFJTixRQUFRLENBQUNRLE9BQVQsQ0FBaUJILEdBQWpCLEtBQXlCLENBQTdCLEVBQWdDO0FBQ2hDSixVQUFNLENBQUNJLEdBQUQsQ0FBTixHQUFjTixNQUFNLENBQUNNLEdBQUQsQ0FBcEI7QUFDRDs7QUFFRCxTQUFPSixNQUFQO0FBQ0Q7O0FBRURRLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlosNkJBQWpCO0FBQ0FXLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlLFNBQWYsSUFBNEJELE1BQU0sQ0FBQ0MsT0FBbkMsRUFBNENELE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxVQUFmLEdBQTRCLElBQXhFIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\")[\"default\"];\n\nvar assertThisInitialized = __webpack_require__(/*! ./assertThisInitialized.js */ \"./node_modules/@babel/runtime/helpers/assertThisInitialized.js\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzPzZiNTgiXSwibmFtZXMiOlsiX3R5cGVvZiIsInJlcXVpcmUiLCJhc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJjYWxsIiwiVHlwZUVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyIsIl9fZXNNb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLE9BQU8sR0FBR0MsbUJBQU8sQ0FBQyxzRkFBRCxDQUFQLENBQXlDLFNBQXpDLENBQWQ7O0FBRUEsSUFBSUMscUJBQXFCLEdBQUdELG1CQUFPLENBQUMsa0dBQUQsQ0FBbkM7O0FBRUEsU0FBU0UsMEJBQVQsQ0FBb0NDLElBQXBDLEVBQTBDQyxJQUExQyxFQUFnRDtBQUM5QyxNQUFJQSxJQUFJLEtBQUtMLE9BQU8sQ0FBQ0ssSUFBRCxDQUFQLEtBQWtCLFFBQWxCLElBQThCLE9BQU9BLElBQVAsS0FBZ0IsVUFBbkQsQ0FBUixFQUF3RTtBQUN0RSxXQUFPQSxJQUFQO0FBQ0QsR0FGRCxNQUVPLElBQUlBLElBQUksS0FBSyxLQUFLLENBQWxCLEVBQXFCO0FBQzFCLFVBQU0sSUFBSUMsU0FBSixDQUFjLDBEQUFkLENBQU47QUFDRDs7QUFFRCxTQUFPSixxQkFBcUIsQ0FBQ0UsSUFBRCxDQUE1QjtBQUNEOztBQUVERyxNQUFNLENBQUNDLE9BQVAsR0FBaUJMLDBCQUFqQjtBQUNBSSxNQUFNLENBQUNDLE9BQVAsQ0FBZSxTQUFmLElBQTRCRCxNQUFNLENBQUNDLE9BQW5DLEVBQTRDRCxNQUFNLENBQUNDLE9BQVAsQ0FBZUMsVUFBZixHQUE0QixJQUF4RSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKVtcImRlZmF1bHRcIl07XG5cbnZhciBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQgPSByZXF1aXJlKFwiLi9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanNcIik7XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7XG4gIH1cblxuICByZXR1cm4gYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/setPrototypeOf.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zZXRQcm90b3R5cGVPZi5qcz80YTRiIl0sIm5hbWVzIjpbIl9zZXRQcm90b3R5cGVPZiIsIm8iLCJwIiwibW9kdWxlIiwiZXhwb3J0cyIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX19lc01vZHVsZSJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsZUFBVCxDQUF5QkMsQ0FBekIsRUFBNEJDLENBQTVCLEVBQStCO0FBQzdCQyxRQUFNLENBQUNDLE9BQVAsR0FBaUJKLGVBQWUsR0FBR0ssTUFBTSxDQUFDQyxjQUFQLElBQXlCLFNBQVNOLGVBQVQsQ0FBeUJDLENBQXpCLEVBQTRCQyxDQUE1QixFQUErQjtBQUN6RkQsS0FBQyxDQUFDTSxTQUFGLEdBQWNMLENBQWQ7QUFDQSxXQUFPRCxDQUFQO0FBQ0QsR0FIRDs7QUFLQUUsUUFBTSxDQUFDQyxPQUFQLENBQWUsU0FBZixJQUE0QkQsTUFBTSxDQUFDQyxPQUFuQyxFQUE0Q0QsTUFBTSxDQUFDQyxPQUFQLENBQWVJLFVBQWYsR0FBNEIsSUFBeEU7QUFDQSxTQUFPUixlQUFlLENBQUNDLENBQUQsRUFBSUMsQ0FBSixDQUF0QjtBQUNEOztBQUVEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJKLGVBQWpCO0FBQ0FHLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlLFNBQWYsSUFBNEJELE1BQU0sQ0FBQ0MsT0FBbkMsRUFBNENELE1BQU0sQ0FBQ0MsT0FBUCxDQUFlSSxVQUFmLEdBQTRCLElBQXhFIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2V0UHJvdG90eXBlT2YuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/setPrototypeOf.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/slicedToArray.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/slicedToArray.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayWithHoles = __webpack_require__(/*! ./arrayWithHoles.js */ \"./node_modules/@babel/runtime/helpers/arrayWithHoles.js\");\n\nvar iterableToArrayLimit = __webpack_require__(/*! ./iterableToArrayLimit.js */ \"./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js\");\n\nvar unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray.js */ \"./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js\");\n\nvar nonIterableRest = __webpack_require__(/*! ./nonIterableRest.js */ \"./node_modules/@babel/runtime/helpers/nonIterableRest.js\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5LmpzPzI3OGMiXSwibmFtZXMiOlsiYXJyYXlXaXRoSG9sZXMiLCJyZXF1aXJlIiwiaXRlcmFibGVUb0FycmF5TGltaXQiLCJ1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIm5vbkl0ZXJhYmxlUmVzdCIsIl9zbGljZWRUb0FycmF5IiwiYXJyIiwiaSIsIm1vZHVsZSIsImV4cG9ydHMiLCJfX2VzTW9kdWxlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxjQUFjLEdBQUdDLG1CQUFPLENBQUMsb0ZBQUQsQ0FBNUI7O0FBRUEsSUFBSUMsb0JBQW9CLEdBQUdELG1CQUFPLENBQUMsZ0dBQUQsQ0FBbEM7O0FBRUEsSUFBSUUsMEJBQTBCLEdBQUdGLG1CQUFPLENBQUMsNEdBQUQsQ0FBeEM7O0FBRUEsSUFBSUcsZUFBZSxHQUFHSCxtQkFBTyxDQUFDLHNGQUFELENBQTdCOztBQUVBLFNBQVNJLGNBQVQsQ0FBd0JDLEdBQXhCLEVBQTZCQyxDQUE3QixFQUFnQztBQUM5QixTQUFPUCxjQUFjLENBQUNNLEdBQUQsQ0FBZCxJQUF1Qkosb0JBQW9CLENBQUNJLEdBQUQsRUFBTUMsQ0FBTixDQUEzQyxJQUF1REosMEJBQTBCLENBQUNHLEdBQUQsRUFBTUMsQ0FBTixDQUFqRixJQUE2RkgsZUFBZSxFQUFuSDtBQUNEOztBQUVESSxNQUFNLENBQUNDLE9BQVAsR0FBaUJKLGNBQWpCO0FBQ0FHLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlLFNBQWYsSUFBNEJELE1BQU0sQ0FBQ0MsT0FBbkMsRUFBNENELE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxVQUFmLEdBQTRCLElBQXhFIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcnJheVdpdGhIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aEhvbGVzLmpzXCIpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5TGltaXQgPSByZXF1aXJlKFwiLi9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qc1wiKTtcblxudmFyIHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIik7XG5cbnZhciBub25JdGVyYWJsZVJlc3QgPSByZXF1aXJlKFwiLi9ub25JdGVyYWJsZVJlc3QuanNcIik7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NsaWNlZFRvQXJyYXk7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/slicedToArray.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/toConsumableArray.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toConsumableArray.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayWithoutHoles = __webpack_require__(/*! ./arrayWithoutHoles.js */ \"./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js\");\n\nvar iterableToArray = __webpack_require__(/*! ./iterableToArray.js */ \"./node_modules/@babel/runtime/helpers/iterableToArray.js\");\n\nvar unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray.js */ \"./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js\");\n\nvar nonIterableSpread = __webpack_require__(/*! ./nonIterableSpread.js */ \"./node_modules/@babel/runtime/helpers/nonIterableSpread.js\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheS5qcz80NDhhIl0sIm5hbWVzIjpbImFycmF5V2l0aG91dEhvbGVzIiwicmVxdWlyZSIsIml0ZXJhYmxlVG9BcnJheSIsInVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5Iiwibm9uSXRlcmFibGVTcHJlYWQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIiLCJtb2R1bGUiLCJleHBvcnRzIiwiX19lc01vZHVsZSJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsaUJBQWlCLEdBQUdDLG1CQUFPLENBQUMsMEZBQUQsQ0FBL0I7O0FBRUEsSUFBSUMsZUFBZSxHQUFHRCxtQkFBTyxDQUFDLHNGQUFELENBQTdCOztBQUVBLElBQUlFLDBCQUEwQixHQUFHRixtQkFBTyxDQUFDLDRHQUFELENBQXhDOztBQUVBLElBQUlHLGlCQUFpQixHQUFHSCxtQkFBTyxDQUFDLDBGQUFELENBQS9COztBQUVBLFNBQVNJLGtCQUFULENBQTRCQyxHQUE1QixFQUFpQztBQUMvQixTQUFPTixpQkFBaUIsQ0FBQ00sR0FBRCxDQUFqQixJQUEwQkosZUFBZSxDQUFDSSxHQUFELENBQXpDLElBQWtESCwwQkFBMEIsQ0FBQ0csR0FBRCxDQUE1RSxJQUFxRkYsaUJBQWlCLEVBQTdHO0FBQ0Q7O0FBRURHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkgsa0JBQWpCO0FBQ0FFLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlLFNBQWYsSUFBNEJELE1BQU0sQ0FBQ0MsT0FBbkMsRUFBNENELE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxVQUFmLEdBQTRCLElBQXhFIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXJyYXlXaXRob3V0SG9sZXMgPSByZXF1aXJlKFwiLi9hcnJheVdpdGhvdXRIb2xlcy5qc1wiKTtcblxudmFyIGl0ZXJhYmxlVG9BcnJheSA9IHJlcXVpcmUoXCIuL2l0ZXJhYmxlVG9BcnJheS5qc1wiKTtcblxudmFyIHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIik7XG5cbnZhciBub25JdGVyYWJsZVNwcmVhZCA9IHJlcXVpcmUoXCIuL25vbkl0ZXJhYmxlU3ByZWFkLmpzXCIpO1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdG9Db25zdW1hYmxlQXJyYXk7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/toConsumableArray.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/typeof.js":
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n\n    module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n\n    module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YuanM/NzAzNyJdLCJuYW1lcyI6WyJfdHlwZW9mIiwib2JqIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiX19lc01vZHVsZSIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxPQUFULENBQWlCQyxHQUFqQixFQUFzQjtBQUNwQjs7QUFFQSxNQUFJLE9BQU9DLE1BQVAsS0FBa0IsVUFBbEIsSUFBZ0MsT0FBT0EsTUFBTSxDQUFDQyxRQUFkLEtBQTJCLFFBQS9ELEVBQXlFO0FBQ3ZFQyxVQUFNLENBQUNDLE9BQVAsR0FBaUJMLE9BQU8sR0FBRyxTQUFTQSxPQUFULENBQWlCQyxHQUFqQixFQUFzQjtBQUMvQyxhQUFPLE9BQU9BLEdBQWQ7QUFDRCxLQUZEOztBQUlBRyxVQUFNLENBQUNDLE9BQVAsQ0FBZSxTQUFmLElBQTRCRCxNQUFNLENBQUNDLE9BQW5DLEVBQTRDRCxNQUFNLENBQUNDLE9BQVAsQ0FBZUMsVUFBZixHQUE0QixJQUF4RTtBQUNELEdBTkQsTUFNTztBQUNMRixVQUFNLENBQUNDLE9BQVAsR0FBaUJMLE9BQU8sR0FBRyxTQUFTQSxPQUFULENBQWlCQyxHQUFqQixFQUFzQjtBQUMvQyxhQUFPQSxHQUFHLElBQUksT0FBT0MsTUFBUCxLQUFrQixVQUF6QixJQUF1Q0QsR0FBRyxDQUFDTSxXQUFKLEtBQW9CTCxNQUEzRCxJQUFxRUQsR0FBRyxLQUFLQyxNQUFNLENBQUNNLFNBQXBGLEdBQWdHLFFBQWhHLEdBQTJHLE9BQU9QLEdBQXpIO0FBQ0QsS0FGRDs7QUFJQUcsVUFBTSxDQUFDQyxPQUFQLENBQWUsU0FBZixJQUE0QkQsTUFBTSxDQUFDQyxPQUFuQyxFQUE0Q0QsTUFBTSxDQUFDQyxPQUFQLENBQWVDLFVBQWYsR0FBNEIsSUFBeEU7QUFDRDs7QUFFRCxTQUFPTixPQUFPLENBQUNDLEdBQUQsQ0FBZDtBQUNEOztBQUVERyxNQUFNLENBQUNDLE9BQVAsR0FBaUJMLE9BQWpCO0FBQ0FJLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlLFNBQWYsSUFBNEJELE1BQU0sQ0FBQ0MsT0FBbkMsRUFBNENELE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxVQUFmLEdBQTRCLElBQXhFIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9O1xuXG4gICAgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuXG4gICAgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/typeof.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray.js */ \"./node_modules/@babel/runtime/helpers/arrayLikeToArray.js\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qcz82NjEzIl0sIm5hbWVzIjpbImFycmF5TGlrZVRvQXJyYXkiLCJyZXF1aXJlIiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwibyIsIm1pbkxlbiIsIm4iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsIkFycmF5IiwiZnJvbSIsInRlc3QiLCJtb2R1bGUiLCJleHBvcnRzIiwiX19lc01vZHVsZSJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsZ0JBQWdCLEdBQUdDLG1CQUFPLENBQUMsd0ZBQUQsQ0FBOUI7O0FBRUEsU0FBU0MsMkJBQVQsQ0FBcUNDLENBQXJDLEVBQXdDQyxNQUF4QyxFQUFnRDtBQUM5QyxNQUFJLENBQUNELENBQUwsRUFBUTtBQUNSLE1BQUksT0FBT0EsQ0FBUCxLQUFhLFFBQWpCLEVBQTJCLE9BQU9ILGdCQUFnQixDQUFDRyxDQUFELEVBQUlDLE1BQUosQ0FBdkI7QUFDM0IsTUFBSUMsQ0FBQyxHQUFHQyxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLFFBQWpCLENBQTBCQyxJQUExQixDQUErQk4sQ0FBL0IsRUFBa0NPLEtBQWxDLENBQXdDLENBQXhDLEVBQTJDLENBQUMsQ0FBNUMsQ0FBUjtBQUNBLE1BQUlMLENBQUMsS0FBSyxRQUFOLElBQWtCRixDQUFDLENBQUNRLFdBQXhCLEVBQXFDTixDQUFDLEdBQUdGLENBQUMsQ0FBQ1EsV0FBRixDQUFjQyxJQUFsQjtBQUNyQyxNQUFJUCxDQUFDLEtBQUssS0FBTixJQUFlQSxDQUFDLEtBQUssS0FBekIsRUFBZ0MsT0FBT1EsS0FBSyxDQUFDQyxJQUFOLENBQVdYLENBQVgsQ0FBUDtBQUNoQyxNQUFJRSxDQUFDLEtBQUssV0FBTixJQUFxQiwyQ0FBMkNVLElBQTNDLENBQWdEVixDQUFoRCxDQUF6QixFQUE2RSxPQUFPTCxnQkFBZ0IsQ0FBQ0csQ0FBRCxFQUFJQyxNQUFKLENBQXZCO0FBQzlFOztBQUVEWSxNQUFNLENBQUNDLE9BQVAsR0FBaUJmLDJCQUFqQjtBQUNBYyxNQUFNLENBQUNDLE9BQVAsQ0FBZSxTQUFmLElBQTRCRCxNQUFNLENBQUNDLE9BQW5DLEVBQTRDRCxNQUFNLENBQUNDLE9BQVAsQ0FBZUMsVUFBZixHQUE0QixJQUF4RSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFycmF5TGlrZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCIpO1xuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheTtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js\n");

/***/ }),

/***/ "./node_modules/@hippy/hippy-live-reload-polyfill/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@hippy/hippy-live-reload-polyfill/index.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * polyfill script for ios hippy live-reload on development environment\n */\n(function () {\n  function initLiveReload() {\n    if (!global.WebSocket) return console.warn('websocket is unavailable for current hippy version');\n    var wsUrl = 'ws://127.0.0.1:38999/debugger-live-reload';\n    var ws = new global.WebSocket(wsUrl);\n\n    ws.onmessage = function (evt) {\n      console.info('[websocket onMessage]', evt);\n\n      try {\n        var data = JSON.parse(evt.data);\n\n        if (data.action === 'compileStart') {\n          console.info('[prepare reload bundle]');\n        } else if (data.action === 'compileSuccess') {\n          console.info('[start reload bundle]');\n          ws.close();\n          global.Hippy.bridge.callNative('DevMenu', 'reload');\n        }\n      } catch (err) {\n        console.error('live debug ws onmessage error', err);\n      }\n    };\n\n    global.Hippy.on('destroyInstance', function () {\n      ws.close();\n    });\n  }\n\n  if (!global.IS_LIVE_RELOAD_INIT && Hippy.device.platform.OS === 'ios') {\n    // initial only once\n    global.IS_LIVE_RELOAD_INIT = true;\n\n    try {\n      initLiveReload();\n      console.info('[Live Reload Start...]');\n    } catch (e) {\n      console.error('Hippy initLiveReload error', e);\n    }\n  }\n})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGhpcHB5L2hpcHB5LWxpdmUtcmVsb2FkLXBvbHlmaWxsL2luZGV4LmpzPzAyMTQiXSwibmFtZXMiOlsiaW5pdExpdmVSZWxvYWQiLCJnbG9iYWwiLCJXZWJTb2NrZXQiLCJjb25zb2xlIiwid2FybiIsIndzVXJsIiwid3MiLCJvbm1lc3NhZ2UiLCJldnQiLCJpbmZvIiwiZGF0YSIsIkpTT04iLCJwYXJzZSIsImFjdGlvbiIsImNsb3NlIiwiSGlwcHkiLCJicmlkZ2UiLCJjYWxsTmF0aXZlIiwiZXJyIiwiZXJyb3IiLCJvbiIsIklTX0xJVkVfUkVMT0FEX0lOSVQiLCJkZXZpY2UiLCJwbGF0Zm9ybSIsIk9TIiwiZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBRUMsYUFBWTtBQUNYLFdBQVNBLGNBQVQsR0FBMEI7QUFDeEIsUUFBSSxDQUFDQyxNQUFNLENBQUNDLFNBQVosRUFBdUIsT0FBT0MsT0FBTyxDQUFDQyxJQUFSLENBQWEsb0RBQWIsQ0FBUDtBQUN2QixRQUFNQyxLQUFLLEdBQUcsMkNBQWQ7QUFDQSxRQUFNQyxFQUFFLEdBQUcsSUFBSUwsTUFBTSxDQUFDQyxTQUFYLENBQXFCRyxLQUFyQixDQUFYOztBQUNBQyxNQUFFLENBQUNDLFNBQUgsR0FBZSxVQUFDQyxHQUFELEVBQVM7QUFDdEJMLGFBQU8sQ0FBQ00sSUFBUixDQUFhLHVCQUFiLEVBQXNDRCxHQUF0Qzs7QUFDQSxVQUFJO0FBQ0YsWUFBTUUsSUFBSSxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0osR0FBRyxDQUFDRSxJQUFmLENBQWI7O0FBQ0EsWUFBSUEsSUFBSSxDQUFDRyxNQUFMLEtBQWdCLGNBQXBCLEVBQW9DO0FBQ2xDVixpQkFBTyxDQUFDTSxJQUFSLENBQWEseUJBQWI7QUFDRCxTQUZELE1BRU8sSUFBSUMsSUFBSSxDQUFDRyxNQUFMLEtBQWdCLGdCQUFwQixFQUFzQztBQUMzQ1YsaUJBQU8sQ0FBQ00sSUFBUixDQUFhLHVCQUFiO0FBQ0FILFlBQUUsQ0FBQ1EsS0FBSDtBQUNBYixnQkFBTSxDQUFDYyxLQUFQLENBQWFDLE1BQWIsQ0FBb0JDLFVBQXBCLENBQStCLFNBQS9CLEVBQTBDLFFBQTFDO0FBQ0Q7QUFDRixPQVRELENBU0UsT0FBT0MsR0FBUCxFQUFZO0FBQ1pmLGVBQU8sQ0FBQ2dCLEtBQVIsQ0FBYywrQkFBZCxFQUErQ0QsR0FBL0M7QUFDRDtBQUNGLEtBZEQ7O0FBZUFqQixVQUFNLENBQUNjLEtBQVAsQ0FBYUssRUFBYixDQUFnQixpQkFBaEIsRUFBbUMsWUFBTTtBQUN2Q2QsUUFBRSxDQUFDUSxLQUFIO0FBQ0QsS0FGRDtBQUdEOztBQUNELE1BQUksQ0FBQ2IsTUFBTSxDQUFDb0IsbUJBQVIsSUFBK0JOLEtBQUssQ0FBQ08sTUFBTixDQUFhQyxRQUFiLENBQXNCQyxFQUF0QixLQUE2QixLQUFoRSxFQUF1RTtBQUNyRTtBQUNBdkIsVUFBTSxDQUFDb0IsbUJBQVAsR0FBNkIsSUFBN0I7O0FBQ0EsUUFBSTtBQUNGckIsb0JBQWM7QUFDZEcsYUFBTyxDQUFDTSxJQUFSLENBQWEsd0JBQWI7QUFDRCxLQUhELENBR0UsT0FBT2dCLENBQVAsRUFBVTtBQUNWdEIsYUFBTyxDQUFDZ0IsS0FBUixDQUFjLDRCQUFkLEVBQTRDTSxDQUE1QztBQUNEO0FBQ0Y7QUFDRixDQWxDQSxHQUFELEMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGhpcHB5L2hpcHB5LWxpdmUtcmVsb2FkLXBvbHlmaWxsL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBwb2x5ZmlsbCBzY3JpcHQgZm9yIGlvcyBoaXBweSBsaXZlLXJlbG9hZCBvbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudFxuICovXG5cbihmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGluaXRMaXZlUmVsb2FkKCkge1xuICAgIGlmICghZ2xvYmFsLldlYlNvY2tldCkgcmV0dXJuIGNvbnNvbGUud2Fybignd2Vic29ja2V0IGlzIHVuYXZhaWxhYmxlIGZvciBjdXJyZW50IGhpcHB5IHZlcnNpb24nKTtcbiAgICBjb25zdCB3c1VybCA9ICd3czovLzEyNy4wLjAuMTozODk5OS9kZWJ1Z2dlci1saXZlLXJlbG9hZCc7XG4gICAgY29uc3Qgd3MgPSBuZXcgZ2xvYmFsLldlYlNvY2tldCh3c1VybCk7XG4gICAgd3Mub25tZXNzYWdlID0gKGV2dCkgPT4ge1xuICAgICAgY29uc29sZS5pbmZvKCdbd2Vic29ja2V0IG9uTWVzc2FnZV0nLCBldnQpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoZXZ0LmRhdGEpO1xuICAgICAgICBpZiAoZGF0YS5hY3Rpb24gPT09ICdjb21waWxlU3RhcnQnKSB7XG4gICAgICAgICAgY29uc29sZS5pbmZvKCdbcHJlcGFyZSByZWxvYWQgYnVuZGxlXScpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEuYWN0aW9uID09PSAnY29tcGlsZVN1Y2Nlc3MnKSB7XG4gICAgICAgICAgY29uc29sZS5pbmZvKCdbc3RhcnQgcmVsb2FkIGJ1bmRsZV0nKTtcbiAgICAgICAgICB3cy5jbG9zZSgpO1xuICAgICAgICAgIGdsb2JhbC5IaXBweS5icmlkZ2UuY2FsbE5hdGl2ZSgnRGV2TWVudScsICdyZWxvYWQnKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ2xpdmUgZGVidWcgd3Mgb25tZXNzYWdlIGVycm9yJywgZXJyKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGdsb2JhbC5IaXBweS5vbignZGVzdHJveUluc3RhbmNlJywgKCkgPT4ge1xuICAgICAgd3MuY2xvc2UoKTtcbiAgICB9KTtcbiAgfVxuICBpZiAoIWdsb2JhbC5JU19MSVZFX1JFTE9BRF9JTklUICYmIEhpcHB5LmRldmljZS5wbGF0Zm9ybS5PUyA9PT0gJ2lvcycpIHtcbiAgICAvLyBpbml0aWFsIG9ubHkgb25jZVxuICAgIGdsb2JhbC5JU19MSVZFX1JFTE9BRF9JTklUID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgaW5pdExpdmVSZWxvYWQoKTtcbiAgICAgIGNvbnNvbGUuaW5mbygnW0xpdmUgUmVsb2FkIFN0YXJ0Li4uXScpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0hpcHB5IGluaXRMaXZlUmVsb2FkIGVycm9yJywgZSk7XG4gICAgfVxuICB9XG59KCkpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@hippy/hippy-live-reload-polyfill/index.js\n");

/***/ }),

/***/ "./node_modules/@hippy/react/dist/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@hippy/react/dist/index.js ***!
  \*************************************************/
/*! exports provided: default, Animated, Animation, AnimationSet, AppRegistry, AsyncStorage, BackAndroid, Clipboard, ConsoleModule, Dimensions, Easing, Focusable, Hippy, HippyEventEmitter, HippyEventListener, HippyRegister, Image, ImageBackground, ImageLoaderModule, ListView, ListViewItem, Modal, Navigator, NetInfo, NetworkModule, PixelRatio, Platform, PullFooter, PullHeader, RNfqb, RNfqbEventEmitter, RNfqbEventListener, RNfqbRegister, RefreshWrapper, ScrollView, StyleSheet, Text, TextInput, TimerModule, UIManagerModule, View, ViewPager, WaterfallView, WebSocket, WebView, callNative, callNativeWithCallbackId, callNativeWithPromise, colorParse, removeNativeCallback */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Animated\", function() { return Animated; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Animation\", function() { return Animation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AnimationSet\", function() { return AnimationSet; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AppRegistry\", function() { return AppRegistry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AsyncStorage\", function() { return AsyncStorage$2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BackAndroid\", function() { return BackAndroid$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Clipboard\", function() { return Clipboard; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConsoleModule\", function() { return ConsoleModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Dimensions\", function() { return Dimensions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Easing\", function() { return Easing; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Focusable\", function() { return Focusable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Hippy\", function() { return Hippy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HippyEventEmitter\", function() { return HippyEventEmitter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HippyEventListener\", function() { return HippyEventListener; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HippyRegister\", function() { return HippyRegister$2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Image\", function() { return Image; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ImageBackground\", function() { return ImageBackground; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ImageLoaderModule\", function() { return ImageLoaderModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ListView\", function() { return ListView; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ListViewItem\", function() { return ListViewItem; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Modal\", function() { return Modal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Navigator\", function() { return Navigator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NetInfo\", function() { return NetInfo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NetworkModule\", function() { return NetworkModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PixelRatio\", function() { return PixelRatio; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Platform\", function() { return Platform; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PullFooter\", function() { return PullFooter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PullHeader\", function() { return PullHeader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RNfqb\", function() { return RNfqb; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RNfqbEventEmitter\", function() { return RNfqbEventEmitter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RNfqbEventListener\", function() { return RNfqbEventListener; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RNfqbRegister\", function() { return RNfqbRegister; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RefreshWrapper\", function() { return RefreshWrapper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ScrollView\", function() { return ScrollView; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StyleSheet\", function() { return stylesheet; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Text\", function() { return Text; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextInput\", function() { return TextInput; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TimerModule\", function() { return TimerModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UIManagerModule\", function() { return UIManagerModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"View\", function() { return View; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ViewPager\", function() { return ViewPager; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WaterfallView\", function() { return WaterfallView; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WebSocket\", function() { return WebSocket; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WebView\", function() { return WebView; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"callNative\", function() { return callNative; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"callNativeWithCallbackId\", function() { return callNativeWithCallbackId; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"callNativeWithPromise\", function() { return callNativeWithPromise; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"colorParse\", function() { return colorParse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"removeNativeCallback\", function() { return removeNativeCallback; });\n/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ \"./node_modules/@babel/runtime/helpers/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/toConsumableArray.js\");\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ \"./node_modules/@babel/runtime/helpers/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js\");\n/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/getPrototypeOf.js\");\n/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"./node_modules/@babel/runtime/helpers/objectWithoutProperties.js\");\n/* harmony import */ var _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \"./node_modules/@babel/runtime/helpers/slicedToArray.js\");\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"./node_modules/@babel/runtime/helpers/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"./node_modules/@babel/runtime/helpers/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! react-reconciler */ \"./node_modules/react-reconciler/index.js\");\n/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(react_reconciler__WEBPACK_IMPORTED_MODULE_11__);\n\n\n\n\n\n\n\n\n\n\nvar _excluded = [\"children\"],\n    _excluded2 = [\"collapsable\", \"style\"],\n    _excluded3 = [\"style\"],\n    _excluded4 = [\"children\", \"style\", \"imageStyle\", \"imageRef\", \"source\", \"sources\", \"src\", \"srcs\", \"tintColor\", \"tintColors\"],\n    _excluded5 = [\"children\"],\n    _excluded6 = [\"children\"],\n    _excluded7 = [\"children\", \"style\", \"renderRow\", \"renderPullHeader\", \"renderPullFooter\", \"getRowType\", \"getRowStyle\", \"getRowKey\", \"dataSource\", \"initialListSize\", \"rowShouldSticky\", \"onRowLayout\", \"onHeaderPulling\", \"onHeaderReleased\", \"onFooterPulling\", \"onFooterReleased\", \"onAppear\", \"onDisappear\", \"onWillAppear\", \"onWillDisappear\"],\n    _excluded8 = [\"children\"],\n    _excluded9 = [\"component\"],\n    _excluded10 = [\"initialRoute\"],\n    _excluded11 = [\"children\", \"onPageScrollStateChanged\"],\n    _excluded12 = [\"collapsable\", \"style\"],\n    _excluded13 = [\"style\", \"renderBanner\", \"numberOfColumns\", \"columnSpacing\", \"interItemSpacing\", \"numberOfItems\", \"preloadItemNumber\", \"renderItem\", \"renderPullHeader\", \"renderPullFooter\", \"getItemType\", \"getItemKey\", \"getItemStyle\", \"contentInset\", \"onItemLayout\", \"onHeaderPulling\", \"onHeaderReleased\", \"onFooterPulling\", \"onFooterReleased\", \"containPullHeader\", \"containPullFooter\", \"containBannerView\"];\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default()(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*!\n * @hippy/react v2.9.0\n * Build at: Fri Sep 10 2021 18:39:29 GMT+0800 (China Standard Time)\n *\n * Tencent is pleased to support the open source community by making\n * Hippy available.\n *\n * Copyright (C) 2017-2021 THL A29 Limited, a Tencent company.\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/* eslint-disable no-underscore-dangle */\n// @ts-ignore\n\nif (!global.__GLOBAL__) {\n  // @ts-ignore\n  global.__GLOBAL__ = {};\n} // @ts-ignore\n\n\nvar _global = global,\n    __GLOBAL__ = _global.__GLOBAL__;\n__GLOBAL__.nodeId = 0;\n__GLOBAL__.animationId = 0;\n__GLOBAL__.renderCount = 0;\nvar _global$Hippy = global.Hippy,\n    AsyncStorage = _global$Hippy.asyncStorage,\n    Bridge = _global$Hippy.bridge,\n    Device = _global$Hippy.device,\n    UIManager = _global$Hippy.document,\n    HippyRegister = _global$Hippy.register,\n    addEventListener = _global$Hippy.on,\n    removeEventListener = _global$Hippy.off,\n    dispatchEvent = _global$Hippy.emit;\nvar HippyGlobal = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  addEventListener: addEventListener,\n  removeEventListener: removeEventListener,\n  dispatchEvent: dispatchEvent,\n  AsyncStorage: AsyncStorage,\n  Bridge: Bridge,\n  Device: Device,\n  HippyRegister: HippyRegister,\n  UIManager: UIManager\n});\n/* eslint-disable no-constant-condition */\n// Single root instance\n\nvar rootContainer;\nvar rootViewId;\n\nfunction setRootContainer(rootId, root) {\n  rootViewId = rootId;\n  rootContainer = root;\n}\n\nfunction getRootContainer() {\n  return rootContainer;\n}\n\nfunction getRootViewId() {\n  if (!rootViewId) {\n    throw new Error('getRootViewId must execute after setRootContainer');\n  }\n\n  return rootViewId;\n}\n\nfunction findNodeByCondition(condition) {\n  if (!rootContainer) {\n    return null;\n  }\n\n  var _rootContainer = rootContainer,\n      root = _rootContainer.current;\n  var queue = [root];\n\n  while (queue.length) {\n    var targetNode = queue.shift();\n\n    if (!targetNode) {\n      break;\n    }\n\n    if (condition(targetNode)) {\n      return targetNode;\n    }\n\n    if (targetNode.child) {\n      queue.push(targetNode.child);\n    }\n\n    if (targetNode.sibling) {\n      queue.push(targetNode.sibling);\n    }\n  }\n\n  return null;\n}\n\nfunction findNodeById(nodeId) {\n  return findNodeByCondition(function (node) {\n    return node.stateNode && node.stateNode.nodeId === nodeId;\n  });\n}\n/* eslint-disable import/prefer-default-export */\n\n\nvar IS_NUMBER_REG = new RegExp(/^\\d+$/);\nvar silent = false;\n/**\n * Trace running information\n */\n\nfunction trace() {\n  var _console;\n\n  // In production build or silent\n  if ( false || silent) {\n    return;\n  }\n  /* eslint-disable-next-line no-console */\n\n\n  (_console = console).log.apply(_console, arguments);\n}\n/**\n * Warning information output\n */\n\n\nfunction warn() {\n  var _console2;\n\n  // In production build\n  if (false) {}\n  /* eslint-disable-next-line no-console */\n\n\n  (_console2 = console).warn.apply(_console2, arguments);\n}\n/**\n * Convert unicode string to normal string\n * @param {string} text - The unicode string input\n */\n\n\nfunction unicodeToChar(text) {\n  return text.replace(/\\\\u[\\dA-F]{4}|\\\\x[\\dA-F]{2}/gi, function (match) {\n    return String.fromCharCode(parseInt(match.replace(/\\\\u|\\\\x/g, ''), 16));\n  });\n}\n/**\n * Convert to string as possible\n */\n\n\nvar numberRegEx = new RegExp('^(?=.+)[+-]?\\\\d*\\\\.?\\\\d*([Ee][+-]?\\\\d+)?$');\n/**\n * Try to convert something to number\n *\n * @param {any} input - The input try to convert number\n */\n\nfunction tryConvertNumber(input) {\n  if (typeof input === 'number') {\n    return input;\n  }\n\n  if (typeof input === 'string' && numberRegEx.test(input)) {\n    try {\n      return parseFloat(input);\n    } catch (err) {\n      return input;\n    }\n  }\n\n  return input;\n}\n/**\n * Determine input is function.\n *\n * @param {any} input - The input will determine is function.\n * @returns {boolean}\n */\n\n\nfunction isFunction(input) {\n  return Object.prototype.toString.call(input) === '[object Function]';\n}\n/**\n * Determine a string is number.\n * @param {string} input - the input will determine is number.\n * @returns {boolean}\n */\n\n\nfunction isNumber(input) {\n  return IS_NUMBER_REG.test(input);\n}\n/**\n * Make trace be silent.\n * @param {boolean} silentArg - The silent flag for log\n */\n\n\nfunction setSilent(silentArg) {\n  silent = silentArg;\n}\n/**\n * Convert Image url to specific type\n * @param url - image path\n */\n\n\nfunction convertImgUrl(url) {\n  if (url && !/^(http|https):\\/\\//.test(url) && url.indexOf('assets') > -1) {\n    if (false) { var addStr1; }\n\n    var addStr2 = 'hpfile://';\n    return \"\".concat(addStr2, \"./\").concat(url);\n  }\n\n  return url;\n}\n/* eslint-disable no-underscore-dangle */\n\n\nvar HippyEventHub = /*#__PURE__*/function () {\n  function HippyEventHub(eventName) {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, HippyEventHub);\n\n    this.handlerContainer = {};\n    this.nextIdForHandler = 0;\n    this.eventName = eventName;\n  }\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(HippyEventHub, [{\n    key: \"addEventHandler\",\n    value: function addEventHandler(handler, callContext) {\n      if (!handler) {\n        throw new TypeError('Invalid arguments');\n      }\n\n      var currId = this.nextIdForHandler;\n      this.nextIdForHandler += 1;\n      var eventHandlerWrapper = {\n        id: currId,\n        eventHandler: handler,\n        context: callContext\n      };\n      var idAttrName = \"eventHandler_\".concat(currId);\n      this.handlerContainer[idAttrName] = eventHandlerWrapper;\n      return currId;\n    }\n  }, {\n    key: \"removeEventHandler\",\n    value: function removeEventHandler(handlerId) {\n      if (typeof handlerId !== 'number') {\n        throw new TypeError('Invalid arguments');\n      }\n\n      var idAttrName = \"eventHandler_\".concat(handlerId);\n\n      if (this.handlerContainer[idAttrName]) {\n        delete this.handlerContainer[idAttrName];\n      }\n    }\n  }, {\n    key: \"notifyEvent\",\n    value: function notifyEvent(eventParams) {\n      var _this = this;\n\n      Object.keys(this.handlerContainer).forEach(function (key) {\n        var instance = _this.handlerContainer[key];\n\n        if (!instance || !instance.eventHandler) {\n          return;\n        }\n\n        if (instance.context) {\n          instance.eventHandler.call(instance.context, eventParams);\n        } else {\n          instance.eventHandler(eventParams);\n        }\n      });\n    }\n  }, {\n    key: \"getEventListeners\",\n    value: function getEventListeners() {\n      var _this2 = this;\n\n      return Object.keys(this.handlerContainer).filter(function (key) {\n        return _this2.handlerContainer[key];\n      }).map(function (key) {\n        return _this2.handlerContainer[key];\n      });\n    }\n  }, {\n    key: \"getHandlerSize\",\n    value: function getHandlerSize() {\n      return Object.keys(this.handlerContainer).length;\n    }\n  }]);\n\n  return HippyEventHub;\n}();\n\nvar eventHubs = new Map();\nvar componentName = ['%c[event]%c', 'color: green', 'color: auto'];\n\nfunction registerNativeEventHub(eventName) {\n  trace.apply(void 0, componentName.concat(['registerNativeEventHub', eventName]));\n\n  if (typeof eventName !== 'string') {\n    throw new TypeError(\"Invalid eventName for registerNativeEventHub: \".concat(eventName));\n  }\n\n  var targetEventHub = eventHubs.get(eventName);\n\n  if (!targetEventHub) {\n    targetEventHub = new HippyEventHub(eventName);\n    eventHubs.set(eventName, targetEventHub);\n  }\n\n  return targetEventHub;\n}\n\nfunction getHippyEventHub(eventName) {\n  if (typeof eventName !== 'string') {\n    throw new TypeError(\"Invalid eventName for getHippyEventHub: \".concat(eventName));\n  }\n\n  return eventHubs.get(eventName) || null;\n}\n\nfunction unregisterNativeEventHub(eventName) {\n  if (typeof eventName !== 'string') {\n    throw new TypeError(\"Invalid eventName for unregisterNativeEventHub: \".concat(eventName));\n  }\n\n  if (eventHubs.has(eventName)) {\n    eventHubs.delete(eventName);\n  }\n}\n\nfunction receiveNativeEvent(nativeEvent) {\n  trace.apply(void 0, componentName.concat(['receiveNativeEvent', nativeEvent]));\n\n  if (!nativeEvent || !Array.isArray(nativeEvent) || nativeEvent.length < 2) {\n    throw new TypeError(\"Invalid params for receiveNativeEvent: \".concat(JSON.stringify(nativeEvent)));\n  }\n\n  var _nativeEvent = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_7___default()(nativeEvent, 2),\n      eventName = _nativeEvent[0],\n      eventParams = _nativeEvent[1];\n\n  if (typeof eventName !== 'string') {\n    throw new TypeError('Invalid arguments');\n  }\n\n  var currEventHub = getHippyEventHub(eventName);\n\n  if (!currEventHub) {\n    return;\n  }\n\n  currEventHub.notifyEvent(eventParams);\n}\n\nfunction receiveNativeGesture(nativeEvent) {\n  trace.apply(void 0, componentName.concat(['receiveNativeGesture', nativeEvent]));\n\n  if (!nativeEvent) {\n    return;\n  }\n\n  var targetNodeId = nativeEvent.id;\n  var targetNode = findNodeById(targetNodeId);\n\n  if (!targetNode) {\n    return;\n  }\n\n  var eventHandled = false;\n  var nextNodeItem = targetNode;\n  var eventName = nativeEvent.name;\n\n  do {\n    if (nextNodeItem.memoizedProps && !nextNodeItem.memoizedProps[eventName] && eventName === 'onClick' && nextNodeItem.memoizedProps.onPress) {\n      // Compatible with React Native\n      eventName = 'onPress';\n    }\n\n    if (nextNodeItem.memoizedProps && nextNodeItem.memoizedProps[eventName] && typeof nextNodeItem.memoizedProps[eventName] === 'function') {\n      try {\n        eventHandled = nextNodeItem.memoizedProps[eventName](nativeEvent);\n      } catch (err) {\n        console.reportUncaughtException(err); // eslint-disable-line\n      }\n    } // If callback have no return is meaning no need the event bubbling\n\n\n    if (typeof eventHandled !== 'boolean') {\n      eventHandled = true;\n    }\n\n    if (eventHandled === false) {\n      // @ts-ignore\n      nextNodeItem = nextNodeItem.return;\n\n      while (nextNodeItem && nextNodeItem.tag !== 5) {\n        // @ts-ignore\n        nextNodeItem = nextNodeItem.return;\n      }\n    }\n  } while (!eventHandled && nextNodeItem);\n}\n\nfunction receiveUIComponentEvent(nativeEvent) {\n  trace.apply(void 0, componentName.concat(['receiveUIComponentEvent', nativeEvent]));\n\n  if (!nativeEvent || !Array.isArray(nativeEvent) || nativeEvent.length < 2) {\n    return;\n  }\n\n  var _nativeEvent2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_7___default()(nativeEvent, 3),\n      targetNodeId = _nativeEvent2[0],\n      eventName = _nativeEvent2[1],\n      eventParam = _nativeEvent2[2];\n\n  if (typeof targetNodeId !== 'number' || typeof eventName !== 'string') {\n    return;\n  }\n\n  var targetNode = findNodeById(targetNodeId);\n\n  if (!targetNode) {\n    return;\n  }\n\n  if (targetNode.memoizedProps && targetNode.memoizedProps[eventName] && typeof targetNode.memoizedProps[eventName] === 'function') {\n    targetNode.memoizedProps[eventName](eventParam);\n  }\n}\n\nvar EventDispatcher = {\n  registerNativeEventHub,\n  getHippyEventHub,\n  unregisterNativeEventHub,\n  receiveNativeEvent,\n  receiveNativeGesture,\n  receiveUIComponentEvent\n}; // @ts-ignore\n\nif (global.__GLOBAL__) {\n  // @ts-ignore\n  global.__GLOBAL__.jsModuleList.EventDispatcher = EventDispatcher;\n}\n\nvar EventEmitterRevoker = /*#__PURE__*/function () {\n  function EventEmitterRevoker(id, listener) {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, EventEmitterRevoker);\n\n    this.callback = id;\n    this.bindListener = listener;\n  }\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(EventEmitterRevoker, [{\n    key: \"remove\",\n    value: function remove() {\n      if (typeof this.callback !== 'number' || !this.bindListener) {\n        return;\n      }\n\n      this.bindListener.removeCallback(this.callback);\n      this.bindListener = undefined;\n    }\n  }]);\n\n  return EventEmitterRevoker;\n}();\n\nvar HippyEventListener = /*#__PURE__*/function () {\n  function HippyEventListener(event) {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, HippyEventListener);\n\n    this.eventName = event;\n    this.listenerIds = [];\n  }\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(HippyEventListener, [{\n    key: \"addCallback\",\n    value: function addCallback(handleFunc, callContext) {\n      if (typeof handleFunc !== 'function') {\n        throw new TypeError('Invalid arguments');\n      }\n\n      var eventHub = EventDispatcher.registerNativeEventHub(this.eventName);\n\n      if (!eventHub) {\n        throw new ReferenceError(\"No listeners for \".concat(this.eventName));\n      }\n\n      var id = eventHub.addEventHandler(handleFunc, callContext);\n\n      if (typeof id !== 'number') {\n        throw new Error('Fail to addEventHandler');\n      }\n\n      this.listenerIds.push(id);\n      return id;\n    }\n  }, {\n    key: \"removeCallback\",\n    value: function removeCallback(callbackId) {\n      if (typeof callbackId !== 'number') {\n        throw new TypeError('Invalid arguments');\n      }\n\n      var eventHub = EventDispatcher.getHippyEventHub(this.eventName);\n\n      if (!eventHub) {\n        throw new ReferenceError(\"No listeners for \".concat(this.eventName));\n      }\n\n      eventHub.removeEventHandler(callbackId);\n      var size = this.listenerIds.length;\n\n      for (var i = 0; i < size; i += 1) {\n        if (callbackId === this.listenerIds[i]) {\n          this.listenerIds.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"unregister\",\n    value: function unregister() {\n      var size = this.listenerIds.length;\n      var eventHub = EventDispatcher.getHippyEventHub(this.eventName);\n\n      if (!eventHub) {\n        throw new ReferenceError(\"No listeners for \".concat(this.eventName));\n      }\n\n      for (var i = 0; i < size; i += 1) {\n        eventHub.removeEventHandler(this.listenerIds[i]);\n      }\n\n      this.listenerIds = [];\n\n      if (eventHub.getHandlerSize() === 0) {\n        EventDispatcher.unregisterNativeEventHub(this.eventName);\n      }\n    }\n  }, {\n    key: \"getSize\",\n    value: function getSize() {\n      return this.listenerIds.length;\n    }\n  }]);\n\n  return HippyEventListener;\n}();\n\nfunction getNameForEvent(event) {\n  if (typeof event !== 'string') {\n    throw new TypeError('Invalid arguments');\n  }\n\n  return \"eventEmitter_\".concat(event);\n}\n\nvar HippyEventEmitter = /*#__PURE__*/function () {\n  function HippyEventEmitter(sharedListeners) {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, HippyEventEmitter);\n\n    if (sharedListeners && typeof sharedListeners === 'object') {\n      this.hippyEventListeners = sharedListeners;\n    } else {\n      this.hippyEventListeners = {};\n    }\n  }\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(HippyEventEmitter, [{\n    key: \"sharedListeners\",\n    value: function sharedListeners() {\n      return this.hippyEventListeners;\n    }\n  }, {\n    key: \"addListener\",\n    value: function addListener(event, callback, context) {\n      if (typeof event !== 'string' || typeof callback !== 'function') {\n        throw new TypeError('Invalid arguments');\n      }\n\n      var registedListener = this.hippyEventListeners[getNameForEvent(event)];\n\n      if (!registedListener) {\n        registedListener = new HippyEventListener(event);\n        this.hippyEventListeners[getNameForEvent(event)] = registedListener;\n      }\n\n      var listenerId = registedListener.addCallback(callback, context);\n\n      if (typeof listenerId !== 'number') {\n        throw new Error('Fail to addCallback');\n      }\n\n      return new EventEmitterRevoker(listenerId, registedListener);\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(event) {\n      if (typeof event !== 'string') {\n        throw new TypeError('Invalid arguments');\n      }\n\n      var registedListener = this.hippyEventListeners[getNameForEvent(event)];\n\n      if (registedListener) {\n        registedListener.unregister();\n        delete this.hippyEventListeners[getNameForEvent(event)];\n      }\n    }\n    /* eslint-disable-next-line class-methods-use-this */\n\n  }, {\n    key: \"emit\",\n    value: function emit(event, param) {\n      if (typeof event !== 'string') {\n        return false;\n      }\n\n      var eventHub = EventDispatcher.getHippyEventHub(event);\n\n      if (!eventHub) {\n        return false;\n      }\n\n      eventHub.notifyEvent(param);\n      return true;\n    }\n  }, {\n    key: \"listenerSize\",\n    value: function listenerSize(event) {\n      if (typeof event !== 'string') {\n        throw new TypeError('Invalid arguments');\n      }\n\n      var registedListener = this.hippyEventListeners[getNameForEvent(event)];\n\n      if (registedListener) {\n        return registedListener.getSize();\n      }\n\n      return 0;\n    }\n  }]);\n\n  return HippyEventEmitter;\n}();\n\nHippyEventEmitter.emit = HippyEventEmitter.prototype.emit;\n/**\n * The the string contents from clipboard\n */\n\nfunction getString() {\n  return Bridge.callNativeWithPromise('ClipboardModule', 'getString');\n}\n/**\n * Set the string content to clipboard\n *\n * @param {string} text - The string content that will set into clipboard.\n */\n\n\nfunction setString(text) {\n  Bridge.callNative('ClipboardModule', 'setString', text);\n}\n\nvar clipboard = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getString: getString,\n  setString: setString\n});\n/**\n * Get cookies from url\n *\n * @param {string} url - Specific url for cookie\n */\n\nfunction getCookies(url) {\n  return Bridge.callNativeWithPromise('network', 'getCookie', url);\n}\n/**\n * Set cookie to url\n *\n * @param {string} url - Specific url for cookie.\n * @param {string} keyValue - Cookie key and value string, split with `:`.\n * @param {Date|string} [expires] - UTC Date string or Date object for cookie expire.\n */\n\n\nfunction setCookie(url, keyValue, expires) {\n  var expireStr = '';\n\n  if (typeof expires === 'string') {\n    expireStr = expires;\n  }\n\n  if (expires instanceof Date) {\n    expireStr = expires.toUTCString();\n  }\n\n  Bridge.callNative('network', 'setCookie', url, keyValue, expireStr);\n}\n\nvar cookieModule = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getCookies: getCookies,\n  setCookie: setCookie\n});\n/**\n * Get the image size before rendering.\n *\n * @param {string} url - Get image url.\n */\n\nfunction _getSize(url) {\n  return Bridge.callNativeWithPromise('ImageLoaderModule', 'getSize', url);\n}\n/**\n * Prefetch image, to make rendering in next more faster.\n *\n * @param {string} url - Prefetch image url.\n */\n\n\nfunction prefetch(url) {\n  Bridge.callNative('ImageLoaderModule', 'prefetch', url);\n}\n\nvar imageLoaderModule = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getSize: _getSize,\n  prefetch: prefetch\n});\n/* eslint-disable no-use-before-define */\n\nvar DEVICE_CONNECTIVITY_EVENT = 'networkStatusDidChange';\nvar subScriptions = new Map();\nvar NetInfoEventEmitter;\n\nvar NetInfoRevoker = /*#__PURE__*/function () {\n  function NetInfoRevoker(eventName, listener) {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, NetInfoRevoker);\n\n    this.eventName = eventName;\n    this.listener = listener;\n  }\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(NetInfoRevoker, [{\n    key: \"remove\",\n    value: function remove() {\n      if (!this.eventName || !this.listener) {\n        return;\n      }\n\n      removeEventListener$1(this.eventName, this.listener);\n      this.listener = undefined;\n    }\n  }]);\n\n  return NetInfoRevoker;\n}();\n/**\n * Add a network status event listener\n *\n * @param {string} eventName - Event name will listen for NetInfo module,\n *                             use `change` for listen network change.\n * @param {function} listener - Event status event callback\n * @returns {object} NetInfoRevoker - The event revoker for destroy the network info event listener.\n */\n\n\nfunction addEventListener$1(eventName, listener) {\n  NetInfoEventEmitter = new HippyEventEmitter();\n  var event = eventName;\n\n  if (event && event === 'change') {\n    event = DEVICE_CONNECTIVITY_EVENT;\n  }\n\n  var count = NetInfoEventEmitter.listenerSize(event);\n\n  if (count < 1) {\n    Bridge.callNative('NetInfo', 'addListener', event);\n  }\n\n  var handler = NetInfoEventEmitter.addListener(event, function (data) {\n    listener(data);\n  }); // FIXME: Seems only accept one callback for each event, should support multiple callback.\n\n  subScriptions.set(handler, handler);\n  return new NetInfoRevoker(event, listener);\n}\n/**\n * Remove network status event event listener\n *\n * @param {string} eventName - Event name will listen for NetInfo module,\n *                             use `change` for listen network change.\n * @param {Function} [listener] - The specific event listener will remove.\n */\n\n\nfunction removeEventListener$1(eventName, listener) {\n  if (listener instanceof NetInfoRevoker) {\n    listener.remove();\n    return;\n  }\n\n  var event = eventName;\n\n  if (eventName === 'change') {\n    event = DEVICE_CONNECTIVITY_EVENT;\n  }\n\n  var count = NetInfoEventEmitter.listenerSize(event);\n\n  if (count <= 1) {\n    Bridge.callNative('NetInfo', 'removeListener', event);\n  }\n\n  var handler = subScriptions.get(listener);\n\n  if (!handler) {\n    return;\n  }\n\n  handler.remove();\n  subScriptions.delete(listener);\n}\n/**\n * Get the current network status\n */\n\n\nfunction fetch() {\n  return Bridge.callNativeWithPromise('NetInfo', 'getCurrentConnectivity').then(function (resp) {\n    return resp.network_info;\n  });\n}\n\nvar networkInfo = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  addEventListener: addEventListener$1,\n  removeEventListener: removeEventListener$1,\n  fetch: fetch\n});\n/* eslint-disable import/prefer-default-export */\n\nfunction repeatCountDict(repeatCount) {\n  if (repeatCount === 'loop') {\n    return -1;\n  }\n\n  return repeatCount;\n}\n\nvar AnimationEventEmitter = new HippyEventEmitter();\n/**\n * parse value of special value type\n * @param valueType\n * @param originalValue\n */\n\nfunction parseValue(valueType, originalValue) {\n  if (valueType === 'color' && ['number', 'string'].indexOf(typeof originalValue) >= 0) {\n    return colorParse(originalValue);\n  }\n\n  return originalValue;\n}\n/**\n * Better performance of Animation solution.\n *\n * It pushes the animation scheme to native at once.\n */\n\n\nvar Animation = /*#__PURE__*/function () {\n  function Animation(config) {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, Animation);\n\n    var startValue = 0;\n\n    if (config.startValue && config.startValue.constructor && config.startValue.constructor.name === 'Animation') {\n      startValue = {\n        animationId: config.startValue.animationId\n      };\n    } else {\n      var tempStartValue = config.startValue;\n      startValue = parseValue(config.valueType, tempStartValue);\n    }\n\n    var toValue = parseValue(config.valueType, config.toValue);\n    this.mode = config.mode || 'timing';\n    this.delay = config.delay || 0;\n    this.startValue = startValue || 0;\n    this.toValue = toValue || 0;\n    this.valueType = config.valueType || undefined;\n    this.duration = config.duration || 0;\n    this.direction = config.direction || 'center';\n    this.timingFunction = config.timingFunction || 'linear';\n    this.repeatCount = repeatCountDict(config.repeatCount || 0);\n    this.inputRange = config.inputRange || [];\n    this.outputRange = config.outputRange || [];\n    this.animationId = Bridge$1.callNativeWithCallbackId('AnimationModule', 'createAnimation', true, this.mode, Object.assign({\n      delay: this.delay,\n      startValue: this.startValue,\n      toValue: this.toValue,\n      duration: this.duration,\n      direction: this.direction,\n      timingFunction: this.timingFunction,\n      repeatCount: this.repeatCount,\n      inputRange: this.inputRange,\n      outputRange: this.outputRange\n    }, this.valueType ? {\n      valueType: this.valueType\n    } : {}));\n    this.destroy = this.destroy.bind(this); // TODO: Deprecated compatible, will remove soon.\n\n    this.onRNfqbAnimationStart = this.onAnimationStart.bind(this);\n    this.onRNfqbAnimationEnd = this.onAnimationEnd.bind(this);\n    this.onRNfqbAnimationCancel = this.onAnimationCancel.bind(this);\n    this.onRNfqbAnimationRepeat = this.onAnimationRepeat.bind(this);\n    this.onHippyAnimationStart = this.onAnimationStart.bind(this);\n    this.onHippyAnimationEnd = this.onAnimationEnd.bind(this);\n    this.onHippyAnimationCancel = this.onAnimationCancel.bind(this);\n    this.onHippyAnimationRepeat = this.onAnimationRepeat.bind(this);\n  }\n  /**\n   * Remove all of animation event listener\n   */\n\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(Animation, [{\n    key: \"removeEventListener\",\n    value: function removeEventListener() {\n      if (this.animationStartListener) {\n        this.animationStartListener.remove();\n      }\n\n      if (this.animationEndListener) {\n        this.animationEndListener.remove();\n      }\n\n      if (this.animationCancelListener) {\n        this.animationCancelListener.remove();\n      }\n\n      if (this.animationRepeatListener) {\n        this.animationRepeatListener.remove();\n      }\n    }\n    /**\n     * Start animation execution\n     */\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      var _this3 = this;\n\n      this.removeEventListener(); // Set as iOS default\n\n      var animationEventName = 'onAnimation'; // If running in Android, change it.\n      // @ts-ignore\n\n      if (null === 'android' || Device$1.platform.OS === 'android') {\n        animationEventName = 'onHippyAnimation';\n      }\n\n      if (typeof this.onAnimationStartCallback === 'function') {\n        this.animationStartListener = AnimationEventEmitter.addListener(\"\".concat(animationEventName, \"Start\"), function (animationId) {\n          if (animationId === _this3.animationId) {\n            _this3.animationStartListener.remove();\n\n            if (typeof _this3.onAnimationStartCallback === 'function') {\n              _this3.onAnimationStartCallback();\n            }\n          }\n        });\n      }\n\n      if (typeof this.onAnimationEndCallback === 'function') {\n        this.animationEndListener = AnimationEventEmitter.addListener(\"\".concat(animationEventName, \"End\"), function (animationId) {\n          if (animationId === _this3.animationId) {\n            _this3.animationEndListener.remove();\n\n            if (typeof _this3.onAnimationEndCallback === 'function') {\n              _this3.onAnimationEndCallback();\n            }\n          }\n        });\n      }\n\n      if (typeof this.onAnimationCancelCallback === 'function') {\n        this.animationCancelListener = AnimationEventEmitter.addListener(\"\".concat(animationEventName, \"Cancel\"), function (animationId) {\n          if (animationId === _this3.animationId) {\n            _this3.animationCancelListener.remove();\n\n            if (typeof _this3.onAnimationCancelCallback === 'function') {\n              _this3.onAnimationCancelCallback();\n            }\n          }\n        });\n      }\n\n      if (typeof this.onAnimationRepeatCallback === 'function') {\n        this.animationRepeatListener = AnimationEventEmitter.addListener(\"\".concat(animationEventName, \"Repeat\"), function (animationId) {\n          if (animationId === _this3.animationId) {\n            if (typeof _this3.onAnimationRepeatCallback === 'function') {\n              _this3.onAnimationRepeatCallback();\n            }\n          }\n        });\n      }\n\n      Bridge$1.callNative('AnimationModule', 'startAnimation', this.animationId);\n    }\n    /**\n     * Use destroy() to destroy animation.\n     */\n\n  }, {\n    key: \"destory\",\n    value: function destory() {\n      warn('Animation.destory() method will be deprecated soon, please use Animation.destroy() as soon as possible');\n      this.destroy();\n    }\n    /**\n     * Destroy the animation\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.removeEventListener();\n      Bridge$1.callNative('AnimationModule', 'destroyAnimation', this.animationId);\n    }\n    /**\n     * Pause the running animation\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      Bridge$1.callNative('AnimationModule', 'pauseAnimation', this.animationId);\n    }\n    /**\n     * Resume execution of paused animation\n     */\n\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      Bridge$1.callNative('AnimationModule', 'resumeAnimation', this.animationId);\n    }\n    /**\n     * Update to new animation scheme\n     *\n     * @param {Object} newConfig - new animation schema\n     */\n\n  }, {\n    key: \"updateAnimation\",\n    value: function updateAnimation(newConfig) {\n      var _this4 = this;\n\n      if (typeof newConfig !== 'object') {\n        throw new TypeError('Invalid arguments');\n      }\n\n      if (typeof newConfig.mode === 'string' && newConfig.mode !== this.mode) {\n        throw new TypeError('Update animation mode not supported');\n      }\n\n      Object.keys(newConfig).forEach(function (prop) {\n        var value = newConfig[prop];\n\n        if (prop === 'startValue') {\n          var startValue = 0;\n\n          if (newConfig.startValue instanceof Animation) {\n            startValue = {\n              animationId: newConfig.startValue.animationId\n            };\n          } else {\n            var tempStartValue = newConfig.startValue;\n            startValue = parseValue(_this4.valueType, tempStartValue);\n          }\n\n          _this4.startValue = startValue || 0;\n        } else if (prop === 'repeatCount') {\n          _this4.repeatCount = repeatCountDict(newConfig.repeatCount || 0);\n        } else {\n          Object.defineProperty(_this4, prop, {\n            value\n          });\n        }\n      });\n      Bridge$1.callNative('AnimationModule', 'updateAnimation', this.animationId, Object.assign({\n        delay: this.delay,\n        startValue: this.startValue,\n        toValue: parseValue(this.valueType, this.toValue),\n        duration: this.duration,\n        direction: this.direction,\n        timingFunction: this.timingFunction,\n        repeatCount: this.repeatCount,\n        inputRange: this.inputRange,\n        outputRange: this.outputRange\n      }, this.valueType ? {\n        valueType: this.valueType\n      } : {}));\n    }\n    /**\n     * Call when animation started.\n     * @param {Function} cb - callback when animation started.\n     */\n\n  }, {\n    key: \"onAnimationStart\",\n    value: function onAnimationStart(cb) {\n      this.onAnimationStartCallback = cb;\n    }\n    /**\n     * Call when animation is ended.\n     * @param {Function} cb - callback when animation started.\n     */\n\n  }, {\n    key: \"onAnimationEnd\",\n    value: function onAnimationEnd(cb) {\n      this.onAnimationEndCallback = cb;\n    }\n    /**\n     * Call when animation is canceled.\n     * @param {Function} cb - callback when animation started.\n     */\n\n  }, {\n    key: \"onAnimationCancel\",\n    value: function onAnimationCancel(cb) {\n      this.onAnimationCancelCallback = cb;\n    }\n    /**\n     * Call when animation is repeated.\n     * @param {Function} cb - callback when animation started.\n     */\n\n  }, {\n    key: \"onAnimationRepeat\",\n    value: function onAnimationRepeat(cb) {\n      this.onAnimationRepeatCallback = cb;\n    }\n  }]);\n\n  return Animation;\n}();\n\nvar AnimationEventEmitter$1 = new HippyEventEmitter();\n/**\n * Better performance of Animation series solution.\n *\n * It pushes the animation scheme to native at once.\n */\n\nvar AnimationSet = /*#__PURE__*/function () {\n  function AnimationSet(config) {\n    var _this5 = this;\n\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, AnimationSet);\n\n    this.animationList = [];\n    config.children.forEach(function (item) {\n      _this5.animationList.push({\n        animationId: item.animation.animationId,\n        follow: item.follow || false\n      });\n    });\n    this.animationId = Bridge$1.callNativeWithCallbackId('AnimationModule', 'createAnimationSet', true, {\n      repeatCount: repeatCountDict(config.repeatCount || 0),\n      children: this.animationList,\n      virtual: config.virtual\n    }); // TODO: Deprecated compatible, will remove soon.\n\n    this.onRNfqbAnimationStart = this.onAnimationStart.bind(this);\n    this.onRNfqbAnimationEnd = this.onAnimationEnd.bind(this);\n    this.onRNfqbAnimationCancel = this.onAnimationCancel.bind(this);\n    this.onRNfqbAnimationRepeat = this.onAnimationRepeat.bind(this);\n    this.onHippyAnimationStart = this.onAnimationStart.bind(this);\n    this.onHippyAnimationEnd = this.onAnimationEnd.bind(this);\n    this.onHippyAnimationCancel = this.onAnimationCancel.bind(this);\n    this.onHippyAnimationRepeat = this.onAnimationRepeat.bind(this);\n  }\n  /**\n   * Remove all of animation event listener\n   */\n\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(AnimationSet, [{\n    key: \"removeEventListener\",\n    value: function removeEventListener() {\n      if (this.animationStartListener) {\n        this.animationStartListener.remove();\n      }\n\n      if (this.animationEndListener) {\n        this.animationEndListener.remove();\n      }\n\n      if (this.animationCancelListener) {\n        this.animationCancelListener.remove();\n      }\n\n      if (this.animationRepeatListener) {\n        this.animationRepeatListener.remove();\n      }\n    }\n    /**\n     * Start animation execution\n     */\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      var _this6 = this;\n\n      this.removeEventListener(); // Set as iOS default\n\n      var animationEventName = 'onAnimation'; // If running in Android, change it.\n      // @ts-ignore\n\n      if (null === 'android' || Device$1.platform.OS === 'android') {\n        animationEventName = 'onHippyAnimation';\n      }\n\n      if (typeof this.onAnimationStartCallback === 'function') {\n        this.animationStartListener = AnimationEventEmitter$1.addListener(\"\".concat(animationEventName, \"Start\"), function (animationId) {\n          if (animationId === _this6.animationId) {\n            _this6.animationStartListener.remove();\n\n            if (typeof _this6.onAnimationStartCallback === 'function') {\n              _this6.onAnimationStartCallback();\n            }\n          }\n        });\n      }\n\n      if (typeof this.onAnimationEndCallback === 'function') {\n        this.animationEndListener = AnimationEventEmitter$1.addListener(\"\".concat(animationEventName, \"End\"), function (animationId) {\n          if (animationId === _this6.animationId) {\n            _this6.animationEndListener.remove();\n\n            if (typeof _this6.onAnimationEndCallback === 'function') {\n              _this6.onAnimationEndCallback();\n            }\n          }\n        });\n      }\n\n      if (typeof this.onAnimationCancelCallback === 'function') {\n        this.animationCancelListener = AnimationEventEmitter$1.addListener(\"\".concat(animationEventName, \"Cancel\"), function (animationId) {\n          if (animationId === _this6.animationId) {\n            _this6.animationCancelListener.remove();\n\n            if (typeof _this6.onAnimationCancelCallback === 'function') {\n              _this6.onAnimationCancelCallback();\n            }\n          }\n        });\n      }\n\n      if (typeof this.onAnimationRepeatCallback === 'function') {\n        this.animationRepeatListener = AnimationEventEmitter$1.addListener(\"\".concat(animationEventName, \"Repeat\"), function (animationId) {\n          if (animationId === _this6.animationId) {\n            if (typeof _this6.onAnimationRepeatCallback === 'function') {\n              _this6.onAnimationRepeatCallback();\n            }\n          }\n        });\n      }\n\n      Bridge$1.callNative('AnimationModule', 'startAnimation', this.animationId);\n    }\n    /**\n     * Use destroy() to destroy animation.\n     */\n\n  }, {\n    key: \"destory\",\n    value: function destory() {\n      warn('AnimationSet.destory() method will be deprecated soon, please use Animation.destroy() as soon as possible');\n      this.destroy();\n    }\n    /**\n     * Destroy the animation\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.removeEventListener();\n      this.animationList.forEach(function (item) {\n        return Number.isInteger(item.animationId) && Bridge$1.callNative('AnimationModule', 'destroyAnimation', item.animationId);\n      });\n      Bridge$1.callNative('AnimationModule', 'destroyAnimation', this.animationId);\n    }\n    /**\n     * Pause the running animation\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      Bridge$1.callNative('AnimationModule', 'pauseAnimation', this.animationId);\n    }\n    /**\n     * Resume execution of paused animation\n     */\n\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      Bridge$1.callNative('AnimationModule', 'resumeAnimation', this.animationId);\n    }\n    /**\n     * Call when animation started.\n     * @param {Function} cb - callback when animation started.\n     */\n\n  }, {\n    key: \"onAnimationStart\",\n    value: function onAnimationStart(cb) {\n      this.onAnimationStartCallback = cb;\n    }\n    /**\n     * Call when animation is ended.\n     * @param {Function} cb - callback when animation started.\n     */\n\n  }, {\n    key: \"onAnimationEnd\",\n    value: function onAnimationEnd(cb) {\n      this.onAnimationEndCallback = cb;\n    }\n    /**\n     * Call when animation is canceled.\n     * @param {Function} cb - callback when animation started.\n     */\n\n  }, {\n    key: \"onAnimationCancel\",\n    value: function onAnimationCancel(cb) {\n      this.onAnimationCancelCallback = cb;\n    }\n    /**\n     * Call when animation is repeated.\n     * @param {Function} cb - callback when animation started.\n     */\n\n  }, {\n    key: \"onAnimationRepeat\",\n    value: function onAnimationRepeat(cb) {\n      this.onAnimationRepeatCallback = cb;\n    }\n  }]);\n\n  return AnimationSet;\n}();\n/* eslint-disable no-underscore-dangle */\n\n\nvar componentName$1 = ['%c[native]%c', 'color: red', 'color: auto'];\nvar NODE_OPERATION_TYPES = {\n  createNode: Symbol('createNode'),\n  updateNode: Symbol('updateNode'),\n  deleteNode: Symbol('deleteNode')\n};\nvar __batchIdle = true;\nvar __batchNodes = [];\n/**\n * Convert an ordered node array into multiple fragments\n */\n\nfunction chunkNodes(batchNodes) {\n  var result = [];\n\n  for (var i = 0; i < batchNodes.length; i += 1) {\n    var chunk = batchNodes[i];\n    var type = chunk.type,\n        nodes = chunk.nodes;\n    var _chunk = result[result.length - 1];\n\n    if (!_chunk || _chunk.type !== type) {\n      result.push({\n        type,\n        nodes\n      });\n    } else {\n      _chunk.nodes = _chunk.nodes.concat(nodes);\n    }\n  }\n\n  return result;\n}\n\nfunction startBatch() {\n  if (__batchIdle) {\n    startBatch$1();\n  }\n}\n\nfunction endBatch(rootViewId) {\n  if (!__batchIdle) {\n    return;\n  }\n\n  __batchIdle = false;\n  Promise.resolve().then(function () {\n    var chunks = chunkNodes(__batchNodes);\n    chunks.forEach(function (chunk) {\n      switch (chunk.type) {\n        case NODE_OPERATION_TYPES.createNode:\n          trace.apply(void 0, componentName$1.concat(['createNode', chunk.nodes]));\n          createNode(rootViewId, chunk.nodes);\n          break;\n\n        case NODE_OPERATION_TYPES.updateNode:\n          trace.apply(void 0, componentName$1.concat(['updateNode', chunk.nodes])); // FIXME: iOS should be able to update multiple nodes at once.\n          // @ts-ignore\n\n          if (null === 'ios' || Device.platform.OS === 'ios') {\n            chunk.nodes.forEach(function (node) {\n              return updateNode(rootViewId, [node]);\n            });\n          } else {\n            updateNode(rootViewId, chunk.nodes);\n          }\n\n          break;\n\n        case NODE_OPERATION_TYPES.deleteNode:\n          trace.apply(void 0, componentName$1.concat(['deleteNode', chunk.nodes])); // FIXME: iOS should be able to delete mutiple nodes at once.\n          // @ts-ignore\n\n          if (null === 'ios' || Device.platform.OS === 'ios') {\n            chunk.nodes.forEach(function (node) {\n              return deleteNode(rootViewId, [node]);\n            });\n          } else {\n            deleteNode(rootViewId, chunk.nodes);\n          }\n\n          break;\n        // pass\n      }\n    });\n    endBatch$1();\n    __batchNodes = [];\n    __batchIdle = true;\n  });\n}\n/**\n * Translate to native props from attributes and meta\n */\n\n\nfunction getNativeProps(node) {\n  /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\n  var _node$attributes = node.attributes,\n      children = _node$attributes.children,\n      otherProps = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_6___default()(_node$attributes, _excluded);\n\n  return otherProps;\n}\n/**\n * Get target node attributes, use to chrome devTool tag attribute show while debugging\n */\n\n\nfunction getTargetNodeAttributes(targetNode) {\n  try {\n    var targetNodeAttributes = JSON.parse(JSON.stringify(targetNode.attributes));\n\n    var attributes = _objectSpread({\n      id: targetNode.id\n    }, targetNodeAttributes);\n\n    delete attributes.text;\n    delete attributes.value;\n    return attributes;\n  } catch (e) {\n    warn('getTargetNodeAttributes error:', e);\n    return {};\n  }\n}\n/**\n * Render Element to native\n */\n\n\nfunction renderToNative(rootViewId, targetNode) {\n  if (!targetNode.nativeName) {\n    warn('Component need to define the native name', targetNode);\n    return null;\n  }\n\n  if (targetNode.meta.skipAddToDom) {\n    return null;\n  }\n\n  if (!targetNode.meta.component) {\n    throw new Error(\"Specific tag is not supported yet: \".concat(targetNode.tagName));\n  } // Translate to native node\n\n\n  var nativeNode = {\n    id: targetNode.nodeId,\n    pId: targetNode.parentNode && targetNode.parentNode.nodeId || rootViewId,\n    index: targetNode.index,\n    name: targetNode.nativeName,\n    props: _objectSpread(_objectSpread({}, getNativeProps(targetNode)), {}, {\n      style: targetNode.style\n    })\n  }; // Add nativeNode attributes info for debugging\n\n  if (true) {\n    nativeNode.tagName = targetNode.nativeName;\n\n    if (nativeNode.props) {\n      nativeNode.props.attributes = getTargetNodeAttributes(targetNode);\n    }\n  }\n\n  return nativeNode;\n}\n/**\n * Render Element with child to native\n */\n\n\nfunction renderToNativeWithChildren(rootViewId, node) {\n  var nativeLanguages = [];\n  node.traverseChildren(function (targetNode) {\n    var nativeNode = renderToNative(rootViewId, targetNode);\n\n    if (nativeNode) {\n      nativeLanguages.push(nativeNode);\n    }\n  });\n  return nativeLanguages;\n}\n\nfunction isLayout(node) {\n  var container = getRootContainer();\n\n  if (!container) {\n    return false;\n  } // Determine node is a Document instance\n\n\n  return node instanceof container.containerInfo.constructor;\n}\n/* eslint-disable-next-line @typescript-eslint/no-unused-vars */\n\n\nfunction insertChild(parentNode, childNode) {\n  var atIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n\n  if (!parentNode) {\n    return;\n  }\n\n  if (childNode.meta.skipAddToDom) {\n    return;\n  }\n\n  var rootViewId = getRootViewId(); // Render the root node\n\n  if (isLayout(parentNode) && !parentNode.isMounted) {\n    // Start real native work.\n    var translated = renderToNativeWithChildren(rootViewId, childNode);\n    startBatch();\n\n    __batchNodes.push({\n      type: NODE_OPERATION_TYPES.createNode,\n      nodes: translated\n    });\n\n    endBatch(rootViewId);\n    parentNode.traverseChildren(function (node) {\n      if (!node.isMounted) {\n        node.isMounted = true;\n      }\n    }); // Render others child nodes.\n  } else if (parentNode.isMounted && !childNode.isMounted) {\n    var _translated = renderToNativeWithChildren(rootViewId, childNode);\n\n    startBatch();\n\n    __batchNodes.push({\n      type: NODE_OPERATION_TYPES.createNode,\n      nodes: _translated\n    });\n\n    endBatch(rootViewId);\n    childNode.traverseChildren(function (node) {\n      if (!node.isMounted) {\n        node.isMounted = true;\n      }\n    });\n  }\n}\n\nfunction _removeChild(parentNode, childNode) {\n  if (!childNode || childNode.meta.skipAddToDom) {\n    return;\n  }\n\n  childNode.isMounted = false;\n  childNode.traverseChildren(function (targetNode) {\n    if (targetNode.isMounted) {\n      targetNode.isMounted = false;\n    }\n  });\n  var rootViewId = getRootViewId();\n  var deleteNodeIds = [{\n    id: childNode.nodeId,\n    pId: childNode.parentNode ? childNode.parentNode.nodeId : rootViewId,\n    index: childNode.index\n  }];\n  startBatch();\n\n  __batchNodes.push({\n    type: NODE_OPERATION_TYPES.deleteNode,\n    nodes: deleteNodeIds\n  });\n\n  endBatch(rootViewId);\n}\n\nfunction updateChild(parentNode) {\n  if (!parentNode.isMounted) {\n    return;\n  }\n\n  var rootViewId = getRootViewId();\n  var translated = renderToNative(rootViewId, parentNode);\n  startBatch();\n\n  if (translated) {\n    __batchNodes.push({\n      type: NODE_OPERATION_TYPES.updateNode,\n      nodes: [translated]\n    });\n  }\n\n  endBatch(rootViewId);\n}\n\nfunction updateWithChildren(parentNode) {\n  if (!parentNode.isMounted) {\n    return;\n  }\n\n  var rootViewId = getRootViewId();\n  var translated = renderToNativeWithChildren(rootViewId, parentNode);\n  startBatch();\n\n  __batchNodes.push({\n    type: NODE_OPERATION_TYPES.updateNode,\n    nodes: translated\n  });\n\n  endBatch(rootViewId);\n}\n/* eslint-disable no-underscore-dangle */\n\n\nvar currentNodeId = 0;\n\nfunction getNodeId() {\n  currentNodeId += 1; // currentNodeId % 10 === 0 is rootView\n  // It's a limitation of iOS SDK.\n\n  if (currentNodeId % 10 === 0) {\n    currentNodeId += 1;\n  }\n\n  return currentNodeId;\n}\n\nvar ViewNode = /*#__PURE__*/function () {\n  function ViewNode() {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, ViewNode);\n\n    // Component meta information, such as native component will use.\n    this.meta = {\n      component: {}\n    }; // Will change to be true after insert into Native dom.\n\n    this._isMounted = false; // Index number in children, will update at traverseChildren method.\n\n    this.index = 0; // Relation nodes.\n\n    this.childNodes = [];\n    this.parentNode = null;\n    this.prevSibling = null;\n    this.nextSibling = null; // Virtual DOM node id, will used in native to identify.\n\n    this.nodeId = getNodeId();\n  }\n  /* istanbul ignore next */\n\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(ViewNode, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.constructor.name;\n    }\n  }, {\n    key: \"firstChild\",\n    get: function get() {\n      return this.childNodes.length ? this.childNodes[0] : null;\n    }\n  }, {\n    key: \"lastChild\",\n    get: function get() {\n      return this.childNodes.length ? this.childNodes[this.childNodes.length - 1] : null;\n    }\n  }, {\n    key: \"isMounted\",\n    get: function get() {\n      return this._isMounted;\n    },\n    set: function set(isMounted) {\n      // TODO: Maybe need validation, maybe not.\n      this._isMounted = isMounted;\n    }\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(childNode, referenceNode) {\n      if (!childNode) {\n        throw new Error('Can\\'t insert child.');\n      }\n\n      if (!referenceNode) {\n        return this.appendChild(childNode);\n      }\n\n      if (referenceNode.parentNode !== this) {\n        throw new Error('Can\\'t insert child, because the reference node has a different parent.');\n      }\n\n      if (childNode.parentNode && childNode.parentNode !== this) {\n        throw new Error('Can\\'t insert child, because it already has a different parent.');\n      }\n\n      var index = this.childNodes.indexOf(referenceNode);\n      childNode.parentNode = this;\n      childNode.nextSibling = referenceNode;\n      childNode.prevSibling = this.childNodes[index - 1];\n      referenceNode.prevSibling = childNode;\n      this.childNodes.splice(index, 0, childNode);\n      return insertChild(this, childNode, index);\n    }\n  }, {\n    key: \"moveChild\",\n    value: function moveChild(childNode, referenceNode) {\n      if (!childNode) {\n        throw new Error('Can\\'t mvoe child.');\n      }\n\n      if (!referenceNode) {\n        return this.appendChild(childNode);\n      }\n\n      if (referenceNode.parentNode !== this) {\n        throw new Error('Can\\'t move child, because the reference node has a different parent.');\n      }\n\n      if (childNode.parentNode && childNode.parentNode !== this) {\n        throw new Error('Can\\'t move child, because it already has a different parent.');\n      }\n\n      var oldIndex = this.childNodes.indexOf(childNode);\n      var newIndex = this.childNodes.indexOf(referenceNode); // return if the moved index is the same as the previous one\n\n      if (newIndex === oldIndex) {\n        return childNode;\n      } // set new siblings relations\n\n\n      childNode.nextSibling = referenceNode;\n      childNode.prevSibling = referenceNode.prevSibling;\n      referenceNode.prevSibling = childNode;\n\n      if (this.childNodes[newIndex - 1]) {\n        this.childNodes[newIndex - 1].nextSibling = childNode;\n      }\n\n      if (this.childNodes[newIndex + 1]) {\n        this.childNodes[newIndex + 1].prevSibling = childNode;\n      }\n\n      if (this.childNodes[oldIndex - 1]) {\n        this.childNodes[oldIndex - 1].nextSibling = this.childNodes[oldIndex + 1];\n      }\n\n      if (this.childNodes[oldIndex + 1]) {\n        this.childNodes[oldIndex + 1].prevSibling = this.childNodes[oldIndex - 1];\n      } // remove old child node from native\n\n\n      _removeChild(this, childNode); // remove old child and insert new child, which is like moving child\n\n\n      this.childNodes.splice(newIndex, 0, childNode);\n      this.childNodes.splice(oldIndex + (newIndex < oldIndex ? 1 : 0), 1); // should filter empty nodes before finding the index of node\n\n      var atIndex = this.childNodes.filter(function (ch) {\n        return ch.index > -1;\n      }).indexOf(childNode);\n      return insertChild(this, childNode, atIndex);\n    }\n  }, {\n    key: \"appendChild\",\n    value: function appendChild(childNode) {\n      if (!childNode) {\n        throw new Error('Can\\'t append child.');\n      }\n\n      if (childNode.parentNode && childNode.parentNode !== this) {\n        throw new Error('Can\\'t append child, because it already has a different parent.');\n      }\n\n      childNode.parentNode = this;\n\n      if (this.lastChild) {\n        childNode.prevSibling = this.lastChild;\n        this.lastChild.nextSibling = childNode;\n      }\n\n      this.childNodes.push(childNode);\n      insertChild(this, childNode, this.childNodes.length - 1);\n    }\n  }, {\n    key: \"removeChild\",\n    value: function removeChild(childNode) {\n      if (!childNode) {\n        throw new Error('Can\\'t remove child.');\n      }\n\n      if (!childNode.parentNode) {\n        throw new Error('Can\\'t remove child, because it has no parent.');\n      }\n\n      if (childNode.parentNode !== this) {\n        throw new Error('Can\\'t remove child, because it has a different parent.');\n      }\n\n      if (childNode.meta.skipAddToDom) {\n        return;\n      }\n\n      _removeChild(this, childNode); // FIXME: parentNode should be null when removeChild, But it breaks add the node again.\n      //        Issue position: https://github.com/vuejs/vue/tree/master/src/core/vdom/patch.js#L250\n      // childNode.parentNode = null;\n\n\n      if (childNode.prevSibling) {\n        childNode.prevSibling.nextSibling = childNode.nextSibling;\n        childNode.prevSibling = null;\n      }\n\n      if (childNode.nextSibling) {\n        childNode.nextSibling.prevSibling = childNode.prevSibling;\n        childNode.nextSibling = null;\n      }\n\n      this.childNodes = this.childNodes.filter(function (node) {\n        return node !== childNode;\n      });\n    }\n    /**\n     * Find a specific target with condition\n     */\n\n  }, {\n    key: \"findChild\",\n    value: function findChild(condition) {\n      var yes = condition(this);\n\n      if (yes) {\n        return this;\n      }\n\n      if (this.childNodes.length) {\n        for (var i = 0; i < this.childNodes.length; i += 1) {\n          var childNode = this.childNodes[i];\n          var targetChild = this.findChild.call(childNode, condition);\n\n          if (targetChild) {\n            return targetChild;\n          }\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Traverse the children and execute callback\n     */\n\n  }, {\n    key: \"traverseChildren\",\n    value: function traverseChildren(callback) {\n      var _this7 = this;\n\n      // Find the index and apply callback\n      var index;\n\n      if (this.parentNode) {\n        index = this.parentNode.childNodes.filter(function (node) {\n          return !node.meta.skipAddToDom;\n        }).indexOf(this);\n      } else {\n        index = 0;\n      }\n\n      this.index = index;\n      callback(this); // Find the children\n\n      if (this.childNodes.length) {\n        this.childNodes.forEach(function (childNode) {\n          _this7.traverseChildren.call(childNode, callback);\n        });\n      }\n    }\n  }]);\n\n  return ViewNode;\n}();\n/* eslint-disable no-underscore-dangle */\n\n\nvar PROPERTIES_MAP = {\n  textDecoration: 'textDecorationLine',\n  boxShadowOffset: 'shadowOffset',\n  boxShadowOffsetX: 'shadowOffsetX',\n  boxShadowOffsetY: 'shadowOffsetY',\n  boxShadowOpacity: 'shadowOpacity',\n  boxShadowRadius: 'shadowRadius',\n  boxShadowSpread: 'shadowSpread',\n  boxShadowColor: 'shadowColor'\n}; // linear-gradient direction description map\n\nvar LINEAR_GRADIENT_DIRECTION_MAP = {\n  totop: '0',\n  totopright: 'totopright',\n  toright: '90',\n  tobottomright: 'tobottomright',\n  tobottom: '180',\n  tobottomleft: 'tobottomleft',\n  toleft: '270',\n  totopleft: 'totopleft'\n};\nvar DEGREE_UNIT = {\n  TURN: 'turn',\n  RAD: 'rad',\n  DEG: 'deg'\n};\n/**\n * convert string value to string degree\n * @param {string} value\n * @param {string} unit\n */\n\nfunction convertToDegree(value) {\n  var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEGREE_UNIT.DEG;\n  var convertedNumValue = parseFloat(value);\n  var result = value || '';\n\n  var _value$split = value.split('.'),\n      _value$split2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_7___default()(_value$split, 2),\n      decimals = _value$split2[1];\n\n  if (decimals && decimals.length > 2) {\n    result = convertedNumValue.toFixed(2);\n  }\n\n  switch (unit) {\n    // turn unit\n    case DEGREE_UNIT.TURN:\n      result = \"\".concat((convertedNumValue * 360).toFixed(2));\n      break;\n    // radius unit\n\n    case DEGREE_UNIT.RAD:\n      result = \"\".concat((180 / Math.PI * convertedNumValue).toFixed(2));\n      break;\n  }\n\n  return result;\n}\n/**\n * parse gradient angle or direction\n * @param {string} value\n */\n\n\nfunction getLinearGradientAngle(value) {\n  var processedValue = (value || '').replace(/\\s*/g, '').toLowerCase();\n  var reg = /^([+-]?\\d+\\.?\\d*)+(deg|turn|rad)|(to\\w+)$/g;\n  var valueList = reg.exec(processedValue);\n  if (!Array.isArray(valueList)) return; // default direction is to bottom, i.e. 180degree\n\n  var angle = '180';\n\n  var _valueList = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_7___default()(valueList, 3),\n      direction = _valueList[0],\n      angleValue = _valueList[1],\n      angleUnit = _valueList[2];\n\n  if (angleValue && angleUnit) {\n    // angle value\n    angle = convertToDegree(angleValue, angleUnit);\n  } else if (direction && typeof LINEAR_GRADIENT_DIRECTION_MAP[direction] !== 'undefined') {\n    // direction description\n    angle = LINEAR_GRADIENT_DIRECTION_MAP[direction];\n  } else {\n    warn('linear-gradient direction or angle is invalid, default value [to bottom] would be used');\n  }\n\n  return angle;\n}\n/**\n * parse gradient color stop\n * @param {string} value\n */\n\n\nfunction getLinearGradientColorStop(value) {\n  var processedValue = (value || '').replace(/\\s+/g, ' ').trim();\n\n  var _processedValue$split = processedValue.split(/\\s+(?![^(]*?\\))/),\n      _processedValue$split2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_7___default()(_processedValue$split, 2),\n      color = _processedValue$split2[0],\n      percentage = _processedValue$split2[1];\n\n  var percentageCheckReg = /^([+-]?\\d+\\.?\\d*)%$/g;\n\n  if (color && !percentageCheckReg.exec(color) && !percentage) {\n    return {\n      color: colorParse(color)\n    };\n  }\n\n  if (color && percentageCheckReg.exec(percentage)) {\n    return {\n      // color stop ratio\n      ratio: parseFloat(percentage.split('%')[0]) / 100,\n      color: colorParse(color)\n    };\n  }\n\n  warn('linear-gradient color stop is invalid');\n}\n/**\n * parse backgroundImage\n * @param {string} styleKey\n * @param {string} styleValue\n * @param style\n */\n\n\nfunction parseBackgroundImage(styleKey, styleValue, style) {\n  // handle linear-gradient style\n  if (styleValue.indexOf('linear-gradient') === 0) {\n    var valueString = styleValue.substring(styleValue.indexOf('(') + 1, styleValue.lastIndexOf(')'));\n    var tokens = valueString.split(/,(?![^(]*?\\))/);\n    var colorStopList = [];\n    style.linearGradient = style.linearGradient || {};\n    tokens.forEach(function (value, index) {\n      if (index === 0) {\n        // the angle of linear-gradient parameter can be optional\n        var angle = getLinearGradientAngle(value);\n\n        if (angle) {\n          style.linearGradient.angle = angle;\n        } else {\n          // if angle ignored, default direction is to bottom, i.e. 180degree\n          style.linearGradient.angle = '180';\n          var colorObject = getLinearGradientColorStop(value);\n          if (colorObject) colorStopList.push(colorObject);\n        }\n      } else {\n        var _colorObject = getLinearGradientColorStop(value);\n\n        if (_colorObject) colorStopList.push(_colorObject);\n      }\n    });\n    style.linearGradient.colorStopList = colorStopList;\n  } else {\n    style[styleKey] = convertImgUrl(styleValue);\n  }\n\n  return style;\n}\n\nvar ElementNode = /*#__PURE__*/function (_ViewNode) {\n  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(ElementNode, _ViewNode);\n\n  var _super = _createSuper(ElementNode);\n\n  function ElementNode(tagName) {\n    var _this8;\n\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, ElementNode);\n\n    _this8 = _super.call(this);\n    _this8.id = '';\n    _this8.style = {};\n    _this8.attributes = {}; // Tag name\n\n    _this8.tagName = tagName;\n    return _this8;\n  }\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(ElementNode, [{\n    key: \"nativeName\",\n    get: function get() {\n      return this.meta.component.name;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.tagName, \":(\").concat(this.nativeName, \")\");\n    }\n  }, {\n    key: \"hasAttribute\",\n    value: function hasAttribute(key) {\n      return !!this.attributes[key];\n    }\n  }, {\n    key: \"getAttribute\",\n    value: function getAttribute(key) {\n      return this.attributes[key];\n    }\n  }, {\n    key: \"setStyleAttribute\",\n    value: function setStyleAttribute(value) {\n      var _this9 = this;\n\n      // Clean old styles\n      this.style = {};\n      var styleArray = value; // Convert style to array if it's a array like object\n      // Forward compatibility workaround.\n\n      if (!Array.isArray(styleArray) && Object.hasOwnProperty.call(styleArray, 0)) {\n        var tempStyle = [];\n        var tempObjStyle = {};\n        Object.keys(styleArray).forEach(function (styleKey) {\n          // Workaround for the array and object mixed style.\n          if (isNumber(styleKey)) {\n            tempStyle.push(styleArray[styleKey]);\n          } else {\n            tempObjStyle[styleKey] = styleArray[styleKey];\n          }\n        });\n        styleArray = [].concat(tempStyle, [tempObjStyle]);\n      } // Convert style to array if style is a standalone object\n\n\n      if (!Array.isArray(styleArray)) {\n        styleArray = [styleArray];\n      } // Merge the styles if style is array\n\n\n      var mergedStyles = {};\n      styleArray.forEach(function (style) {\n        if (Array.isArray(style)) {\n          style.forEach(function (subStyle) {\n            mergedStyles = _objectSpread(_objectSpread({}, mergedStyles), subStyle);\n          });\n        } else if (typeof style === 'object' && style) {\n          // TODO: Merge transform\n          mergedStyles = _objectSpread(_objectSpread({}, mergedStyles), style);\n        }\n      }); // Apply the styles\n\n      Object.keys(mergedStyles).forEach(function (styleKey) {\n        var styleValue = mergedStyles[styleKey]; // Convert the property to W3C standard.\n\n        if (Object.prototype.hasOwnProperty.call(PROPERTIES_MAP, styleKey)) {\n          styleKey = PROPERTIES_MAP[styleKey];\n        }\n\n        if (styleKey === 'transform') {\n          var transforms = {};\n\n          if (!Array.isArray(styleValue)) {\n            throw new TypeError('transform only support array args');\n          } // Merge the transform styles\n\n\n          styleValue.forEach(function (transformSet) {\n            Object.keys(transformSet).forEach(function (transform) {\n              var transformValue = transformSet[transform];\n\n              if (transformValue instanceof Animation || transformValue instanceof AnimationSet) {\n                transforms[transform] = {\n                  animationId: transformValue.animationId\n                };\n              } else if (transformValue === null) {\n                if (transforms[transform]) {\n                  delete transforms[transform];\n                }\n              } else if (transformValue !== undefined) {\n                transforms[transform] = transformValue;\n              }\n            });\n          }); // Save the transform styles.\n\n          var transformsKeys = Object.keys(transforms);\n\n          if (transformsKeys.length) {\n            if (!Array.isArray(_this9.style.transform)) {\n              _this9.style.transform = [];\n            }\n\n            transformsKeys.forEach(function (transform) {\n              return _this9.style.transform.push({\n                [transform]: transforms[transform]\n              });\n            });\n          }\n        } else if (styleValue === null && _this9.style[styleKey] !== undefined) {\n          _this9.style[styleKey] = undefined; // Convert to animationId if value is instanceOf Animation/AnimationSet\n        } else if (styleValue instanceof Animation || styleValue instanceof AnimationSet) {\n          _this9.style[styleKey] = {\n            animationId: styleValue.animationId\n          }; // Translate color\n        } else if (styleKey.toLowerCase().indexOf('colors') > -1) {\n          _this9.style[styleKey] = colorArrayParse(styleValue);\n        } else if (styleKey.toLowerCase().indexOf('color') > -1) {\n          _this9.style[styleKey] = colorParse(styleValue);\n        } else if (styleKey === 'backgroundImage' && styleValue) {\n          _this9.style = parseBackgroundImage(styleKey, styleValue, _this9.style);\n        } else {\n          _this9.style[styleKey] = styleValue;\n        }\n      });\n    }\n    /* istanbul ignore next */\n\n  }, {\n    key: \"setAttribute\",\n    value: function setAttribute(key, value) {\n      var _this10 = this;\n\n      try {\n        // detect expandable attrs for boolean values\n        // See https://vuejs.org/v2/guide/components-props.html#Passing-a-Boolean\n        if (typeof this.attributes[key] === 'boolean' && value === '') {\n          value = true;\n        }\n\n        if (key === undefined) {\n          updateChild(this);\n          return;\n        }\n\n        var caseList = [{\n          match: function match() {\n            return ['id'].indexOf(key) >= 0;\n          },\n          action: function action() {\n            if (value === _this10.id) {\n              return true;\n            }\n\n            _this10.id = value; // update current node and child nodes\n\n            updateWithChildren(_this10);\n            return true;\n          }\n        }, {\n          match: function match() {\n            return ['value', 'defaultValue', 'placeholder'].indexOf(key) >= 0;\n          },\n          action: function action() {\n            _this10.attributes[key] = unicodeToChar(value);\n            return false;\n          }\n        }, {\n          match: function match() {\n            return ['text'].indexOf(key) >= 0;\n          },\n          action: function action() {\n            _this10.attributes[key] = value;\n            return false;\n          }\n        }, {\n          match: function match() {\n            return ['numberOfRows'].indexOf(key) >= 0;\n          },\n          action: function action() {\n            _this10.attributes[key] = value;\n            return Device$1.platform.OS !== 'ios';\n          }\n        }, {\n          match: function match() {\n            return ['onPress'].indexOf(key) >= 0;\n          },\n          action: function action() {\n            _this10.attributes.onClick = true;\n            return false;\n          }\n        }, {\n          match: function match() {\n            return ['style'].indexOf(key) >= 0;\n          },\n          action: function action() {\n            if (typeof value !== 'object' || value === undefined || value === null) {\n              return true;\n            }\n\n            _this10.setStyleAttribute(value);\n\n            return false;\n          }\n        }, {\n          match: function match() {\n            return true;\n          },\n          action: function action() {\n            if (typeof value === 'function') {\n              _this10.attributes[key] = true;\n            } else {\n              _this10.attributes[key] = value;\n            }\n\n            return false;\n          }\n        }];\n        var isNeedReturn = false;\n        caseList.some(function (conditionObj) {\n          if (conditionObj.match()) {\n            isNeedReturn = conditionObj.action();\n            return true;\n          }\n\n          return false;\n        });\n        if (isNeedReturn) return; // Set useAnimation if animation exist in style\n\n        var useAnimation = false;\n        Object.keys(this.style).some(function (declare) {\n          var style = _this10.style[declare];\n\n          if (style && Array.isArray(style) && declare === 'transform') {\n            for (var i = 0; i < style.length; i += 1) {\n              var transform = style[i];\n              /* eslint-disable-next-line no-restricted-syntax, guard-for-in */\n\n              for (var transformKey in transform) {\n                var transformValue = transform[transformKey];\n\n                if (typeof transformValue === 'object' && transformValue !== null && Number.isInteger(transformValue.animationId)) {\n                  useAnimation = true;\n                  return transformValue;\n                }\n              }\n            }\n          }\n\n          if (typeof style === 'object' && style !== null && Number.isInteger(style.animationId)) {\n            useAnimation = true;\n            return style;\n          }\n\n          return false;\n        });\n\n        if (useAnimation) {\n          this.attributes.useAnimation = true;\n        } else if (typeof this.attributes.useAnimation === 'boolean') {\n          this.attributes.useAnimation = undefined;\n        }\n\n        updateChild(this);\n      } catch (e) {// ignore\n      }\n    }\n  }, {\n    key: \"removeAttribute\",\n    value: function removeAttribute(key) {\n      delete this.attributes[key];\n    }\n    /* istanbul ignore next */\n\n  }, {\n    key: \"setStyle\",\n    value: function setStyle(property, value) {\n      var isBatchUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (value === null) {\n        delete this.style[property];\n        return;\n      }\n\n      var v = value;\n      var p = property; // Convert the property to W3C standard.\n\n      if (Object.prototype.hasOwnProperty.call(PROPERTIES_MAP, property)) {\n        p = PROPERTIES_MAP[property];\n      }\n\n      if (typeof v === 'string') {\n        v = value.trim();\n\n        if (p.toLowerCase().indexOf('colors') > -1) {\n          v = colorArrayParse(v);\n        } else if (p.toLowerCase().indexOf('color') > -1) {\n          v = colorParse(v);\n        } else {\n          v = tryConvertNumber(v);\n        }\n      }\n\n      if (v === undefined || v === null || this.style[p] === v) {\n        return;\n      }\n\n      this.style[p] = v;\n\n      if (!isBatchUpdate) {\n        updateChild(this);\n      }\n    }\n    /**\n     * set native style props\n     */\n\n  }, {\n    key: \"setNativeProps\",\n    value: function setNativeProps(nativeProps) {\n      var _this11 = this;\n\n      if (nativeProps) {\n        var style = nativeProps.style;\n\n        if (style) {\n          var styleProps = style;\n          Object.keys(styleProps).forEach(function (key) {\n            _this11.setStyle(key, styleProps[key], true);\n          });\n          updateChild(this);\n        }\n      }\n    }\n  }, {\n    key: \"setText\",\n    value: function setText(text) {\n      if (typeof text !== 'string') {\n        try {\n          text = text.toString();\n        } catch (err) {\n          throw new Error('Only string type is acceptable for setText');\n        }\n      }\n\n      text = text.trim();\n\n      if (!text && !this.getAttribute('text')) {\n        return null;\n      }\n\n      text = unicodeToChar(text);\n      text = text.replace(/&nbsp;/g, ' ').replace(/\\xc2/g, ' '); // FIXME: \\xc2 is a template compiler error.\n      // Hacking for textarea, use value props to instance text props\n\n      if (this.tagName === 'textarea') {\n        return this.setAttribute('value', text);\n      }\n\n      return this.setAttribute('text', text);\n    }\n  }]);\n\n  return ElementNode;\n}(ViewNode);\n\nvar createNode = UIManager.createNode,\n    updateNode = UIManager.updateNode,\n    deleteNode = UIManager.deleteNode,\n    flushBatch = UIManager.flushBatch,\n    startBatch$1 = UIManager.startBatch,\n    endBatch$1 = UIManager.endBatch,\n    sendRenderError = UIManager.sendRenderError;\nvar getNodeById = findNodeById;\n/**\n * Get the nodeId from FiberNode ref.\n *\n * @param {Fiber} ref - ref instance.\n */\n\nfunction getElementFromFiberRef(ref) {\n  if (ref instanceof ElementNode) {\n    return ref;\n  } // FIXME: should not use the private _reactInternalFiber\n\n\n  var internalFiber = ref._reactInternalFiber;\n\n  if (internalFiber && internalFiber.child) {\n    var targetNode = internalFiber.child;\n\n    while (targetNode && !(targetNode.stateNode instanceof ElementNode)) {\n      targetNode = targetNode.child;\n    }\n\n    if (!targetNode || !targetNode.stateNode) {\n      return null;\n    }\n\n    return targetNode.stateNode;\n  }\n\n  return null;\n}\n/**\n * Get the nodeId number by ref\n * Most use in the module access components.\n *\n * @param {string | Fiber | Fiber} ref - ref instance, reference to the class is recommend\n */\n\n\nfunction getNodeIdByRef(ref) {\n  // typeof ref === 'string'\n  var tempRef = ref;\n\n  if (typeof ref === 'string') {\n    warn(\"getNodeIdByRef('\".concat(ref, \"') use string ref will affect to performance, recommend use reference to the ref instead\"));\n    var targetElement = findNodeByCondition(function (node) {\n      /* eslint-disable-next-line no-underscore-dangle */\n      if (!node.return || !node.return.ref || !node.return.ref._stringRef) {\n        return false;\n      }\n      /* eslint-disable-next-line no-underscore-dangle */\n\n\n      return node.return.ref._stringRef === ref;\n    });\n\n    if (!targetElement || !targetElement.stateNode) {\n      return 0;\n    }\n\n    tempRef = targetElement.stateNode;\n  } // typeof fiberRef === 'Fiber'\n\n\n  if (!tempRef.nodeId) {\n    var _targetElement = getElementFromFiberRef(tempRef);\n\n    if (!_targetElement) {\n      return 0;\n    }\n\n    return _targetElement.nodeId;\n  } // typeof ref === 'Element'\n\n\n  return tempRef.nodeId;\n}\n/**\n * Component access UI functions\n *\n * @param {ViewNode} ref - Element ref that have nodeId.\n * @param {string} funcName - function name.\n * @param {Array} options - function options.\n */\n\n\nfunction callUIFunction(ref, funcName) {\n  var componentName = ref.nativeName,\n      nodeId = ref.nodeId;\n\n  if (!nodeId || !componentName) {\n    var targetElement = getElementFromFiberRef(ref);\n\n    if (targetElement) {\n      nodeId = targetElement.nodeId;\n      componentName = targetElement.nativeName;\n    }\n  }\n\n  if (!componentName) {\n    throw new Error('callUIFunction is calling a unnamed component');\n  }\n\n  if (!nodeId) {\n    throw new Error('callUIFunction is calling a component have no nodeId');\n  }\n\n  for (var _len = arguments.length, options = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    options[_key - 2] = arguments[_key];\n  }\n\n  var _options$ = options[0],\n      paramList = _options$ === void 0 ? [] : _options$,\n      callback = options[1];\n\n  if (isFunction(paramList)) {\n    callback = paramList;\n    paramList = [];\n  }\n\n  var rootViewId = getRootViewId();\n\n  if (rootViewId === null) {\n    return;\n  }\n\n  if (Device.platform.OS === 'ios') {\n    if (isFunction(callback) && Array.isArray(paramList)) {\n      paramList.push(callback);\n    }\n\n    Bridge.callNative('UIManagerModule', 'callUIFunction', [componentName, nodeId, funcName, paramList]);\n  } else if (Device.platform.OS === 'android') {\n    if (isFunction(callback)) {\n      Bridge.callNative('UIManagerModule', 'callUIFunction', [nodeId, funcName, paramList], callback);\n    } else {\n      Bridge.callNative('UIManagerModule', 'callUIFunction', [nodeId, funcName, paramList]);\n    }\n  }\n}\n/**\n * Get the ref position and size in the visible window.\n * > For the position and size in the layout, use onLayout event.\n *\n * @param {string} method\n * @param {Fiber | Element} ref - ref that need to measure.\n * @param {function} callback\n */\n\n\nfunction measureInWindowByMethod(method, ref, callback) {\n  var nodeId = getNodeIdByRef(ref);\n  return new Promise(function (resolve, reject) {\n    if (!nodeId) {\n      if (callback && isFunction(callback)) {\n        // Forward compatibility for old callback\n        callback('this view is null');\n      }\n\n      return reject(new Error(\"\".concat(method, \" cannot get nodeId\")));\n    }\n\n    return Bridge.callNative('UIManagerModule', method, nodeId, function (layout) {\n      if (callback && isFunction(callback)) {\n        callback(layout);\n      }\n\n      if (layout === 'this view is null') {\n        return reject(new Error('Android cannot get the node'));\n      }\n\n      return resolve(layout);\n    });\n  });\n}\n/**\n * Get the ref position and size in the visible window.\n * > For the position and size in the layout, use onLayout event.\n * P.S. iOS can only obtains the layout of rootView container,\n * so measureInAppWindow method is recommended\n *\n * @deprecated\n * @param {Fiber | Element} ref - ref that need to measure.\n * @param {Function} callback\n */\n\n\nfunction measureInWindow(ref, callback) {\n  return measureInWindowByMethod('measureInWindow', ref, callback);\n}\n/**\n * Get the ref position and size in the App visible window.\n * > For the position and size in the layout, use onLayout event.\n *\n * @param {Fiber | Element} ref - ref that need to measure.\n * @param {Function} callback\n */\n\n\nfunction measureInAppWindow(ref, callback) {\n  if (Device.platform.OS === 'android') {\n    return measureInWindowByMethod('measureInWindow', ref, callback);\n  }\n\n  return measureInWindowByMethod('measureInAppWindow', ref, callback);\n}\n\nvar uiManagerModule = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createNode: createNode,\n  updateNode: updateNode,\n  deleteNode: deleteNode,\n  flushBatch: flushBatch,\n  startBatch: startBatch$1,\n  endBatch: endBatch$1,\n  sendRenderError: sendRenderError,\n  getNodeById: getNodeById,\n  getNodeIdByRef: getNodeIdByRef,\n  getElementFromFiberRef: getElementFromFiberRef,\n  callUIFunction: callUIFunction,\n  measureInWindow: measureInWindow,\n  measureInAppWindow: measureInAppWindow\n});\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\nvar hippyEventEmitter = new HippyEventEmitter();\nvar backPressSubscriptions = new Set();\n/**\n * Android hardware back button event listener.\n */\n\nvar realBackAndroid = {\n  exitApp() {\n    Bridge.callNative('DeviceEventModule', 'invokeDefaultBackPressHandler');\n  },\n\n  addListener(handler) {\n    Bridge.callNative('DeviceEventModule', 'setListenBackPress', true);\n    backPressSubscriptions.add(handler);\n    return {\n      remove() {\n        realBackAndroid.removeListener(handler);\n      }\n\n    };\n  },\n\n  removeListener(handler) {\n    backPressSubscriptions.delete(handler);\n\n    if (backPressSubscriptions.size === 0) {\n      Bridge.callNative('DeviceEventModule', 'setListenBackPress', false);\n    }\n  },\n\n  initEventListener() {\n    hippyEventEmitter.addListener('hardwareBackPress', function () {\n      var invokeDefault = true;\n\n      var subscriptions = _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(backPressSubscriptions).reverse();\n\n      subscriptions.every(function (subscription) {\n        if (typeof subscription === 'function' && subscription()) {\n          invokeDefault = false;\n          return false;\n        }\n\n        return true;\n      });\n\n      if (invokeDefault) {\n        realBackAndroid.exitApp();\n      }\n    });\n  }\n\n};\n/**\n * Fake BackAndroid for iOS\n */\n\nvar fakeBackAndroid = {\n  exitApp() {},\n\n  addListener(handler) {\n    return {\n      remove() {}\n\n    };\n  },\n\n  removeListener(handler) {},\n\n  initEventListener() {}\n\n};\n\nvar BackAndroid = function () {\n  // @ts-ignore\n  if (null === 'android' || Device.platform.OS === 'android') {\n    realBackAndroid.initEventListener();\n    return realBackAndroid;\n  }\n\n  return fakeBackAndroid;\n}();\n\nvar addEventListener$2 = HippyGlobal.addEventListener,\n    removeEventListener$2 = HippyGlobal.removeEventListener,\n    dispatchEvent$1 = HippyGlobal.dispatchEvent,\n    AsyncStorage$1 = HippyGlobal.AsyncStorage,\n    Bridge$1 = HippyGlobal.Bridge,\n    Device$1 = HippyGlobal.Device,\n    HippyRegister$1 = HippyGlobal.HippyRegister;\nvar Native = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  addEventListener: addEventListener$2,\n  removeEventListener: removeEventListener$2,\n  dispatchEvent: dispatchEvent$1,\n  AsyncStorage: AsyncStorage$1,\n  BackAndroid: BackAndroid,\n  Bridge: Bridge$1,\n  Clipboard: clipboard,\n  Cookie: cookieModule,\n  Device: Device$1,\n  HippyRegister: HippyRegister$1,\n  ImageLoader: imageLoaderModule,\n  NetworkInfo: networkInfo,\n  UIManager: uiManagerModule\n});\n\nfunction call() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return \"\\\\(\\\\s*(\".concat(args.join(')\\\\s*,\\\\s*('), \")\\\\s*\\\\)\");\n}\n\nvar colors = {\n  transparent: 0x00000000,\n  aliceblue: 0xf0f8ffff,\n  antiquewhite: 0xfaebd7ff,\n  aqua: 0x00ffffff,\n  aquamarine: 0x7fffd4ff,\n  azure: 0xf0ffffff,\n  beige: 0xf5f5dcff,\n  bisque: 0xffe4c4ff,\n  black: 0x000000ff,\n  blanchedalmond: 0xffebcdff,\n  blue: 0x0000ffff,\n  blueviolet: 0x8a2be2ff,\n  brown: 0xa52a2aff,\n  burlywood: 0xdeb887ff,\n  burntsienna: 0xea7e5dff,\n  cadetblue: 0x5f9ea0ff,\n  chartreuse: 0x7fff00ff,\n  chocolate: 0xd2691eff,\n  coral: 0xff7f50ff,\n  cornflowerblue: 0x6495edff,\n  cornsilk: 0xfff8dcff,\n  crimson: 0xdc143cff,\n  cyan: 0x00ffffff,\n  darkblue: 0x00008bff,\n  darkcyan: 0x008b8bff,\n  darkgoldenrod: 0xb8860bff,\n  darkgray: 0xa9a9a9ff,\n  darkgreen: 0x006400ff,\n  darkgrey: 0xa9a9a9ff,\n  darkkhaki: 0xbdb76bff,\n  darkmagenta: 0x8b008bff,\n  darkolivegreen: 0x556b2fff,\n  darkorange: 0xff8c00ff,\n  darkorchid: 0x9932ccff,\n  darkred: 0x8b0000ff,\n  darksalmon: 0xe9967aff,\n  darkseagreen: 0x8fbc8fff,\n  darkslateblue: 0x483d8bff,\n  darkslategray: 0x2f4f4fff,\n  darkslategrey: 0x2f4f4fff,\n  darkturquoise: 0x00ced1ff,\n  darkviolet: 0x9400d3ff,\n  deeppink: 0xff1493ff,\n  deepskyblue: 0x00bfffff,\n  dimgray: 0x696969ff,\n  dimgrey: 0x696969ff,\n  dodgerblue: 0x1e90ffff,\n  firebrick: 0xb22222ff,\n  floralwhite: 0xfffaf0ff,\n  forestgreen: 0x228b22ff,\n  fuchsia: 0xff00ffff,\n  gainsboro: 0xdcdcdcff,\n  ghostwhite: 0xf8f8ffff,\n  gold: 0xffd700ff,\n  goldenrod: 0xdaa520ff,\n  gray: 0x808080ff,\n  green: 0x008000ff,\n  greenyellow: 0xadff2fff,\n  grey: 0x808080ff,\n  honeydew: 0xf0fff0ff,\n  hotpink: 0xff69b4ff,\n  indianred: 0xcd5c5cff,\n  indigo: 0x4b0082ff,\n  ivory: 0xfffff0ff,\n  khaki: 0xf0e68cff,\n  lavender: 0xe6e6faff,\n  lavenderblush: 0xfff0f5ff,\n  lawngreen: 0x7cfc00ff,\n  lemonchiffon: 0xfffacdff,\n  lightblue: 0xadd8e6ff,\n  lightcoral: 0xf08080ff,\n  lightcyan: 0xe0ffffff,\n  lightgoldenrodyellow: 0xfafad2ff,\n  lightgray: 0xd3d3d3ff,\n  lightgreen: 0x90ee90ff,\n  lightgrey: 0xd3d3d3ff,\n  lightpink: 0xffb6c1ff,\n  lightsalmon: 0xffa07aff,\n  lightseagreen: 0x20b2aaff,\n  lightskyblue: 0x87cefaff,\n  lightslategray: 0x778899ff,\n  lightslategrey: 0x778899ff,\n  lightsteelblue: 0xb0c4deff,\n  lightyellow: 0xffffe0ff,\n  lime: 0x00ff00ff,\n  limegreen: 0x32cd32ff,\n  linen: 0xfaf0e6ff,\n  magenta: 0xff00ffff,\n  maroon: 0x800000ff,\n  mediumaquamarine: 0x66cdaaff,\n  mediumblue: 0x0000cdff,\n  mediumorchid: 0xba55d3ff,\n  mediumpurple: 0x9370dbff,\n  mediumseagreen: 0x3cb371ff,\n  mediumslateblue: 0x7b68eeff,\n  mediumspringgreen: 0x00fa9aff,\n  mediumturquoise: 0x48d1ccff,\n  mediumvioletred: 0xc71585ff,\n  midnightblue: 0x191970ff,\n  mintcream: 0xf5fffaff,\n  mistyrose: 0xffe4e1ff,\n  moccasin: 0xffe4b5ff,\n  navajowhite: 0xffdeadff,\n  navy: 0x000080ff,\n  oldlace: 0xfdf5e6ff,\n  olive: 0x808000ff,\n  olivedrab: 0x6b8e23ff,\n  orange: 0xffa500ff,\n  orangered: 0xff4500ff,\n  orchid: 0xda70d6ff,\n  palegoldenrod: 0xeee8aaff,\n  palegreen: 0x98fb98ff,\n  paleturquoise: 0xafeeeeff,\n  palevioletred: 0xdb7093ff,\n  papayawhip: 0xffefd5ff,\n  peachpuff: 0xffdab9ff,\n  peru: 0xcd853fff,\n  pink: 0xffc0cbff,\n  plum: 0xdda0ddff,\n  powderblue: 0xb0e0e6ff,\n  purple: 0x800080ff,\n  rebeccapurple: 0x663399ff,\n  red: 0xff0000ff,\n  rosybrown: 0xbc8f8fff,\n  royalblue: 0x4169e1ff,\n  saddlebrown: 0x8b4513ff,\n  salmon: 0xfa8072ff,\n  sandybrown: 0xf4a460ff,\n  seagreen: 0x2e8b57ff,\n  seashell: 0xfff5eeff,\n  sienna: 0xa0522dff,\n  silver: 0xc0c0c0ff,\n  skyblue: 0x87ceebff,\n  slateblue: 0x6a5acdff,\n  slategray: 0x708090ff,\n  slategrey: 0x708090ff,\n  snow: 0xfffafaff,\n  springgreen: 0x00ff7fff,\n  steelblue: 0x4682b4ff,\n  tan: 0xd2b48cff,\n  teal: 0x008080ff,\n  thistle: 0xd8bfd8ff,\n  tomato: 0xff6347ff,\n  turquoise: 0x40e0d0ff,\n  violet: 0xee82eeff,\n  wheat: 0xf5deb3ff,\n  white: 0xffffffff,\n  whitesmoke: 0xf5f5f5ff,\n  yellow: 0xffff00ff,\n  yellowgreen: 0x9acd32ff\n};\nvar NUMBER = '[-+]?\\\\d*\\\\.?\\\\d+';\nvar PERCENTAGE = \"\".concat(NUMBER, \"%\");\nvar matchers = {\n  rgb: new RegExp(\"rgb\".concat(call(NUMBER, NUMBER, NUMBER))),\n  rgba: new RegExp(\"rgba\".concat(call(NUMBER, NUMBER, NUMBER, NUMBER))),\n  hsl: new RegExp(\"hsl\".concat(call(NUMBER, PERCENTAGE, PERCENTAGE))),\n  hsla: new RegExp(\"hsla\".concat(call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER))),\n  hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n  hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n  hex6: /^#([0-9a-fA-F]{6})$/,\n  hex8: /^#([0-9a-fA-F]{8})$/\n};\n/* eslint-disable no-bitwise */\n\nfunction parse255(str) {\n  var int = parseInt(str, 10);\n\n  if (int < 0) {\n    return 0;\n  }\n\n  if (int > 255) {\n    return 255;\n  }\n\n  return int;\n}\n\nfunction parse1(str) {\n  var num = parseFloat(str);\n\n  if (num < 0) {\n    return 0;\n  }\n\n  if (num > 1) {\n    return 255;\n  }\n\n  return Math.round(num * 255);\n}\n\nfunction hue2rgb(p, q, tx) {\n  var t = tx;\n\n  if (t < 0) {\n    t += 1;\n  }\n\n  if (t > 1) {\n    t -= 1;\n  }\n\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n\n  if (t < 1 / 2) {\n    return q;\n  }\n\n  if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n\n  return p;\n}\n\nfunction hslToRgb(h, s, l) {\n  var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n  var p = 2 * l - q;\n  var r = hue2rgb(p, q, h + 1 / 3);\n  var g = hue2rgb(p, q, h);\n  var b = hue2rgb(p, q, h - 1 / 3);\n  return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;\n}\n\nfunction parse360(str) {\n  var int = parseFloat(str);\n  return (int % 360 + 360) % 360 / 360;\n}\n\nfunction parsePercentage(str) {\n  var int = parseFloat(str);\n\n  if (int < 0) {\n    return 0;\n  }\n\n  if (int > 100) {\n    return 1;\n  }\n\n  return int / 100;\n}\n\nfunction baseColor(color) {\n  var match;\n\n  if (typeof color === 'number') {\n    if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {\n      return color;\n    }\n\n    return null;\n  }\n\n  match = matchers.hex6.exec(color);\n\n  if (Array.isArray(match)) {\n    return parseInt(\"\".concat(match[1], \"ff\"), 16) >>> 0;\n  }\n\n  if (Object.hasOwnProperty.call(colors, color)) {\n    return colors[color];\n  }\n\n  match = matchers.rgb.exec(color);\n\n  if (Array.isArray(match)) {\n    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 // g\n    | parse255(match[3]) << 8 // b\n    | 0x000000ff // a\n    ) >>> 0;\n  }\n\n  match = matchers.rgba.exec(color);\n\n  if (match) {\n    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 // g\n    | parse255(match[3]) << 8 // b\n    | parse1(match[4]) // a\n    ) >>> 0;\n  }\n\n  match = matchers.hex3.exec(color);\n\n  if (match) {\n    return parseInt(\"\".concat(match[1] + match[1] // r\n    + match[2] + match[2] // g\n    + match[3] + match[3] // b\n    , \"ff\"), // a\n    16) >>> 0;\n  }\n\n  match = matchers.hex8.exec(color);\n\n  if (match) {\n    return parseInt(match[1], 16) >>> 0;\n  }\n\n  match = matchers.hex4.exec(color);\n\n  if (match) {\n    return parseInt(match[1] + match[1] // r\n    + match[2] + match[2] // g\n    + match[3] + match[3] // b\n    + match[4] + match[4], // a\n    16) >>> 0;\n  }\n\n  match = matchers.hsl.exec(color);\n\n  if (match) {\n    return (hslToRgb(parse360(match[1]), // h\n    parsePercentage(match[2]), // s\n    parsePercentage(match[3])) | 0x000000ff // a\n    ) >>> 0;\n  }\n\n  match = matchers.hsla.exec(color);\n\n  if (match) {\n    return (hslToRgb(parse360(match[1]), // h\n    parsePercentage(match[2]), // s\n    parsePercentage(match[3])) | parse1(match[4]) // a\n    ) >>> 0;\n  }\n\n  return null;\n}\n/* eslint-disable no-bitwise */\n\n/**\n * Parse the color value to integer that native understand.\n *\n * @param {string} color - The color value.\n * @param {object} options - Color options.\n */\n\n\nfunction colorParse(color) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (Number.isInteger(color)) {\n    return color;\n  }\n\n  var int32Color = baseColor(color);\n\n  if (!options.platform) {\n    /* eslint-disable-next-line no-param-reassign */\n    options.platform =  false || Device$1.platform.OS;\n  }\n\n  if (int32Color === null) {\n    return 0;\n  }\n\n  int32Color = (int32Color << 24 | int32Color >>> 8) >>> 0;\n\n  if (options.platform === 'android') {\n    int32Color |= 0;\n  }\n\n  return int32Color;\n}\n/**\n * Parse the color values array to integer array that native understand.\n *\n * @param {string[]} colorArray The color values array.\n * @param {object} options Color options.\n */\n\n\nfunction colorArrayParse(colorArray, options) {\n  if (!Array.isArray(colorArray)) {\n    warn('Input color value is not a array', colorArray);\n    return [0];\n  }\n\n  return colorArray.map(function (color) {\n    return colorParse(color, options);\n  });\n}\n/* eslint-disable class-methods-use-this */\n\n\nvar DocumentNode = /*#__PURE__*/function (_ViewNode2) {\n  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(DocumentNode, _ViewNode2);\n\n  var _super2 = _createSuper(DocumentNode);\n\n  function DocumentNode() {\n    var _this12;\n\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, DocumentNode);\n\n    _this12 = _super2.call(this);\n    _this12.documentElement = new ElementNode('document');\n    return _this12;\n  }\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(DocumentNode, [{\n    key: \"createElement\",\n    value: function createElement(tagName) {\n      return new ElementNode(tagName);\n    }\n  }, {\n    key: \"createElementNS\",\n    value: function createElementNS(namespace, tagName) {\n      return new ElementNode(\"\".concat(namespace, \":\").concat(tagName));\n    }\n  }]);\n\n  return DocumentNode;\n}(ViewNode);\n\nDocumentNode.createElement = DocumentNode.prototype.createElement;\nDocumentNode.createElementNS = DocumentNode.prototype.createElementNS;\nvar isArray = Array.isArray;\nvar keyList = Object.keys;\nvar hasProp = Object.prototype.hasOwnProperty;\n\nvar fastDeepEqual = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    var arrA = isArray(a),\n        arrB = isArray(b),\n        i,\n        length,\n        key;\n\n    if (arrA && arrB) {\n      length = a.length;\n      if (length != b.length) return false;\n\n      for (i = length; i-- !== 0;) {\n        if (!equal(a[i], b[i])) return false;\n      }\n\n      return true;\n    }\n\n    if (arrA != arrB) return false;\n    var dateA = a instanceof Date,\n        dateB = b instanceof Date;\n    if (dateA != dateB) return false;\n    if (dateA && dateB) return a.getTime() == b.getTime();\n    var regexpA = a instanceof RegExp,\n        regexpB = b instanceof RegExp;\n    if (regexpA != regexpB) return false;\n    if (regexpA && regexpB) return a.toString() == b.toString();\n    var keys = keyList(a);\n    length = keys.length;\n    if (length !== keyList(b).length) return false;\n\n    for (i = length; i-- !== 0;) {\n      if (!hasProp.call(b, keys[i])) return false;\n    }\n\n    for (i = length; i-- !== 0;) {\n      key = keys[i];\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  return a !== a && b !== b;\n};\n\nfunction appendChild(parent, child) {\n  if (parent.childNodes.indexOf(child) >= 0) {\n    parent.removeChild(child);\n  }\n\n  parent.appendChild(child);\n}\n\nfunction appendChildToContainer(container, child) {\n  container.appendChild(child);\n}\n\nfunction appendInitialChild(parent, child) {\n  parent.appendChild(child);\n}\n\nfunction commitMount() {}\n\nfunction commitTextUpdate() {}\n\nfunction commitUpdate(instance, updatePayload) {\n  Object.keys(updatePayload).forEach(function (attr) {\n    return instance.setAttribute(attr, updatePayload[attr]);\n  });\n}\n\nfunction createContainerChildSet() {}\n\nfunction createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress) {\n  var element = rootContainerInstance.createElement(type);\n  Object.keys(newProps).forEach(function (attr) {\n    switch (attr) {\n      case 'children':\n        // Ignore children attribute\n        break;\n\n      case 'nativeName':\n        element.meta.component.name = newProps.nativeName;\n        break;\n\n      default:\n        {\n          element.setAttribute(attr, newProps[attr]);\n        }\n    }\n  });\n\n  if ([5, 7].indexOf(workInProgress.tag) < 0) {\n    element.meta.skipAddToDom = true;\n  }\n\n  return element;\n}\n\nfunction createTextInstance(newText, rootContainerInstance) {\n  var element = rootContainerInstance.createElement('p');\n  element.setAttribute('text', unicodeToChar(newText));\n  element.meta = {\n    component: {\n      name: 'Text',\n      skipAddToDom: true\n    }\n  };\n  return element;\n}\n\nfunction finalizeInitialChildren() {\n  return true;\n}\n\nfunction finalizeContainerChildren() {}\n\nfunction getPublicInstance(instance) {\n  return instance;\n}\n\nfunction insertBefore(parent, child, beforeChild) {\n  if (parent.childNodes.indexOf(child) > 0) {\n    // move it if the node has existed\n    parent.moveChild(child, beforeChild);\n  } else {\n    parent.insertBefore(child, beforeChild);\n  }\n}\n\nfunction prepareForCommit() {}\n\nfunction prepareUpdate(instance, type, oldProps, newProps) {\n  var updatePayload = {};\n  Object.keys(newProps).forEach(function (key) {\n    var oldPropValue = oldProps[key];\n    var newPropValue = newProps[key];\n\n    switch (key) {\n      case 'children':\n        {\n          if (oldPropValue !== newPropValue && (typeof newPropValue === 'number' || typeof newPropValue === 'string')) {\n            updatePayload[key] = newPropValue;\n          }\n\n          break;\n        }\n\n      default:\n        {\n          // FIXME: Cancel a event listener\n          if (typeof oldPropValue === 'function' && typeof newPropValue === 'function') ;else if (!fastDeepEqual(oldPropValue, newPropValue)) {\n            updatePayload[key] = newPropValue;\n          }\n        }\n    }\n  });\n\n  if (!Object.keys(updatePayload).length) {\n    return null;\n  }\n\n  return updatePayload;\n}\n\nfunction replaceContainerChildren() {}\n\nfunction removeChild$1(parent, child) {\n  parent.removeChild(child);\n}\n\nfunction removeChildFromContainer(parent, child) {\n  parent.removeChild(child);\n}\n\nfunction resetAfterCommit() {}\n\nfunction resetTextContent() {}\n\nfunction getRootHostContext() {\n  return {};\n}\n\nfunction getChildHostContext() {\n  return {};\n}\n\nfunction shouldDeprioritizeSubtree() {\n  return true;\n}\n\nfunction shouldSetTextContent(type, nextProps) {\n  if (nextProps && nextProps.nativeName === 'Text' || ['p', 'span'].indexOf(type) !== -1) {\n    var children = nextProps.children;\n    return typeof children === 'string' || typeof children === 'number';\n  }\n\n  return false;\n}\n\nvar hostConfigs = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  appendChild: appendChild,\n  appendChildToContainer: appendChildToContainer,\n  appendInitialChild: appendInitialChild,\n  commitMount: commitMount,\n  commitTextUpdate: commitTextUpdate,\n  commitUpdate: commitUpdate,\n  createContainerChildSet: createContainerChildSet,\n  createInstance: createInstance,\n  createTextInstance: createTextInstance,\n  finalizeContainerChildren: finalizeContainerChildren,\n  finalizeInitialChildren: finalizeInitialChildren,\n  getPublicInstance: getPublicInstance,\n  insertBefore: insertBefore,\n  prepareForCommit: prepareForCommit,\n  prepareUpdate: prepareUpdate,\n  replaceContainerChildren: replaceContainerChildren,\n  removeChild: removeChild$1,\n  removeChildFromContainer: removeChildFromContainer,\n  resetAfterCommit: resetAfterCommit,\n  resetTextContent: resetTextContent,\n  getRootHostContext: getRootHostContext,\n  getChildHostContext: getChildHostContext,\n  shouldDeprioritizeSubtree: shouldDeprioritizeSubtree,\n  shouldSetTextContent: shouldSetTextContent\n});\nvar hippyReconciler = react_reconciler__WEBPACK_IMPORTED_MODULE_11___default()(_objectSpread(_objectSpread({}, hostConfigs), {}, {\n  clearTimeout,\n  setTimeout,\n  isPrimaryRenderer: true,\n  noTimeout: -1,\n  supportsMutation: true,\n  supportsHydration: false,\n  supportsPersistence: false,\n  now: Date.now,\n  scheduleDeferredCallback: function scheduleDeferredCallback() {},\n  cancelDeferredCallback: function cancelDeferredCallback() {}\n}));\nvar createContainer = hippyReconciler.createContainer,\n    updateContainer = hippyReconciler.updateContainer,\n    getPublicRootInstance = hippyReconciler.getPublicRootInstance;\nvar componentName$2 = ['%c[Hippy-React \"2.9.0\"]%c', 'color: #61dafb', 'color: auto'];\n\nvar HippyReact = /*#__PURE__*/function () {\n  /**\n   * Create new Hippy instance\n   *\n   * @param {Object} config - Hippy config.\n   * @param {string} config.appName - The name of Hippy app.\n   * @param {Component} config.entryPage - The Entry page of Hippy app.\n   * @param {function} config.callback - The callback after rendering.\n   */\n  function HippyReact(config) {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, HippyReact);\n\n    if (!config.appName || !config.entryPage) {\n      throw new TypeError('Invalid arguments');\n    }\n\n    this.config = config;\n    this.regist = this.start; // Forward compatible alias\n\n    this.render = this.render.bind(this); // Start Render\n\n    var rootDocument = new DocumentNode();\n    this.rootContainer = createContainer(rootDocument, false, false);\n  } // Native methods\n\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(HippyReact, [{\n    key: \"start\",\n    value:\n    /**\n     * Start hippy app execution.\n     */\n    function start() {\n      HippyRegister$1.regist(this.config.appName, this.render);\n    }\n    /**\n     * Native rendering callback\n     * @param {Object} superProps - The props passed by native start the app.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render(superProps) {\n      var _this$config = this.config,\n          appName = _this$config.appName,\n          entryPage = _this$config.entryPage,\n          _this$config$silent = _this$config.silent,\n          silent = _this$config$silent === void 0 ? false : _this$config$silent,\n          _this$config$callback = _this$config.callback,\n          callback = _this$config$callback === void 0 ? function () {} : _this$config$callback;\n      var rootViewId = superProps.__instanceId__;\n      trace.apply(void 0, componentName$2.concat(['Start', appName, 'with rootViewId', rootViewId, superProps])); // Update nodeId for contaienr\n\n      this.rootContainer.containerInfo.nodeId = rootViewId;\n\n      if (silent) {\n        setSilent(silent);\n      } // Save the root container\n\n\n      setRootContainer(rootViewId, this.rootContainer); // Render to screen.\n\n      var rootElement = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(entryPage, superProps);\n      updateContainer(rootElement, this.rootContainer, null, callback);\n      return getPublicRootInstance(this.rootContainer);\n    }\n  }], [{\n    key: \"Native\",\n    get: function get() {\n      warn('HippyReact.Native interface is not stable yet. DO NOT USE IT');\n      return Native;\n    }\n  }]);\n\n  return HippyReact;\n}(); // version\n\n\nHippyReact.version = \"2.9.0\";\nvar AppRegistry = {\n  registerComponent(appName, entryPage) {\n    var hippy = new HippyReact({\n      appName,\n      entryPage\n    });\n    hippy.start();\n  }\n\n};\n/* eslint-disable react/prefer-stateless-function */\n\n/**\n * The most fundamental component for building a UI, `View` is a container that supports layout\n * with flexbox, style, some touch handling, and accessibility controls. `View` maps directly to\n * the native view equivalent on whatever platform React Native is running on, whether that is\n * a `UIView`, `<div>`, `android.view`, etc.\n *\n * View is designed to be nested inside other views and can have 0 to many children of any type.\n * @noInheritDoc\n */\n\nvar View = /*#__PURE__*/function (_React$Component) {\n  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(View, _React$Component);\n\n  var _super3 = _createSuper(View);\n\n  function View() {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, View);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(View, [{\n    key: \"render\",\n    value:\n    /**\n     * @ignore\n     */\n    function render() {\n      var _this$props = this.props,\n          collapsable = _this$props.collapsable,\n          _this$props$style = _this$props.style,\n          style = _this$props$style === void 0 ? {} : _this$props$style,\n          nativeProps = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_6___default()(_this$props, _excluded2);\n\n      var nativeStyle = style;\n\n      if (typeof collapsable === 'boolean') {\n        nativeStyle.collapsable = collapsable;\n      }\n\n      return (\n        /*#__PURE__*/\n        // @ts-ignore\n        react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(\"div\", Object.assign({\n          nativeName: \"View\",\n          style: nativeStyle\n        }, nativeProps))\n      );\n    }\n  }]);\n\n  return View;\n}(react__WEBPACK_IMPORTED_MODULE_10___default.a.Component);\n/* eslint-disable no-param-reassign */\n\n/**\n * A React component for displaying text.\n *\n * `Text` doesn't support nesting.\n * @noInheritDoc\n */\n\n\nfunction forwardRef(_ref, // eslint-disable-next-line max-len\nref) {\n  var style = _ref.style,\n      nativeProps = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_6___default()(_ref, _excluded3);\n\n  var nativeStyle = style; // Fill default color\n  // Workaround for Android meet empty front color not render issue.\n\n  if (style) {\n    if (Array.isArray(style)) {\n      if (style.filter(function (x) {\n        return typeof x === 'object' && x;\n      }).findIndex(function (s) {\n        return s.color || s.colors;\n      }) === -1) {\n        nativeStyle[0].color = '#000';\n      }\n    } else if (typeof style === 'object') {\n      if (style.color === undefined && style.colors === undefined) {\n        nativeStyle.color = '#000';\n      }\n    }\n  }\n\n  nativeProps.text = ''; // Important: Text must recevie text props.\n\n  if (typeof nativeProps.children === 'string') {\n    nativeProps.text = unicodeToChar(nativeProps.children);\n  } else if (typeof nativeProps.children === 'number') {\n    nativeProps.text = unicodeToChar(nativeProps.children.toString());\n  } else if (Array.isArray(nativeProps.children)) {\n    var text = nativeProps.children.filter(function (t) {\n      return typeof t === 'string' || typeof t === 'number';\n    }).join(''); // FIXME: if Text is nested, all child components of this component need to be wrapped by Text\n\n    if (text) {\n      nativeProps.text = unicodeToChar(text);\n      nativeProps.children = nativeProps.text;\n    }\n  }\n\n  return (\n    /*#__PURE__*/\n    // @ts-ignore\n    react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(\"p\", Object.assign({\n      ref: ref,\n      nativeName: \"Text\",\n      style: nativeStyle\n    }, nativeProps))\n  );\n}\n\nforwardRef.displayName = 'Text';\nvar Text = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.forwardRef(forwardRef);\nText.displayName = 'Text';\n/**\n * A React component for displaying different types of images, including network images,\n * static resources, temporary local images, and images from local disk, such as the camera roll.\n * @noInheritDoc\n */\n\nvar Image = /*#__PURE__*/function (_React$Component2) {\n  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(Image, _React$Component2);\n\n  var _super4 = _createSuper(Image);\n\n  function Image() {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, Image);\n\n    return _super4.apply(this, arguments);\n  }\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(Image, [{\n    key: \"getImageUrls\",\n    value: function getImageUrls(_ref2) {\n      var src = _ref2.src,\n          srcs = _ref2.srcs,\n          source = _ref2.source,\n          sources = _ref2.sources;\n      var imageUrls = [];\n\n      if (typeof src === 'string') {\n        imageUrls.push(src);\n      }\n\n      if (Array.isArray(srcs)) {\n        imageUrls = [].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(imageUrls), _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(srcs));\n      }\n\n      if (source) {\n        if (typeof source === 'string') {\n          imageUrls.push(source);\n        } else if (typeof source === 'object' && source !== null) {\n          var uri = source.uri;\n\n          if (uri) {\n            imageUrls.push(uri);\n          }\n        }\n      }\n\n      if (sources) {\n        if (Array.isArray(sources)) {\n          sources.forEach(function (imageSrc) {\n            if (typeof imageSrc === 'string') {\n              imageUrls.push(imageSrc);\n            } else if (typeof imageSrc === 'object' && imageSrc !== null && imageSrc.uri) {\n              imageUrls.push(imageSrc.uri);\n            }\n          });\n        }\n      }\n\n      if (imageUrls.length) {\n        imageUrls = imageUrls.map(function (url) {\n          return convertImgUrl(url);\n        });\n      }\n\n      return imageUrls;\n    }\n  }, {\n    key: \"handleTintColor\",\n    value: function handleTintColor(nativeStyle, tintColor, tintColors) {\n      if (tintColor) {\n        // eslint-disable-next-line no-param-reassign\n        nativeStyle.tintColor = colorParse(tintColor);\n      }\n\n      if (Array.isArray(tintColors)) {\n        // eslint-disable-next-line no-param-reassign\n        nativeStyle.tintColors = colorArrayParse(tintColors);\n      }\n    }\n    /**\n     * @ignore\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          style = _this$props2.style,\n          imageStyle = _this$props2.imageStyle,\n          imageRef = _this$props2.imageRef,\n          source = _this$props2.source,\n          sources = _this$props2.sources,\n          src = _this$props2.src,\n          srcs = _this$props2.srcs,\n          tintColor = _this$props2.tintColor,\n          tintColors = _this$props2.tintColors,\n          nativeProps = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_6___default()(_this$props2, _excluded4);\n      /**\n       * Image source prop\n       */\n      // Define the image source url array.\n\n\n      var imageUrls = this.getImageUrls({\n        src,\n        srcs,\n        source,\n        sources\n      }); // Set sources props by platform specification\n\n      if (Device$1.platform.OS === 'ios') {\n        if (imageUrls.length) {\n          nativeProps.source = imageUrls.map(function (uri) {\n            return {\n              uri\n            };\n          });\n        }\n      } else if (Device$1.platform.OS === 'android') {\n        if (imageUrls.length === 1) {\n          var _imageUrls = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_7___default()(imageUrls, 1);\n\n          nativeProps.src = _imageUrls[0];\n        } else if (imageUrls.length > 1) {\n          nativeProps.srcs = imageUrls;\n        }\n      }\n      /**\n       * defaultSource prop\n       */\n\n\n      if (typeof nativeProps.defaultSource === 'string') {\n        if (nativeProps.defaultSource.indexOf('data:image/') !== 0) {\n          warn('[Image] defaultSource prop must be a local base64 image');\n        }\n\n        nativeProps.defaultSource = convertImgUrl(nativeProps.defaultSource);\n      }\n      /**\n       * tintColor(s)\n       */\n\n\n      var nativeStyle = _objectSpread({}, style); // @ts-ignore\n\n\n      this.handleTintColor(nativeStyle, tintColor, tintColors);\n      nativeProps.style = nativeStyle;\n\n      if (children) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(View, {\n          style: style\n        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(\"img\", Object.assign({}, nativeProps, {\n          nativeName: \"Image\",\n          alt: \"\",\n          // @ts-ignore\n          ref: imageRef,\n          // @ts-ignore\n          style: [{\n            position: 'absolute',\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0,\n            width: style.width,\n            height: style.height\n          }, imageStyle]\n        })), children);\n      }\n\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(\"img\", Object.assign({}, nativeProps, {\n        nativeName: \"Image\",\n        alt: \"\",\n        // @ts-ignore\n        ref: imageRef\n      }));\n    }\n  }], [{\n    key: \"resizeMode\",\n    get: function get() {\n      return {\n        contain: 'contain',\n        cover: 'cover',\n        stretch: 'stretch',\n        center: 'center',\n        repeat: 'repeat'\n      };\n    }\n  }, {\n    key: \"getSize\",\n    value: function getSize(url, success, failure) {\n      if (typeof url !== 'string') {\n        throw new TypeError('Image.getSize first argument must be a string url');\n      }\n\n      var size = _getSize(url);\n\n      if (typeof success === 'function') {\n        size.then(function (result) {\n          return success(result.width, result.height);\n        });\n      }\n\n      if (typeof failure === 'function') {\n        size.catch(failure);\n      } else {\n        size.catch(function (err) {\n          return warn(\"Failed to get size for image: \".concat(url), err);\n        });\n      }\n\n      return size;\n    }\n  }]);\n\n  return Image;\n}(react__WEBPACK_IMPORTED_MODULE_10___default.a.Component);\n\nImage.prefetch = prefetch;\n\nvar Animated = /*#__PURE__*/function () {\n  function Animated() {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, Animated);\n\n    this.Value = Animated.Value;\n  }\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(Animated, null, [{\n    key: \"Value\",\n    value: function Value(val) {\n      return val;\n    }\n  }, {\n    key: \"timing\",\n    value: function timing(value, config) {\n      return new Animation({\n        mode: 'timing',\n        delay: 0,\n        startValue: value,\n        toValue: config.toValue,\n        duration: config.duration,\n        timingFunction: config.easing || 'linear'\n      });\n    }\n  }]);\n\n  return Animated;\n}();\n\nAnimated.View = View;\nAnimated.Text = Text;\nAnimated.Image = Image;\nvar Easing = {\n  step0(n) {\n    return n > 0 ? 1 : 0;\n  },\n\n  step1(n) {\n    return n >= 1 ? 1 : 0;\n  },\n\n  linear() {\n    return 'linear';\n  },\n\n  ease() {\n    return 'ease';\n  },\n\n  quad(t) {\n    return Math.pow(t, 2);\n  },\n\n  cubic(t) {\n    return Math.pow(t, 3);\n  },\n\n  poly(n) {\n    return function (t) {\n      return Math.pow(t, n);\n    };\n  },\n\n  sin(t) {\n    return 1 - Math.cos(t * Math.PI / 2);\n  },\n\n  circle(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  },\n\n  exp(t) {\n    return Math.pow(2, 10 * (t - 1));\n  },\n\n  elastic() {\n    return 'elastic';\n  },\n\n  back() {\n    var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.70158;\n    return function (t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  },\n\n  bounce(t_) {\n    var t = t_;\n\n    if (t < 1 / 2.75) {\n      return 7.5625 * t * t;\n    }\n\n    if (t < 2 / 2.75) {\n      t -= 1.5 / 2.75;\n      return 7.5625 * t * t + 0.75;\n    }\n\n    if (t < 2.5 / 2.75) {\n      t -= 2.25 / 2.75;\n      return 7.5625 * t * t + 0.9375;\n    }\n\n    t -= 2.625 / 2.75;\n    return 7.5625 * t * t + 0.984375;\n  },\n\n  bezier() {\n    return 'bezier';\n  },\n\n  in() {\n    return 'ease-in';\n  },\n\n  out() {\n    return 'ease-out';\n  },\n\n  inOut() {\n    return 'ease-in-out';\n  }\n\n};\n\nfunction ListViewItem(props) {\n  return (\n    /*#__PURE__*/\n    // @ts-ignore\n    react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(\"li\", Object.assign({\n      nativeName: \"ListViewItem\"\n    }, props))\n  );\n}\n\nvar PullHeader = /*#__PURE__*/function (_React$Component3) {\n  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(PullHeader, _React$Component3);\n\n  var _super5 = _createSuper(PullHeader);\n\n  function PullHeader() {\n    var _this13;\n\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, PullHeader);\n\n    _this13 = _super5.apply(this, arguments);\n    _this13.instance = null;\n    return _this13;\n  }\n  /**\n   * Expand the PullView and display the content\n   */\n\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(PullHeader, [{\n    key: \"expandPullHeader\",\n    value: function expandPullHeader() {\n      callUIFunction(this.instance, 'expandPullHeader', []);\n    }\n    /**\n     * Collapse the PullView and hide the content\n     * @param {CollapsePullHeaderOptions} [options] - additional config for pull header\n     */\n\n  }, {\n    key: \"collapsePullHeader\",\n    value: function collapsePullHeader(options) {\n      if (Device$1.platform.OS === 'android') {\n        callUIFunction(this.instance, 'collapsePullHeader', [options]);\n      } else {\n        // iOS is not supported if param invalid, so create a new function name for compatibility\n        if (typeof options !== 'undefined') {\n          callUIFunction(this.instance, 'collapsePullHeaderWithOptions', [options]);\n        } else {\n          callUIFunction(this.instance, 'collapsePullHeader', []);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this14 = this;\n\n      var _this$props3 = this.props,\n          children = _this$props3.children,\n          nativeProps = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_6___default()(_this$props3, _excluded5);\n\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(\"div\", Object.assign({\n        nativeName: \"PullHeaderView\",\n        ref: function ref(_ref3) {\n          _this14.instance = _ref3;\n        }\n      }, nativeProps), children);\n    }\n  }]);\n\n  return PullHeader;\n}(react__WEBPACK_IMPORTED_MODULE_10___default.a.Component);\n\nvar PullFooter = /*#__PURE__*/function (_React$Component4) {\n  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(PullFooter, _React$Component4);\n\n  var _super6 = _createSuper(PullFooter);\n\n  function PullFooter() {\n    var _this15;\n\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, PullFooter);\n\n    _this15 = _super6.apply(this, arguments);\n    _this15.instance = null;\n    return _this15;\n  }\n  /**\n   * Expand the PullView and display the content\n   */\n\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(PullFooter, [{\n    key: \"expandPullFooter\",\n    value: function expandPullFooter() {\n      callUIFunction(this.instance, 'expandPullFooter', []);\n    }\n    /**\n     * Collapse the PullView and hide the content\n     */\n\n  }, {\n    key: \"collapsePullFooter\",\n    value: function collapsePullFooter() {\n      callUIFunction(this.instance, 'collapsePullFooter', []);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this16 = this;\n\n      var _this$props4 = this.props,\n          children = _this$props4.children,\n          nativeProps = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_6___default()(_this$props4, _excluded6);\n\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(\"div\", Object.assign({\n        nativeName: \"PullFooterView\",\n        ref: function ref(_ref4) {\n          _this16.instance = _ref4;\n        }\n      }, nativeProps), children);\n    }\n  }]);\n\n  return PullFooter;\n}(react__WEBPACK_IMPORTED_MODULE_10___default.a.Component);\n/**\n* @ignore\n*/\n\n\nPullFooter.defaultProps = {\n  sticky: true\n};\n/* eslint-disable no-param-reassign */\n\nvar androidAttrMap = {\n  onDisappear: 'onDisAppear'\n};\nvar iosAttrMap = {\n  onDisappear: 'onDisappear'\n};\n/**\n * Recyclable list for better performance, and lower memory usage.\n * @noInheritDoc\n */\n\nvar ListView = /*#__PURE__*/function (_React$Component5) {\n  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(ListView, _React$Component5);\n\n  var _super7 = _createSuper(ListView);\n\n  /**\n   * @ignore\n   */\n  function ListView(props) {\n    var _this17;\n\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, ListView);\n\n    _this17 = _super7.call(this, props);\n    _this17.instance = null;\n    _this17.pullHeader = null;\n    _this17.pullFooter = null;\n    _this17.handleInitialListReady = _this17.handleInitialListReady.bind(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0___default()(_this17));\n    _this17.state = {\n      initialListReady: false\n    };\n    return _this17;\n  }\n  /**\n   * @ignore\n   */\n\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(ListView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var getRowKey = this.props.getRowKey;\n\n      if (!getRowKey) {\n        warn('ListView needs getRowKey to specific the key of item');\n      }\n    }\n    /**\n     * change key\n     */\n    // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: \"convertName\",\n    value: function convertName(attr) {\n      var functionName = attr;\n      if (functionName.indexOf('bound') >= 0) functionName = functionName.substring('bound'.length + 1);\n\n      if (Device$1.platform.OS === 'android' && androidAttrMap[functionName]) {\n        return androidAttrMap[functionName];\n      }\n\n      if (Device$1.platform.OS === 'ios' && iosAttrMap[functionName]) {\n        return iosAttrMap[functionName];\n      }\n\n      return functionName;\n    }\n    /**\n     * Scrolls to a given index of item, either immediately, with a smooth animation.\n     *\n     * @param {number} xIndex - Scroll to horizon index X.\n     * @param {number} yIndex - Scroll To vertical index Y.\n     * @param {boolean} animated - With smooth animation.By default is true.\n     */\n\n  }, {\n    key: \"scrollToIndex\",\n    value: function scrollToIndex(xIndex, yIndex, animated) {\n      if (typeof xIndex !== 'number' || typeof yIndex !== 'number' || typeof animated !== 'boolean') {\n        return;\n      }\n\n      callUIFunction(this.instance, 'scrollToIndex', [xIndex, yIndex, animated]);\n    }\n    /**\n     * Scrolls to a given x, y offset, either immediately, with a smooth animation.\n     *\n     * @param {number} xOffset - Scroll to horizon offset X.\n     * @param {number} yOffset - Scroll To vertical offset Y.\n     * @param {boolean} animated - With smooth animation.By default is true.\n     */\n\n  }, {\n    key: \"scrollToContentOffset\",\n    value: function scrollToContentOffset(xOffset, yOffset, animated) {\n      if (typeof xOffset !== 'number' || typeof yOffset !== 'number' || typeof animated !== 'boolean') {\n        return;\n      }\n\n      callUIFunction(this.instance, 'scrollToContentOffset', [xOffset, yOffset, animated]);\n    }\n    /**\n     * Expand the PullHeaderView and display the content\n     */\n\n  }, {\n    key: \"expandPullHeader\",\n    value: function expandPullHeader() {\n      if (this.pullHeader) {\n        this.pullHeader.expandPullHeader();\n      }\n    }\n    /**\n     * Collapse the PullHeaderView and hide the content\n     */\n\n  }, {\n    key: \"collapsePullHeader\",\n    value: function collapsePullHeader(options) {\n      if (this.pullHeader) {\n        this.pullHeader.collapsePullHeader(options);\n      }\n    }\n    /**\n     * Expand the PullFooterView and display the content\n     */\n\n  }, {\n    key: \"expandPullFooter\",\n    value: function expandPullFooter() {\n      if (this.pullFooter) {\n        this.pullFooter.expandPullFooter();\n      }\n    }\n    /**\n     * Collapse the PullView and hide the content\n     */\n\n  }, {\n    key: \"collapsePullFooter\",\n    value: function collapsePullFooter() {\n      if (this.pullFooter) {\n        this.pullFooter.collapsePullFooter();\n      }\n    }\n  }, {\n    key: \"handleInitialListReady\",\n    value: function handleInitialListReady() {\n      this.setState({\n        initialListReady: true\n      });\n    }\n  }, {\n    key: \"getPullHeader\",\n    value: function getPullHeader(renderPullHeader, onHeaderPulling, onHeaderReleased) {\n      var _this18 = this;\n\n      var pullHeader = null;\n\n      if (typeof renderPullHeader === 'function') {\n        pullHeader = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(PullHeader, {\n          ref: function ref(_ref5) {\n            _this18.pullHeader = _ref5;\n          },\n          onHeaderPulling: onHeaderPulling,\n          onHeaderReleased: onHeaderReleased\n        }, renderPullHeader());\n      }\n\n      return pullHeader;\n    }\n  }, {\n    key: \"getPullFooter\",\n    value: function getPullFooter(renderPullFooter, onFooterPulling, onFooterReleased) {\n      var _this19 = this;\n\n      var pullFooter = null;\n\n      if (typeof renderPullFooter === 'function') {\n        pullFooter = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(PullFooter, {\n          ref: function ref(_ref6) {\n            _this19.pullFooter = _ref6;\n          },\n          onFooterPulling: onFooterPulling,\n          onFooterReleased: onFooterReleased\n        }, renderPullFooter());\n      }\n\n      return pullFooter;\n    }\n  }, {\n    key: \"handleRowProps\",\n    value: function handleRowProps(itemProps, index, _ref7) {\n      var getRowKey = _ref7.getRowKey,\n          getRowStyle = _ref7.getRowStyle,\n          onRowLayout = _ref7.onRowLayout,\n          getRowType = _ref7.getRowType,\n          rowShouldSticky = _ref7.rowShouldSticky;\n\n      if (typeof getRowKey === 'function') {\n        itemProps.key = getRowKey(index);\n      }\n\n      if (typeof getRowStyle === 'function') {\n        itemProps.style = getRowStyle(index);\n      }\n\n      if (typeof onRowLayout === 'function') {\n        itemProps.onLayout = function (e) {\n          onRowLayout(e, index);\n        };\n      }\n\n      if (typeof getRowType === 'function') {\n        var type = getRowType(index);\n\n        if (!Number.isInteger(type)) {\n          warn('getRowType must returns a number');\n        }\n\n        itemProps.type = type;\n      }\n\n      if (typeof rowShouldSticky === 'function') {\n        itemProps.sticky = rowShouldSticky(index);\n      }\n    }\n    /**\n     * @ignore\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this20 = this;\n\n      var _this$props5 = this.props,\n          children = _this$props5.children,\n          style = _this$props5.style,\n          renderRow = _this$props5.renderRow,\n          renderPullHeader = _this$props5.renderPullHeader,\n          renderPullFooter = _this$props5.renderPullFooter,\n          getRowType = _this$props5.getRowType,\n          getRowStyle = _this$props5.getRowStyle,\n          getRowKey = _this$props5.getRowKey,\n          dataSource = _this$props5.dataSource,\n          initialListSize = _this$props5.initialListSize,\n          rowShouldSticky = _this$props5.rowShouldSticky,\n          onRowLayout = _this$props5.onRowLayout,\n          onHeaderPulling = _this$props5.onHeaderPulling,\n          onHeaderReleased = _this$props5.onHeaderReleased,\n          onFooterPulling = _this$props5.onFooterPulling,\n          onFooterReleased = _this$props5.onFooterReleased,\n          onAppear = _this$props5.onAppear,\n          onDisappear = _this$props5.onDisappear,\n          onWillAppear = _this$props5.onWillAppear,\n          onWillDisappear = _this$props5.onWillDisappear,\n          nativeProps = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_6___default()(_this$props5, _excluded7);\n\n      var itemList = []; // Deprecated: Fallback for up-forward compatible.\n\n      if (typeof renderRow === 'function') {\n        var initialListReady = this.state.initialListReady;\n        var numberOfRows = this.props.numberOfRows;\n        var pullHeader = this.getPullHeader(renderPullHeader, onHeaderPulling, onHeaderReleased);\n        var pullFooter = this.getPullFooter(renderPullFooter, onFooterPulling, onFooterReleased);\n\n        if (!numberOfRows && dataSource) {\n          numberOfRows = dataSource.length;\n        }\n\n        if (!initialListReady) {\n          numberOfRows = Math.min(numberOfRows, initialListSize || 10);\n        }\n\n        var _loop = function _loop(index) {\n          var itemProps = {};\n          var rowChildren = void 0;\n\n          if (dataSource) {\n            rowChildren = renderRow(dataSource[index], null, index);\n          } else {\n            rowChildren = renderRow(index);\n          }\n\n          _this20.handleRowProps(itemProps, index, {\n            getRowKey,\n            getRowStyle,\n            getRowType,\n            onRowLayout,\n            rowShouldSticky\n          });\n\n          [onAppear, onDisappear, onWillAppear, onWillDisappear].forEach(function (func) {\n            if (typeof func === 'function') {\n              itemProps[_this20.convertName(func.name)] = function () {\n                func(index);\n              };\n            }\n          });\n\n          if (rowChildren) {\n            itemList.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(ListViewItem, Object.assign({}, itemProps), rowChildren));\n          }\n        };\n\n        for (var index = 0; index < numberOfRows; index += 1) {\n          _loop(index);\n        }\n\n        if (pullHeader) {\n          itemList.unshift(pullHeader);\n        }\n\n        if (pullFooter) {\n          itemList.push(pullFooter);\n        }\n\n        if (typeof rowShouldSticky === 'function') {\n          Object.assign(nativeProps, {\n            rowShouldSticky: true\n          });\n        }\n\n        var appearEventList = [onAppear, onDisappear, onWillAppear, onWillDisappear];\n        nativeProps.exposureEventEnabled = appearEventList.some(function (func) {\n          return typeof func === 'function';\n        });\n        nativeProps.numberOfRows = itemList.length;\n        nativeProps.initialListSize = initialListSize;\n        nativeProps.style = _objectSpread({\n          overflow: 'scroll'\n        }, style);\n      }\n\n      if (!nativeProps.onLoadMore && nativeProps.onEndReached) {\n        nativeProps.onLoadMore = nativeProps.onEndReached;\n      }\n\n      return (\n        /*#__PURE__*/\n        // @ts-ignore\n        react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(\"ul\", Object.assign({\n          ref: function ref(_ref8) {\n            _this20.instance = _ref8;\n          },\n          nativeName: \"ListView\",\n          initialListReady: this.handleInitialListReady\n        }, nativeProps), itemList.length ? itemList : children)\n      );\n    }\n  }]);\n\n  return ListView;\n}(react__WEBPACK_IMPORTED_MODULE_10___default.a.Component);\n/**\n* @ignore\n*/\n\n\nListView.defaultProps = {\n  numberOfRows: 0\n};\n/**\n * Simply to implement the drag down to refresh feature.\n *\n * @deprecated\n * @noInheritDoc\n */\n\nvar RefreshWrapper = /*#__PURE__*/function (_React$Component6) {\n  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(RefreshWrapper, _React$Component6);\n\n  var _super8 = _createSuper(RefreshWrapper);\n\n  function RefreshWrapper(props) {\n    var _this21;\n\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, RefreshWrapper);\n\n    _this21 = _super8.call(this, props);\n    _this21.instance = null; // TODO: Upward compatible with the the old typo mistake.\n\n    _this21.refreshComplected = _this21.refreshCompleted.bind(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0___default()(_this21));\n    return _this21;\n  }\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(RefreshWrapper, [{\n    key: \"getRefresh\",\n    value: function getRefresh() {\n      var getRefresh = this.props.getRefresh;\n\n      if (typeof getRefresh === 'function') {\n        return getRefresh() || null;\n      }\n\n      return null;\n    }\n    /**\n     * Call native for start refresh.\n     */\n\n  }, {\n    key: \"startRefresh\",\n    value: function startRefresh() {\n      callUIFunction(this.instance, 'startRefresh', null);\n    }\n    /**\n     * Call native that data is refreshed\n     */\n\n  }, {\n    key: \"refreshCompleted\",\n    value: function refreshCompleted() {\n      callUIFunction(this.instance, 'refreshComplected', null);\n    }\n    /**\n     * @ignore\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this22 = this;\n\n      var _this$props6 = this.props,\n          children = _this$props6.children,\n          nativeProps = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_6___default()(_this$props6, _excluded8);\n\n      var style = {\n        left: 0,\n        right: 0,\n        position: 'absolute'\n      };\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(\"div\", Object.assign({\n        nativeName: \"RefreshWrapper\",\n        ref: function ref(_ref9) {\n          _this22.instance = _ref9;\n        }\n      }, nativeProps), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(\"div\", {\n        nativeName: \"RefreshWrapperItemView\",\n        style: style\n      }, this.getRefresh()), children);\n    }\n  }]);\n\n  return RefreshWrapper;\n}(react__WEBPACK_IMPORTED_MODULE_10___default.a.Component);\n\nvar Stack = /*#__PURE__*/function () {\n  function Stack() {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, Stack);\n\n    this.top = null;\n    this.size = 0;\n  }\n  /**\n   * Push into a new page/component.\n   *\n   * @param {Object} route - New router\n   */\n\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(Stack, [{\n    key: \"push\",\n    value: function push(route) {\n      this.top = {\n        data: route,\n        next: this.top\n      };\n      this.size += 1;\n    }\n    /**\n     * Returns latest push router.\n     */\n\n  }, {\n    key: \"peek\",\n    value: function peek() {\n      return this.top === null ? null : this.top.data;\n    }\n    /**\n     * Return back to previous page.\n     */\n\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      if (this.top === null) {\n        return null;\n      }\n\n      var out = this.top;\n      this.top = this.top.next;\n\n      if (this.size > 0) {\n        this.size -= 1;\n      }\n\n      return out.data;\n    }\n    /**\n     * Clear history stack\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.top = null;\n      this.size = 0;\n    }\n    /**\n     * Returns all of routes\n     */\n\n  }, {\n    key: \"displayAll\",\n    value: function displayAll() {\n      var arr = [];\n\n      if (this.top === null) {\n        return arr;\n      }\n\n      var current = this.top;\n\n      for (var i = 0, len = this.size; i < len; i += 1) {\n        arr[i] = current.data;\n        current = current.next;\n      }\n\n      return arr;\n    }\n  }]);\n\n  return Stack;\n}();\n/**\n * Simply router component for switch in multiple Hippy page.\n * @noInheritDoc\n */\n\n\nvar Navigator = /*#__PURE__*/function (_React$Component7) {\n  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(Navigator, _React$Component7);\n\n  var _super9 = _createSuper(Navigator);\n\n  /**\n   * @ignore\n   */\n  function Navigator(props) {\n    var _this23;\n\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, Navigator);\n\n    _this23 = _super9.call(this, props);\n    _this23.stack = new Stack();\n    _this23.instance = null;\n    _this23.routeList = {};\n    var initialRoute = props.initialRoute;\n\n    if (initialRoute && initialRoute.component) {\n      var hippy = new HippyReact({\n        appName: initialRoute.routeName,\n        entryPage: initialRoute.component\n      });\n      hippy.regist();\n      _this23.routeList[initialRoute.routeName] = true;\n    }\n\n    _this23.handleAndroidBack = _this23.handleAndroidBack.bind(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0___default()(_this23));\n    return _this23;\n  }\n  /**\n   * @ignore\n   */\n\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(Navigator, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      if (Device$1.platform.OS === 'android') {\n        this.backListener = BackAndroid.addListener(this.handleAndroidBack);\n      }\n    }\n    /**\n     * @ignore\n     */\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var initialRoute = this.props.initialRoute;\n      this.stack.push({\n        routeName: initialRoute.routeName || '',\n        component: initialRoute.component || '',\n        initProps: initialRoute.initProps || ''\n      });\n    }\n    /**\n     * @ignore\n     */\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.backListener) {\n        this.backListener.remove();\n      }\n    }\n  }, {\n    key: \"getCurrentPage\",\n    value: function getCurrentPage() {\n      return this.stack.peek();\n    }\n  }, {\n    key: \"handleAndroidBack\",\n    value: function handleAndroidBack() {\n      if (this.stack.size > 1) {\n        this.pop({\n          animated: true\n        });\n      }\n    }\n    /**\n     * Push into a new page/component.\n     *\n     * @param {Object} route - New router\n     */\n\n  }, {\n    key: \"push\",\n    value: function push(route) {\n      if (route && route.component) {\n        if (!this.routeList[route.routeName]) {\n          var hippy = new HippyReact({\n            appName: route.routeName,\n            entryPage: route.component\n          });\n          hippy.regist();\n          this.routeList[route.routeName] = true;\n        } // eslint-disable-next-line no-param-reassign\n\n\n        delete route.component;\n      }\n\n      var routes = [route];\n      this.stack.push(route);\n      callUIFunction(this.instance, 'push', routes);\n    }\n    /**\n     * Return back to previous page.\n     */\n\n  }, {\n    key: \"pop\",\n    value: function pop(option) {\n      if (this.stack.size > 1) {\n        var options = [option];\n        this.stack.pop();\n        callUIFunction(this.instance, 'pop', options);\n      }\n    }\n    /**\n     * Clear history stack\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.stack.clear();\n    }\n    /**\n     * @ignore\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this24 = this;\n\n      var _this$props7 = this.props,\n          _this$props7$initialR = _this$props7.initialRoute,\n          component = _this$props7$initialR.component,\n          otherInitialRoute = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_6___default()(_this$props7$initialR, _excluded9),\n          nativeProps = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_6___default()(_this$props7, _excluded10);\n\n      nativeProps.initialRoute = otherInitialRoute;\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(\"div\", Object.assign({\n        nativeName: \"Navigator\",\n        ref: function ref(_ref10) {\n          _this24.instance = _ref10;\n        }\n      }, nativeProps));\n    }\n  }]);\n\n  return Navigator;\n}(react__WEBPACK_IMPORTED_MODULE_10___default.a.Component);\n/* eslint-disable no-underscore-dangle */\n\n\nfunction ViewPagerItem(props) {\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(\"div\", Object.assign({\n    nativeName: \"ViewPagerItem\"\n  }, props, {\n    style: {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0,\n      collapsable: false\n    }\n  }));\n}\n/**\n * Container that allows to flip left and right between child views.\n * Each child view of the ViewPage will be treated as a separate page\n * and will be stretched to fill the ViewPage.\n * @noInheritDoc\n */\n\n\nvar ViewPager = /*#__PURE__*/function (_React$Component8) {\n  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(ViewPager, _React$Component8);\n\n  var _super10 = _createSuper(ViewPager);\n\n  /**\n   * @ignore\n   */\n  function ViewPager(props) {\n    var _this25;\n\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, ViewPager);\n\n    _this25 = _super10.call(this, props);\n    _this25.instance = null;\n    _this25.setPage = _this25.setPage.bind(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0___default()(_this25));\n    _this25.setPageWithoutAnimation = _this25.setPageWithoutAnimation.bind(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0___default()(_this25));\n    _this25.onPageScrollStateChanged = _this25.onPageScrollStateChanged.bind(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0___default()(_this25));\n    return _this25;\n  }\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(ViewPager, [{\n    key: \"onPageScrollStateChanged\",\n    value: function onPageScrollStateChanged(params) {\n      var onPageScrollStateChanged = this.props.onPageScrollStateChanged;\n\n      if (onPageScrollStateChanged) {\n        onPageScrollStateChanged(params.pageScrollState);\n      }\n    }\n  }, {\n    key: \"setPage\",\n    value: function setPage(selectedPage) {\n      if (typeof selectedPage !== 'number') {\n        return;\n      }\n\n      callUIFunction(this.instance, 'setPage', [selectedPage]);\n    }\n  }, {\n    key: \"setPageWithoutAnimation\",\n    value: function setPageWithoutAnimation(selectedPage) {\n      if (typeof selectedPage !== 'number') {\n        return;\n      }\n\n      callUIFunction(this.instance, 'setPageWithoutAnimation', [selectedPage]);\n    }\n    /**\n     * @ignore\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this26 = this;\n\n      var _this$props8 = this.props,\n          children = _this$props8.children,\n          onPageScrollStateChanged = _this$props8.onPageScrollStateChanged,\n          nativeProps = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_6___default()(_this$props8, _excluded11);\n\n      var mappedChildren = [];\n\n      if (Array.isArray(children)) {\n        mappedChildren = children.map(function (child) {\n          var viewPageItemProps = {};\n\n          if (typeof child.key === 'string') {\n            viewPageItemProps.key = \"viewPager_\".concat(child.key);\n          } // eslint-disable-next-line react/jsx-key\n\n\n          return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(ViewPagerItem, Object.assign({}, viewPageItemProps), child);\n        });\n      } else {\n        mappedChildren.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(ViewPagerItem, null, children));\n      }\n\n      if (typeof onPageScrollStateChanged === 'function') {\n        nativeProps.onPageScrollStateChanged = this.onPageScrollStateChanged;\n      }\n\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(\"div\", Object.assign({\n        nativeName: \"ViewPager\",\n        ref: function ref(_ref11) {\n          _this26.instance = _ref11;\n        }\n      }, nativeProps), mappedChildren);\n    }\n  }]);\n\n  return ViewPager;\n}(react__WEBPACK_IMPORTED_MODULE_10___default.a.Component);\n/**\n * is right to left display\n * @returns {boolean}\n */\n\n\nfunction isRTL() {\n  var localization = Device.platform.Localization;\n\n  if (localization) {\n    return localization.direction === 1;\n  }\n\n  return false;\n}\n/* eslint-disable no-underscore-dangle */\n\n/**\n * A foundational component for inputting text into the app via a keyboard. Props provide\n * configurability for several features, such as auto-correction, auto-capitalization,\n * placeholder text, and different keyboard types, such as a numeric keypad.\n * @noInheritDoc\n */\n\n\nvar TextInput = /*#__PURE__*/function (_React$Component9) {\n  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(TextInput, _React$Component9);\n\n  var _super11 = _createSuper(TextInput);\n\n  /**\n   * @ignore\n   */\n  function TextInput(props) {\n    var _this27;\n\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, TextInput);\n\n    _this27 = _super11.call(this, props);\n    _this27.instance = null;\n    _this27._lastNativeText = '';\n    _this27._onChangeText = _this27._onChangeText.bind(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0___default()(_this27));\n    _this27._onKeyboardWillShow = _this27._onKeyboardWillShow.bind(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0___default()(_this27));\n    return _this27;\n  }\n  /**\n   * @ignore\n   */\n\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(TextInput, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props9 = this.props,\n          _lastNativeText = _this$props9.value,\n          autoFocus = _this$props9.autoFocus;\n      this._lastNativeText = _lastNativeText;\n\n      if (autoFocus) {\n        this.focus();\n      }\n    }\n    /**\n     * @ignore\n     */\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.blur();\n    }\n    /**\n     * Get the content of `TextInput`.\n     *\n     * @returns {Promise<string>}\n     */\n\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      var _this28 = this;\n\n      return new Promise(function (resolve) {\n        callUIFunction(_this28.instance, 'getValue', function (res) {\n          return resolve(res.text);\n        });\n      });\n    }\n    /**\n     * Set the content of `TextInput`.\n     *\n     * @param {string} value - New content of TextInput\n     * @returns {string}\n     */\n\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      callUIFunction(this.instance, 'setValue', [value]);\n      return value;\n    }\n    /**\n     * Make the `TextInput` focused.\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      callUIFunction(this.instance, 'focusTextInput', []);\n    }\n    /**\n     * Make the `TextInput` blured.\n     */\n\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      callUIFunction(this.instance, 'blurTextInput', []);\n    }\n    /**\n     * Show input method selection dialog.\n     */\n\n  }, {\n    key: \"showInputMethod\",\n    value: function showInputMethod() {\n      callUIFunction(this.instance, 'showInputMethod', []);\n    }\n    /**\n     * Hide the input method selection dialog.\n     */\n\n  }, {\n    key: \"hideInputMethod\",\n    value: function hideInputMethod() {\n      callUIFunction(this.instance, 'hideInputMethod', []);\n    }\n    /**\n     * Clear the content of `TextInput`\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      callUIFunction(this.instance, 'clear', []);\n    }\n  }, {\n    key: \"_onChangeText\",\n    value: function _onChangeText(e) {\n      var onChangeText = this.props.onChangeText;\n\n      if (typeof onChangeText === 'function') {\n        onChangeText(e.text);\n      }\n\n      if (!this.instance) {\n        // calling `this.props.onChange` or `this.props.onChangeText`\n        // may clean up the input itself. Exits here.\n        return;\n      }\n\n      this._lastNativeText = e.text;\n    }\n  }, {\n    key: \"_onKeyboardWillShow\",\n    value: function _onKeyboardWillShow(originEvt) {\n      var onKeyboardWillShow = this.props.onKeyboardWillShow;\n      var evt = originEvt;\n\n      if (Device$1.platform.OS === 'android') {\n        evt.keyboardHeight /= Device$1.screen.scale;\n      }\n\n      if (typeof onKeyboardWillShow === 'function') {\n        onKeyboardWillShow(evt);\n      }\n    }\n    /**\n     * @ignore\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this29 = this;\n\n      var nativeProps = _objectSpread({}, this.props);\n\n      ['underlineColorAndroid', 'placeholderTextColor', 'placeholderTextColors'].forEach(function (prop) {\n        if (typeof _this29.props[prop] === 'string') {\n          if (Array.isArray(nativeProps.style)) {\n            nativeProps.style.push({\n              [prop]: _this29.props[prop]\n            });\n          } else if (nativeProps.style && typeof nativeProps.style === 'object') {\n            nativeProps.style[prop] = _this29.props[prop];\n          } else {\n            nativeProps.style = {\n              [prop]: _this29.props[prop]\n            };\n          }\n\n          nativeProps[prop] = undefined;\n        }\n      });\n\n      if (isRTL()) {\n        if (!nativeProps.style) {\n          nativeProps.style = {\n            textAlign: 'right'\n          };\n        } else if (typeof nativeProps.style === 'object' && !Array.isArray(nativeProps.style)) {\n          if (!nativeProps.style.textAlign) {\n            nativeProps.style.textAlign = 'right';\n          }\n        }\n      }\n\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(\"div\", Object.assign({\n        nativeName: \"TextInput\"\n      }, nativeProps, {\n        ref: function ref(_ref12) {\n          _this29.instance = _ref12;\n        },\n        // @ts-ignore\n        onChangeText: this._onChangeText,\n        onKeyboardWillShow: this._onKeyboardWillShow\n      }));\n    }\n  }]);\n\n  return TextInput;\n}(react__WEBPACK_IMPORTED_MODULE_10___default.a.Component);\n\nvar ratio = Device$1.window.scale;\n/* eslint-disable-next-line import/no-mutable-exports */\n\nvar hairlineWidth = Math.round(0.4 * ratio) / ratio;\n\nif (hairlineWidth === 0) {\n  hairlineWidth = 1 / ratio;\n}\n/**\n * Create new Stylesheet\n * @param {object} styleObj - The style object\n */\n\n\nfunction create(styleObj) {\n  // TODO: validate the style key and value.\n  // TODO: Convert the color and pixel unit at create.\n  return styleObj;\n}\n\nvar stylesheet = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n\n  get hairlineWidth() {\n    return hairlineWidth;\n  },\n\n  create: create\n});\n/* eslint-disable no-underscore-dangle */\n\nvar styles = create({\n  baseVertical: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'column',\n    overflow: 'scroll'\n  },\n  baseHorizontal: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'row',\n    overflow: 'scroll'\n  },\n  contentContainerVertical: {\n    collapsable: false,\n    flexDirection: 'column'\n  },\n  contentContainerHorizontal: {\n    collapsable: false,\n    flexDirection: 'row'\n  }\n});\n/**\n * Scrollable View without recycle feature.\n *\n * If you need to implement a long list, use `ListView`.\n * @noInheritDoc\n */\n\nvar ScrollView = /*#__PURE__*/function (_React$Component10) {\n  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(ScrollView, _React$Component10);\n\n  var _super12 = _createSuper(ScrollView);\n\n  function ScrollView() {\n    var _this30;\n\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, ScrollView);\n\n    _this30 = _super12.apply(this, arguments);\n    _this30.instance = null;\n    return _this30;\n  }\n  /**\n   * Scrolls to a given x, y offset, either immediately, with a smooth animation.\n   *\n   * @param {number} x - Scroll to horizon position X.\n   * @param {number} y - Scroll To veritical position Y.\n   * @param {boolean} animated - With smooth animation.By default is true.\n   */\n\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(ScrollView, [{\n    key: \"scrollTo\",\n    value: function scrollTo(x, y) {\n      var animated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var x_ = x;\n      var y_ = y;\n      var animated_ = animated;\n\n      if (typeof x === 'number') {\n        warn('`scrollTo(x, y, animated)` is deprecated, Use `scrollTo({x: 5, y: 5, animated: true})` instead.');\n      } else if (typeof x === 'object' && x) {\n        x_ = x.x;\n        y_ = x.y;\n        animated_ = x.animated;\n      }\n\n      x_ = x_ || 0;\n      y_ = y_ || 0;\n      animated_ = !!animated_;\n      callUIFunction(this.instance, 'scrollTo', [x_, y_, animated_]);\n    }\n    /**\n     * Scrolls to a given x, y offset, with specific duration of animation.\n     *\n     * @param {number} x - Scroll to horizon position X.\n     * @param {number} y - Scroll To veritical position Y.\n     * @param {number} duration - Duration of animation execution time, with ms unit.\n     *                            By default is 1000ms.\n     */\n\n  }, {\n    key: \"scrollToWithDuration\",\n    value: function scrollToWithDuration() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000;\n      callUIFunction(this.instance, 'scrollToWithOptions', [{\n        x,\n        y,\n        duration\n      }]);\n    }\n    /**\n     * @ignore\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this31 = this;\n\n      var _this$props10 = this.props,\n          horizontal = _this$props10.horizontal,\n          contentContainerStyle = _this$props10.contentContainerStyle,\n          children = _this$props10.children,\n          style = _this$props10.style;\n      var contentContainerStyle_ = [horizontal ? styles.contentContainerHorizontal : styles.contentContainerVertical, contentContainerStyle];\n      var newStyle = horizontal ? Object.assign({}, styles.baseHorizontal, style) : Object.assign({}, styles.baseVertical, style);\n\n      if (horizontal) {\n        newStyle.flexDirection = isRTL() ? 'row-reverse' : 'row';\n      }\n\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(\"div\", Object.assign({\n        nativeName: \"ScrollView\",\n        ref: function ref(_ref13) {\n          _this31.instance = _ref13;\n        }\n      }, this.props, {\n        // @ts-ignore\n        style: newStyle\n      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(View // @ts-ignore\n      , {\n        // @ts-ignore\n        style: contentContainerStyle_\n      }, children));\n    }\n  }]);\n\n  return ScrollView;\n}(react__WEBPACK_IMPORTED_MODULE_10___default.a.Component);\n/* eslint-disable no-underscore-dangle */\n\n\nvar styles$1 = create({\n  modal: {\n    position: 'absolute'\n  },\n  container: {\n    position: 'absolute',\n    left: 0,\n    top: 0\n  }\n});\n/**\n * The Modal component is a basic way to present content above an enclosing view.\n * @noInheritDoc\n */\n\nvar Modal = /*#__PURE__*/function (_React$Component11) {\n  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(Modal, _React$Component11);\n\n  var _super13 = _createSuper(Modal);\n\n  /**\n   * @ignore\n   */\n  function Modal(props) {\n    var _this32;\n\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, Modal);\n\n    _this32 = _super13.call(this, props);\n    _this32.eventSubscription = null;\n    return _this32;\n  }\n  /**\n   * @ignore\n   */\n\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(Modal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this33 = this;\n\n      if (Device$1.platform.OS === 'ios') {\n        this.eventSubscription = new HippyEventListener('modalDismissed');\n        this.eventSubscription.addCallback(function (params) {\n          var _this33$props = _this33.props,\n              primaryKey = _this33$props.primaryKey,\n              onDismiss = _this33$props.onDismiss;\n\n          if (params.primaryKey === primaryKey && typeof onDismiss === 'function') {\n            onDismiss();\n          }\n        });\n      }\n    }\n    /**\n     * @ignore\n     */\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (Device$1.platform.OS === 'ios') {\n        if (this.eventSubscription) {\n          this.eventSubscription.unregister();\n        }\n      }\n    }\n    /**\n     * @ignore\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props11 = this.props,\n          children = _this$props11.children,\n          visible = _this$props11.visible,\n          transparent = _this$props11.transparent,\n          animated = _this$props11.animated;\n      var animationType = this.props.animationType;\n\n      if (visible === false) {\n        return null;\n      }\n\n      var containerStyles = {\n        backgroundColor: transparent ? 'transparent' : 'white'\n      };\n\n      if (!animationType) {\n        // manually setting default prop here to keep support for the deprecated 'animated' prop\n        animationType = 'none';\n\n        if (animated) {\n          animationType = 'slide';\n        }\n      }\n\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(\"div\", Object.assign({\n        nativeName: \"Modal\",\n        animationType: animationType,\n        transparent: transparent,\n        style: styles$1.modal\n      }, this.props), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(View, {\n        style: [styles$1.container, containerStyles]\n      }, children));\n    }\n  }]);\n\n  return Modal;\n}(react__WEBPACK_IMPORTED_MODULE_10___default.a.Component);\n/**\n* @ignore\n*/\n\n\nModal.defaultProps = {\n  visible: true\n};\n/**\n * @noInheritDoc\n */\n\nvar Focusable = /*#__PURE__*/function (_React$Component12) {\n  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(Focusable, _React$Component12);\n\n  var _super14 = _createSuper(Focusable);\n\n  /**\n   * @ignore\n   */\n  function Focusable(props) {\n    var _this34;\n\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, Focusable);\n\n    _this34 = _super14.call(this, props);\n    var requestFocus = _this34.props.requestFocus;\n    _this34.state = {\n      isFocus: !!requestFocus\n    };\n    _this34.handleFocus = _this34.handleFocus.bind(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0___default()(_this34));\n    return _this34;\n  }\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(Focusable, [{\n    key: \"handleFocus\",\n    value: function handleFocus(e) {\n      var userOnFocus = this.props.onFocus;\n\n      if (typeof userOnFocus === 'function') {\n        userOnFocus(e);\n      }\n\n      var isFocus = this.state.isFocus;\n\n      if (isFocus !== e.focus) {\n        this.setState({\n          isFocus: e.focus\n        });\n      }\n    }\n    /**\n     * @ignore\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props12 = this.props,\n          requestFocus = _this$props12.requestFocus,\n          children = _this$props12.children,\n          nextFocusDownId = _this$props12.nextFocusDownId,\n          nextFocusUpId = _this$props12.nextFocusUpId,\n          nextFocusLeftId = _this$props12.nextFocusLeftId,\n          nextFocusRightId = _this$props12.nextFocusRightId,\n          style = _this$props12.style,\n          noFocusStyle = _this$props12.noFocusStyle,\n          focusStyle = _this$props12.focusStyle,\n          onClick = _this$props12.onClick;\n      var isFocus = this.state.isFocus;\n      var child = react__WEBPACK_IMPORTED_MODULE_10___default.a.Children.only(children);\n      var type;\n\n      if (child && child.child && child.child.memoizedProps && child.child.memoizedProps.nativeName) {\n        type = child.child.memoizedProps.nativeName;\n      } else if (child && child.type && child.type.displayName) {\n        type = child.type.displayName;\n      }\n\n      var nextFocusDown = nextFocusDownId && getNodeIdByRef(nextFocusDownId);\n      var nextFocusUp = nextFocusUpId && getNodeIdByRef(nextFocusUpId);\n      var nextFocusLeft = nextFocusLeftId && getNodeIdByRef(nextFocusLeftId);\n      var nextFocusRight = nextFocusRightId && getNodeIdByRef(nextFocusRightId);\n      var nativeStyle = style;\n\n      if (type !== 'Text') {\n        var childStyle = child.memoizedProps.style;\n        nativeStyle = _objectSpread(_objectSpread({}, nativeStyle), childStyle);\n      }\n\n      Object.assign(nativeStyle, isFocus ? focusStyle : noFocusStyle);\n\n      if (type === 'Text') {\n        return (\n          /*#__PURE__*/\n          // @ts-ignore\n          react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(View, {\n            focusable: true,\n            nextFocusDownId: nextFocusDown,\n            nextFocusUpId: nextFocusUp,\n            nextFocusLeftId: nextFocusLeft,\n            nextFocusRightId: nextFocusRight,\n            requestFocus: requestFocus,\n            style: nativeStyle,\n            onClick: onClick,\n            onFocus: this.handleFocus\n          }, child)\n        );\n      }\n\n      var childProps = child.memoizedProps.children;\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.cloneElement(child, {\n        nextFocusDownId,\n        nextFocusUpId,\n        nextFocusLeftId,\n        nextFocusRightId,\n        requestFocus,\n        onClick,\n        focusable: true,\n        children: childProps,\n        style: nativeStyle,\n        onFocus: this.handleFocus\n      });\n    }\n  }]);\n\n  return Focusable;\n}(react__WEBPACK_IMPORTED_MODULE_10___default.a.Component);\n/**\n * System built-in WebView\n *\n * For iOS it uses WKWebView, for Android it uses Webkit built-in.\n */\n\n\nfunction WebView(props) {\n  return (\n    /*#__PURE__*/\n    // @ts-ignore\n    react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(\"iframe\", Object.assign({\n      title: \"hippy\",\n      nativeName: \"WebView\"\n    }, props))\n  );\n}\n\nvar WEB_SOCKET_MODULE_NAME = 'websocket';\nvar websocketEventHub;\n/**\n * The WebSocket API is an advanced technology that makes it possible to open a two-way\n * interactive communication session between the user's browser and a server. With this API,\n * you can send messages to a server and receive event-driven responses without having to\n * poll the server for a reply.\n */\n\nvar WebSocket = /*#__PURE__*/function () {\n  /**\n   * Returns a newly created WebSocket object.\n   *\n   * @param {string} url - The URL to which to connect; this should be the URL to which the\n   *                       WebSocket server will respond.\n   * @param {string | string[]} [protocols] - Either a single protocol string or an array\n   *                                          of protocol strings. These strings are used to\n   *                                          indicate sub-protocols, so that a single server\n   *                                          can implement multiple WebSocket sub-protocols\n   *                                          (for example, you might want one server to be able\n   *                                          to handle different types of interactions depending\n   *                                          on the specified protocol).\n   *                                          If you don't specify a protocol string, an empty\n   *                                          string is assumed.\n   * @param {Object} extrasHeaders - Http headers will append to connection.\n   */\n  function WebSocket(url, protocols, extrasHeaders) {\n    var _this35 = this;\n\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, WebSocket);\n\n    this.protocol = '';\n    this.onWebSocketEvent = this.onWebSocketEvent.bind(this);\n\n    if (!websocketEventHub) {\n      websocketEventHub = new HippyEventListener('hippyWebsocketEvents');\n    }\n\n    this.readyState = 0\n    /* CONNECTING */\n    ;\n    this.webSocketCallbacks = {};\n\n    if (!url || typeof url !== 'string') {\n      throw new TypeError('Invalid WebSocket url');\n    }\n\n    var headers = _objectSpread({}, extrasHeaders);\n\n    if (protocols !== undefined) {\n      if (Array.isArray(protocols) && protocols.length > 0) {\n        headers['Sec-WebSocket-Protocol'] = protocols.join(',');\n      } else if (typeof protocols === 'string') {\n        headers['Sec-WebSocket-Protocol'] = protocols;\n      } else {\n        throw new TypeError('Invalid WebSocket protocols');\n      }\n    }\n\n    var params = {\n      headers,\n      url\n    };\n    this.url = url;\n    this.webSocketCallbackId = websocketEventHub.addCallback(this.onWebSocketEvent);\n    Bridge.callNativeWithPromise(WEB_SOCKET_MODULE_NAME, 'connect', params).then(function (resp) {\n      if (!resp || resp.code !== 0 || typeof resp.id !== 'number') {\n        warn('Fail to create websocket connection', resp);\n        return;\n      }\n\n      _this35.webSocketId = resp.id;\n    });\n  }\n  /**\n   * Closes the WebSocket connection or connection attempt, if any.\n   * If the connection is already CLOSED, this method does nothing.\n   *\n   * @param {number} [code] - A numeric value indicating the status code explaining\n   *                          why the connection is being closed. If this parameter\n   *                          is not specified, a default value of 1005 is assumed.\n   *                          See the list of status codes of CloseEvent for permitted values.\n   * @param {string} [reason] - A human-readable string explaining why the connection\n   *                            is closing. This string must be no longer than 123 bytes\n   *                            of UTF-8 text (not characters).\n   */\n\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(WebSocket, [{\n    key: \"close\",\n    value: function close(code, reason) {\n      if (this.readyState !== 1\n      /* OPEN */\n      ) {\n        warn('WebSocket is not connected');\n        return;\n      }\n\n      this.readyState = 2\n      /* CLOSING */\n      ;\n      Bridge.callNative(WEB_SOCKET_MODULE_NAME, 'close', {\n        id: this.webSocketId,\n        code,\n        reason\n      });\n    }\n    /**\n     * Enqueues the specified data to be transmitted to the server over the WebSocket connection.\n     *\n     * @param {string} data - The data to send to the server. Hippy supports string type only.\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(data) {\n      if (this.readyState !== 1\n      /* OPEN */\n      ) {\n        warn('WebSocket is not connected');\n        return;\n      }\n\n      if (typeof data !== 'string') {\n        throw new TypeError(\"Unsupported websocket data type: \".concat(typeof data));\n      }\n\n      Bridge.callNative(WEB_SOCKET_MODULE_NAME, 'send', {\n        id: this.webSocketId,\n        data\n      });\n    }\n    /**\n     * Set an EventHandler that is called when the WebSocket connection's readyState changes to OPEN;\n     */\n\n  }, {\n    key: \"onopen\",\n    set: function set(callback) {\n      this.webSocketCallbacks.onOpen = callback;\n    }\n    /**\n     * Set an EventHandler that is called when the WebSocket connection's readyState\n     * changes to CLOSED.\n     */\n\n  }, {\n    key: \"onclose\",\n    set: function set(callback) {\n      this.webSocketCallbacks.onClose = callback;\n    }\n    /**\n     * Set an EventHandler that is called when a message is received from the server.\n     */\n\n  }, {\n    key: \"onerror\",\n    set: function set(callback) {\n      this.webSocketCallbacks.onError = callback;\n    }\n    /**\n     * Set an event handler property is a function which gets called when an error\n     * occurs on the WebSocket.\n     */\n\n  }, {\n    key: \"onmessage\",\n    set: function set(callback) {\n      this.webSocketCallbacks.onMessage = callback;\n    }\n    /**\n     * WebSocket events handler from Native.\n     *\n     * @param {Object} param - Native response.\n     */\n\n  }, {\n    key: \"onWebSocketEvent\",\n    value: function onWebSocketEvent(param) {\n      if (typeof param !== 'object' || param.id !== this.webSocketId) {\n        return;\n      }\n\n      var eventType = param.type;\n\n      if (eventType === 'onOpen') {\n        this.readyState = 1\n        /* OPEN */\n        ;\n      } else if (eventType === 'onClose') {\n        this.readyState = 3\n        /* CLOSED */\n        ;\n        websocketEventHub.removeCallback(this.webSocketCallbackId);\n      }\n\n      var callback = this.webSocketCallbacks[eventType];\n\n      if (typeof callback === 'function') {\n        callback(param.data);\n      }\n    }\n  }]);\n\n  return WebSocket;\n}();\n/* eslint-disable react/prefer-stateless-function */\n\n/**\n * The most fundamental component for building a UI, `View` is a container that supports layout\n * with flexbox, style, some touch handling, and accessibility controls. `View` maps directly to\n * the native view equivalent on whatever platform React Native is running on, whether that is\n * a `UIView`, `<div>`, `android.view`, etc.\n *\n * View is designed to be nested inside other views and can have 0 to many children of any type.\n * @noInheritDoc\n */\n\n\nvar View$1 = /*#__PURE__*/function (_React$Component13) {\n  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(View$1, _React$Component13);\n\n  var _super15 = _createSuper(View$1);\n\n  function View$1() {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, View$1);\n\n    return _super15.apply(this, arguments);\n  }\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(View$1, [{\n    key: \"render\",\n    value:\n    /**\n     * @ignore\n     */\n    function render() {\n      var _this$props13 = this.props,\n          collapsable = _this$props13.collapsable,\n          _this$props13$style = _this$props13.style,\n          style = _this$props13$style === void 0 ? {} : _this$props13$style,\n          nativeProps = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_6___default()(_this$props13, _excluded12);\n\n      var nativeStyle = style;\n\n      if (typeof collapsable === 'boolean') {\n        nativeStyle.collapsable = collapsable;\n      }\n\n      return (\n        /*#__PURE__*/\n        // @ts-ignore\n        react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(\"div\", Object.assign({\n          nativeName: \"View\",\n          style: nativeStyle\n        }, nativeProps))\n      );\n    }\n  }]);\n\n  return View$1;\n}(react__WEBPACK_IMPORTED_MODULE_10___default.a.Component);\n/* eslint-disable no-param-reassign */\n\n\nfunction WaterfallViewItem(props) {\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(\"li\", Object.assign({\n    nativeName: 'WaterfallItem'\n  }, props));\n}\n/**\n * Recyclable list for better performance, and lower memory usage.\n * @noInheritDoc\n */\n\n\nvar WaterfallView = /*#__PURE__*/function (_React$Component14) {\n  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(WaterfallView, _React$Component14);\n\n  var _super16 = _createSuper(WaterfallView);\n\n  /**\n   * @constructor\n   */\n  function WaterfallView(props) {\n    var _this36;\n\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default()(this, WaterfallView);\n\n    _this36 = _super16.call(this, props);\n    _this36.instance = null;\n    _this36.pullHeader = null;\n    _this36.pullFooter = null;\n    _this36.handleInitialListReady = _this36.handleInitialListReady.bind(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0___default()(_this36));\n    return _this36;\n  }\n  /**\n   * @ignore\n   */\n\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_9___default()(WaterfallView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var getItemKey = this.props.getItemKey;\n\n      if (!getItemKey) {\n        warn('ListView needs getRowKey to specific the key of item');\n      }\n    }\n    /**\n     * Scrolls to a given index of item, either immediately, with a smooth animation.\n     *\n     * @param {Object} scrollToIndex params\n     * @param {number} scrollToIndex.index - Scroll to specific index.\n     * @param {boolean} scrollToIndex.animated - With smooth animation. By default is true.\n     */\n\n  }, {\n    key: \"scrollToIndex\",\n    value: function scrollToIndex(_ref14) {\n      var _ref14$index = _ref14.index,\n          index = _ref14$index === void 0 ? 0 : _ref14$index,\n          _ref14$animated = _ref14.animated,\n          animated = _ref14$animated === void 0 ? true : _ref14$animated;\n      callUIFunction(this.instance, 'scrollToIndex', [index, index, animated]);\n    }\n    /**\n     * Scrolls to a given x, y offset, either immediately, with a smooth animation.\n     *\n     * @param {Object} scrollToContentOffset params\n     * @param {number} scrollToContentOffset.xOffset - Scroll to horizon offset X.\n     * @param {number} scrollToContentOffset.yOffset - Scroll To vertical offset Y.\n     * @param {boolean} scrollToContentOffset.animated - With smooth animation. By default is true.\n     */\n\n  }, {\n    key: \"scrollToContentOffset\",\n    value: function scrollToContentOffset(_ref15) {\n      var _ref15$xOffset = _ref15.xOffset,\n          xOffset = _ref15$xOffset === void 0 ? 0 : _ref15$xOffset,\n          _ref15$yOffset = _ref15.yOffset,\n          yOffset = _ref15$yOffset === void 0 ? 0 : _ref15$yOffset,\n          _ref15$animated = _ref15.animated,\n          animated = _ref15$animated === void 0 ? true : _ref15$animated;\n      callUIFunction(this.instance, 'scrollToContentOffset', [xOffset, yOffset, animated]);\n    }\n  }, {\n    key: \"handleRowProps\",\n    value: function handleRowProps(itemProps, index, _ref16) {\n      var getItemKey = _ref16.getItemKey,\n          getItemStyle = _ref16.getItemStyle,\n          onItemLayout = _ref16.onItemLayout,\n          getItemType = _ref16.getItemType;\n\n      if (typeof getItemKey === 'function') {\n        itemProps.key = getItemKey(index);\n      }\n\n      if (typeof getItemStyle === 'function') {\n        itemProps.style = getItemStyle(index);\n      }\n\n      if (typeof onItemLayout === 'function') {\n        itemProps.onLayout = function (e) {\n          onItemLayout(e, index);\n        };\n      }\n\n      if (typeof getItemType === 'function') {\n        var type = getItemType(index);\n\n        if (!Number.isInteger(type)) {\n          warn('getRowType must return a number');\n        }\n\n        itemProps.type = type;\n      }\n    } // Expand the PullHeaderView and display the content\n\n  }, {\n    key: \"expandPullHeader\",\n    value: function expandPullHeader() {\n      if (this.pullHeader) {\n        this.pullHeader.expandPullHeader();\n      }\n    } // Collapse the PullHeaderView and hide the content\n\n  }, {\n    key: \"collapsePullHeader\",\n    value: function collapsePullHeader(options) {\n      if (this.pullHeader) {\n        this.pullHeader.collapsePullHeader(options);\n      }\n    } // Expand the PullFooterView and display the content\n\n  }, {\n    key: \"expandPullFooter\",\n    value: function expandPullFooter() {\n      if (this.pullFooter) {\n        this.pullFooter.expandPullFooter();\n      }\n    } // Collapse the PullView and hide the content\n\n  }, {\n    key: \"collapsePullFooter\",\n    value: function collapsePullFooter() {\n      if (this.pullFooter) {\n        this.pullFooter.collapsePullFooter();\n      }\n    }\n    /**\n     *\n     * @param renderPullHeader - PullHeader View\n     * @param onHeaderPulling - Called when header is pulled\n     * @param onHeaderReleased - Called when header is released\n     * @private\n     */\n\n  }, {\n    key: \"getPullHeader\",\n    value: function getPullHeader(renderPullHeader, onHeaderPulling, onHeaderReleased) {\n      var _this37 = this;\n\n      var pullHeader = null;\n\n      if (typeof renderPullHeader === 'function') {\n        pullHeader = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(PullHeader, {\n          key: 'PullHeader',\n          ref: function ref(_ref17) {\n            _this37.pullHeader = _ref17;\n          },\n          onHeaderPulling: onHeaderPulling,\n          onHeaderReleased: onHeaderReleased\n        }, renderPullHeader());\n      }\n\n      return pullHeader;\n    }\n    /**\n     *\n     * @param renderPullFooter - PullHeader View\n     * @param onFooterPulling - Called when footer is pulled\n     * @param onFooterReleased - Called when footer is released\n     * @private\n     */\n\n  }, {\n    key: \"getPullFooter\",\n    value: function getPullFooter(renderPullFooter, onFooterPulling, onFooterReleased) {\n      var _this38 = this;\n\n      var pullFooter = null;\n\n      if (typeof renderPullFooter === 'function') {\n        pullFooter = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(PullFooter, {\n          key: 'PullFooter',\n          ref: function ref(_ref18) {\n            _this38.pullFooter = _ref18;\n          },\n          onFooterPulling: onFooterPulling,\n          onFooterReleased: onFooterReleased\n        }, renderPullFooter());\n      }\n\n      return pullFooter;\n    } // initialReady callback\n\n  }, {\n    key: \"handleInitialListReady\",\n    value: function handleInitialListReady() {\n      var onInitialListReady = this.props.onInitialListReady;\n\n      if (typeof onInitialListReady === 'function') {\n        onInitialListReady();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this39 = this;\n\n      var _this$props14 = this.props,\n          _this$props14$style = _this$props14.style,\n          style = _this$props14$style === void 0 ? {} : _this$props14$style,\n          renderBanner = _this$props14.renderBanner,\n          _this$props14$numberO = _this$props14.numberOfColumns,\n          numberOfColumns = _this$props14$numberO === void 0 ? 2 : _this$props14$numberO,\n          _this$props14$columnS = _this$props14.columnSpacing,\n          columnSpacing = _this$props14$columnS === void 0 ? 0 : _this$props14$columnS,\n          _this$props14$interIt = _this$props14.interItemSpacing,\n          interItemSpacing = _this$props14$interIt === void 0 ? 0 : _this$props14$interIt,\n          _this$props14$numberO2 = _this$props14.numberOfItems,\n          numberOfItems = _this$props14$numberO2 === void 0 ? 0 : _this$props14$numberO2,\n          _this$props14$preload = _this$props14.preloadItemNumber,\n          preloadItemNumber = _this$props14$preload === void 0 ? 0 : _this$props14$preload,\n          renderItem = _this$props14.renderItem,\n          renderPullHeader = _this$props14.renderPullHeader,\n          renderPullFooter = _this$props14.renderPullFooter,\n          getItemType = _this$props14.getItemType,\n          getItemKey = _this$props14.getItemKey,\n          getItemStyle = _this$props14.getItemStyle,\n          _this$props14$content = _this$props14.contentInset,\n          contentInset = _this$props14$content === void 0 ? {\n        top: 0,\n        left: 0,\n        bottom: 0,\n        right: 0\n      } : _this$props14$content,\n          onItemLayout = _this$props14.onItemLayout,\n          onHeaderPulling = _this$props14.onHeaderPulling,\n          onHeaderReleased = _this$props14.onHeaderReleased,\n          onFooterPulling = _this$props14.onFooterPulling,\n          onFooterReleased = _this$props14.onFooterReleased,\n          _this$props14$contain = _this$props14.containPullHeader,\n          containPullHeader = _this$props14$contain === void 0 ? false : _this$props14$contain,\n          _this$props14$contain2 = _this$props14.containPullFooter,\n          containPullFooter = _this$props14$contain2 === void 0 ? false : _this$props14$contain2,\n          _this$props14$contain3 = _this$props14.containBannerView,\n          containBannerView = _this$props14$contain3 === void 0 ? false : _this$props14$contain3,\n          otherNativeProps = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_6___default()(_this$props14, _excluded13);\n\n      var nativeProps = _objectSpread(_objectSpread({}, otherNativeProps), {}, {\n        style,\n        numberOfColumns,\n        columnSpacing,\n        interItemSpacing,\n        preloadItemNumber,\n        contentInset,\n        containPullHeader,\n        containPullFooter,\n        containBannerView\n      });\n\n      var itemList = [];\n\n      if (typeof renderBanner === 'function') {\n        var banner = renderBanner();\n\n        if (banner) {\n          itemList.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(View$1, {\n            key: \"bannerView\"\n          }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_10___default.a.cloneElement(banner)));\n          nativeProps.containBannerView = true;\n        }\n      }\n\n      if (typeof renderItem === 'function') {\n        var pullHeader = this.getPullHeader(renderPullHeader, onHeaderPulling, onHeaderReleased);\n        var pullFooter = this.getPullFooter(renderPullFooter, onFooterPulling, onFooterReleased);\n\n        for (var index = 0; index < numberOfItems; index += 1) {\n          var itemProps = {};\n          var rowChildren = renderItem(index) || null;\n          this.handleRowProps(itemProps, index, {\n            getItemKey,\n            getItemStyle,\n            getItemType,\n            onItemLayout\n          });\n\n          if (rowChildren) {\n            itemList.push(\n            /*#__PURE__*/\n            // @ts-ignore\n            react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(WaterfallViewItem, Object.assign({}, itemProps), rowChildren));\n          }\n        }\n\n        if (pullHeader) {\n          itemList.unshift(pullHeader);\n          nativeProps.containPullHeader = true;\n        }\n\n        if (pullFooter) {\n          itemList.push(pullFooter);\n          nativeProps.containPullFooter = true;\n        }\n\n        nativeProps.style = _objectSpread({}, style);\n      } else {\n        warn('Waterfall attribute [renderItem] is not Function');\n      }\n\n      return (\n        /*#__PURE__*/\n        // @ts-ignore\n        react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement(\"ul\", Object.assign({\n          nativeName: 'WaterfallView',\n          ref: function ref(_ref19) {\n            return _this39.instance = _ref19;\n          },\n          initialListReady: this.handleInitialListReady.bind(this)\n        }, nativeProps), itemList)\n      );\n    }\n  }]);\n\n  return WaterfallView;\n}(react__WEBPACK_IMPORTED_MODULE_10___default.a.Component); // @ts-ignore\n\n\nglobal.WebSocket = WebSocket;\nvar AsyncStorage$2 = Native.AsyncStorage,\n    BackAndroid$1 = Native.BackAndroid,\n    Bridge$2 = Native.Bridge,\n    Clipboard = Native.Clipboard,\n    NetworkModule = Native.Cookie,\n    Device$2 = Native.Device,\n    HippyRegister$2 = Native.HippyRegister,\n    ImageLoaderModule = Native.ImageLoader,\n    NetInfo = Native.NetworkInfo,\n    UIManagerModule = Native.UIManager;\nvar callNative = Bridge$2.callNative,\n    callNativeWithPromise = Bridge$2.callNativeWithPromise,\n    callNativeWithCallbackId = Bridge$2.callNativeWithCallbackId,\n    removeNativeCallback = Bridge$2.removeNativeCallback;\nvar TimerModule = null;\nvar ConsoleModule = console;\nvar Platform = Device$2.platform;\nvar Hippy = HippyReact;\nvar RNfqb = HippyReact;\nvar ImageBackground = Image; // Forward compatibilities\n\nvar RNfqbRegister = HippyRegister$2;\nvar RNfqbEventEmitter = HippyEventEmitter;\nvar RNfqbEventListener = HippyEventListener;\nvar Dimensions = {\n  get(name) {\n    return Device$2[name];\n  }\n\n};\nvar PixelRatio = {\n  get() {\n    return Device$2.screen.scale;\n  }\n\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (HippyReact);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@hippy/react/dist/index.js\n");

/***/ }),

/***/ "./node_modules/object-assign/index.js":
/*!*********************************************!*\
  !*** ./node_modules/object-assign/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n/* eslint-disable no-unused-vars */\n\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n  if (val === null || val === undefined) {\n    throw new TypeError('Object.assign cannot be called with null or undefined');\n  }\n\n  return Object(val);\n}\n\nfunction shouldUseNative() {\n  try {\n    if (!Object.assign) {\n      return false;\n    } // Detect buggy property enumeration order in older V8 versions.\n    // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\n\n    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\n\n    test1[5] = 'de';\n\n    if (Object.getOwnPropertyNames(test1)[0] === '5') {\n      return false;\n    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n    var test2 = {};\n\n    for (var i = 0; i < 10; i++) {\n      test2['_' + String.fromCharCode(i)] = i;\n    }\n\n    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n      return test2[n];\n    });\n\n    if (order2.join('') !== '0123456789') {\n      return false;\n    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n    var test3 = {};\n    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n      test3[letter] = letter;\n    });\n\n    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {\n      return false;\n    }\n\n    return true;\n  } catch (err) {\n    // We don't expect any of the above to throw, but better to be safe.\n    return false;\n  }\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n  var from;\n  var to = toObject(target);\n  var symbols;\n\n  for (var s = 1; s < arguments.length; s++) {\n    from = Object(arguments[s]);\n\n    for (var key in from) {\n      if (hasOwnProperty.call(from, key)) {\n        to[key] = from[key];\n      }\n    }\n\n    if (getOwnPropertySymbols) {\n      symbols = getOwnPropertySymbols(from);\n\n      for (var i = 0; i < symbols.length; i++) {\n        if (propIsEnumerable.call(from, symbols[i])) {\n          to[symbols[i]] = from[symbols[i]];\n        }\n      }\n    }\n  }\n\n  return to;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcz8zMjBjIl0sIm5hbWVzIjpbImdldE93blByb3BlcnR5U3ltYm9scyIsIk9iamVjdCIsImhhc093blByb3BlcnR5IiwicHJvdG90eXBlIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJ2YWwiLCJ1bmRlZmluZWQiLCJUeXBlRXJyb3IiLCJzaG91bGRVc2VOYXRpdmUiLCJhc3NpZ24iLCJ0ZXN0MSIsIlN0cmluZyIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0ZXN0MiIsImkiLCJmcm9tQ2hhckNvZGUiLCJvcmRlcjIiLCJtYXAiLCJuIiwiam9pbiIsInRlc3QzIiwic3BsaXQiLCJmb3JFYWNoIiwibGV0dGVyIiwia2V5cyIsImVyciIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0YXJnZXQiLCJzb3VyY2UiLCJmcm9tIiwidG8iLCJzeW1ib2xzIiwicyIsImFyZ3VtZW50cyIsImxlbmd0aCIsImtleSIsImNhbGwiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFYTtBQUNiOztBQUNBLElBQUlBLHFCQUFxQixHQUFHQyxNQUFNLENBQUNELHFCQUFuQztBQUNBLElBQUlFLGNBQWMsR0FBR0QsTUFBTSxDQUFDRSxTQUFQLENBQWlCRCxjQUF0QztBQUNBLElBQUlFLGdCQUFnQixHQUFHSCxNQUFNLENBQUNFLFNBQVAsQ0FBaUJFLG9CQUF4Qzs7QUFFQSxTQUFTQyxRQUFULENBQWtCQyxHQUFsQixFQUF1QjtBQUN0QixNQUFJQSxHQUFHLEtBQUssSUFBUixJQUFnQkEsR0FBRyxLQUFLQyxTQUE1QixFQUF1QztBQUN0QyxVQUFNLElBQUlDLFNBQUosQ0FBYyx1REFBZCxDQUFOO0FBQ0E7O0FBRUQsU0FBT1IsTUFBTSxDQUFDTSxHQUFELENBQWI7QUFDQTs7QUFFRCxTQUFTRyxlQUFULEdBQTJCO0FBQzFCLE1BQUk7QUFDSCxRQUFJLENBQUNULE1BQU0sQ0FBQ1UsTUFBWixFQUFvQjtBQUNuQixhQUFPLEtBQVA7QUFDQSxLQUhFLENBS0g7QUFFQTs7O0FBQ0EsUUFBSUMsS0FBSyxHQUFHLElBQUlDLE1BQUosQ0FBVyxLQUFYLENBQVosQ0FSRyxDQVE2Qjs7QUFDaENELFNBQUssQ0FBQyxDQUFELENBQUwsR0FBVyxJQUFYOztBQUNBLFFBQUlYLE1BQU0sQ0FBQ2EsbUJBQVAsQ0FBMkJGLEtBQTNCLEVBQWtDLENBQWxDLE1BQXlDLEdBQTdDLEVBQWtEO0FBQ2pELGFBQU8sS0FBUDtBQUNBLEtBWkUsQ0FjSDs7O0FBQ0EsUUFBSUcsS0FBSyxHQUFHLEVBQVo7O0FBQ0EsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEVBQXBCLEVBQXdCQSxDQUFDLEVBQXpCLEVBQTZCO0FBQzVCRCxXQUFLLENBQUMsTUFBTUYsTUFBTSxDQUFDSSxZQUFQLENBQW9CRCxDQUFwQixDQUFQLENBQUwsR0FBc0NBLENBQXRDO0FBQ0E7O0FBQ0QsUUFBSUUsTUFBTSxHQUFHakIsTUFBTSxDQUFDYSxtQkFBUCxDQUEyQkMsS0FBM0IsRUFBa0NJLEdBQWxDLENBQXNDLFVBQVVDLENBQVYsRUFBYTtBQUMvRCxhQUFPTCxLQUFLLENBQUNLLENBQUQsQ0FBWjtBQUNBLEtBRlksQ0FBYjs7QUFHQSxRQUFJRixNQUFNLENBQUNHLElBQVAsQ0FBWSxFQUFaLE1BQW9CLFlBQXhCLEVBQXNDO0FBQ3JDLGFBQU8sS0FBUDtBQUNBLEtBeEJFLENBMEJIOzs7QUFDQSxRQUFJQyxLQUFLLEdBQUcsRUFBWjtBQUNBLDJCQUF1QkMsS0FBdkIsQ0FBNkIsRUFBN0IsRUFBaUNDLE9BQWpDLENBQXlDLFVBQVVDLE1BQVYsRUFBa0I7QUFDMURILFdBQUssQ0FBQ0csTUFBRCxDQUFMLEdBQWdCQSxNQUFoQjtBQUNBLEtBRkQ7O0FBR0EsUUFBSXhCLE1BQU0sQ0FBQ3lCLElBQVAsQ0FBWXpCLE1BQU0sQ0FBQ1UsTUFBUCxDQUFjLEVBQWQsRUFBa0JXLEtBQWxCLENBQVosRUFBc0NELElBQXRDLENBQTJDLEVBQTNDLE1BQ0Ysc0JBREYsRUFDMEI7QUFDekIsYUFBTyxLQUFQO0FBQ0E7O0FBRUQsV0FBTyxJQUFQO0FBQ0EsR0FyQ0QsQ0FxQ0UsT0FBT00sR0FBUCxFQUFZO0FBQ2I7QUFDQSxXQUFPLEtBQVA7QUFDQTtBQUNEOztBQUVEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJuQixlQUFlLEtBQUtULE1BQU0sQ0FBQ1UsTUFBWixHQUFxQixVQUFVbUIsTUFBVixFQUFrQkMsTUFBbEIsRUFBMEI7QUFDOUUsTUFBSUMsSUFBSjtBQUNBLE1BQUlDLEVBQUUsR0FBRzNCLFFBQVEsQ0FBQ3dCLE1BQUQsQ0FBakI7QUFDQSxNQUFJSSxPQUFKOztBQUVBLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0MsU0FBUyxDQUFDQyxNQUE5QixFQUFzQ0YsQ0FBQyxFQUF2QyxFQUEyQztBQUMxQ0gsUUFBSSxHQUFHL0IsTUFBTSxDQUFDbUMsU0FBUyxDQUFDRCxDQUFELENBQVYsQ0FBYjs7QUFFQSxTQUFLLElBQUlHLEdBQVQsSUFBZ0JOLElBQWhCLEVBQXNCO0FBQ3JCLFVBQUk5QixjQUFjLENBQUNxQyxJQUFmLENBQW9CUCxJQUFwQixFQUEwQk0sR0FBMUIsQ0FBSixFQUFvQztBQUNuQ0wsVUFBRSxDQUFDSyxHQUFELENBQUYsR0FBVU4sSUFBSSxDQUFDTSxHQUFELENBQWQ7QUFDQTtBQUNEOztBQUVELFFBQUl0QyxxQkFBSixFQUEyQjtBQUMxQmtDLGFBQU8sR0FBR2xDLHFCQUFxQixDQUFDZ0MsSUFBRCxDQUEvQjs7QUFDQSxXQUFLLElBQUloQixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHa0IsT0FBTyxDQUFDRyxNQUE1QixFQUFvQ3JCLENBQUMsRUFBckMsRUFBeUM7QUFDeEMsWUFBSVosZ0JBQWdCLENBQUNtQyxJQUFqQixDQUFzQlAsSUFBdEIsRUFBNEJFLE9BQU8sQ0FBQ2xCLENBQUQsQ0FBbkMsQ0FBSixFQUE2QztBQUM1Q2lCLFlBQUUsQ0FBQ0MsT0FBTyxDQUFDbEIsQ0FBRCxDQUFSLENBQUYsR0FBaUJnQixJQUFJLENBQUNFLE9BQU8sQ0FBQ2xCLENBQUQsQ0FBUixDQUFyQjtBQUNBO0FBQ0Q7QUFDRDtBQUNEOztBQUVELFNBQU9pQixFQUFQO0FBQ0EsQ0F6QkQiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/object-assign/index.js\n");

/***/ }),

/***/ "./node_modules/prop-types/checkPropTypes.js":
/*!***************************************************!*\
  !*** ./node_modules/prop-types/checkPropTypes.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar printWarning = function printWarning() {};\n\nif (true) {\n  var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ \"./node_modules/prop-types/lib/ReactPropTypesSecret.js\");\n\n  var loggedTypeFailures = {};\n  var has = Function.call.bind(Object.prototype.hasOwnProperty);\n\n  printWarning = function printWarning(text) {\n    var message = 'Warning: ' + text;\n\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\n\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (true) {\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n\n        if (error && !(error instanceof Error)) {\n          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');\n        }\n\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n          var stack = getStack ? getStack() : '';\n          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));\n        }\n      }\n    }\n  }\n}\n/**\n * Resets warning cache when testing.\n *\n * @private\n */\n\n\ncheckPropTypes.resetWarningCache = function () {\n  if (true) {\n    loggedTypeFailures = {};\n  }\n};\n\nmodule.exports = checkPropTypes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/prop-types/checkPropTypes.js\n");

/***/ }),

/***/ "./node_modules/prop-types/lib/ReactPropTypesSecret.js":
/*!*************************************************************!*\
  !*** ./node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\nmodule.exports = ReactPropTypesSecret;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanM/NTliMCJdLCJuYW1lcyI6WyJSZWFjdFByb3BUeXBlc1NlY3JldCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVhOztBQUViLElBQUlBLG9CQUFvQixHQUFHLDhDQUEzQjtBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJGLG9CQUFqQiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/prop-types/lib/ReactPropTypesSecret.js\n");

/***/ }),

/***/ "./node_modules/react-reconciler/cjs/react-reconciler.development.js":
/*!***************************************************************************!*\
  !*** ./node_modules/react-reconciler/cjs/react-reconciler.development.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/** @license React v0.21.0\n * react-reconciler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */if(true){module.exports=function $$$reconciler($$$hostConfig){'use strict';var _assign=__webpack_require__(/*! object-assign */ \"./node_modules/object-assign/index.js\");var React=__webpack_require__(/*! react */ \"./node_modules/react/index.js\");var checkPropTypes=__webpack_require__(/*! prop-types/checkPropTypes */ \"./node_modules/prop-types/checkPropTypes.js\");var Scheduler=__webpack_require__(/*! scheduler */ \"./node_modules/scheduler/index.js\");var tracing=__webpack_require__(/*! scheduler/tracing */ \"./node_modules/scheduler/tracing.js\");// Do not require this module directly! Use normal `invariant` calls with\n// template literal strings. The messages will be converted to ReactError during\n// build, and in production they will be minified.\n// Do not require this module directly! Use normal `invariant` calls with\n// template literal strings. The messages will be converted to ReactError during\n// build, and in production they will be minified.\nfunction ReactError(error){error.name='Invariant Violation';return error;}var FunctionComponent=0;var ClassComponent=1;var IndeterminateComponent=2;// Before we know whether it is function or class\nvar HostRoot=3;// Root of a host tree. Could be nested inside another node.\nvar HostPortal=4;// A subtree. Could be an entry point to a different renderer.\nvar HostComponent=5;var HostText=6;var Fragment=7;var Mode=8;var ContextConsumer=9;var ContextProvider=10;var ForwardRef=11;var Profiler=12;var SuspenseComponent=13;var MemoComponent=14;var SimpleMemoComponent=15;var LazyComponent=16;var IncompleteClassComponent=17;var DehydratedSuspenseComponent=18;var SuspenseListComponent=19;var FundamentalComponent=20;/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */ /**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */var warningWithoutStack=function warningWithoutStack(){};{warningWithoutStack=function warningWithoutStack(condition,format){for(var _len=arguments.length,args=Array(_len>2?_len-2:0),_key=2;_key<_len;_key++){args[_key-2]=arguments[_key];}if(format===undefined){throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning '+'message argument');}if(args.length>8){// Check before the condition to catch violations early.\nthrow new Error('warningWithoutStack() currently supports at most 8 arguments.');}if(condition){return;}if(typeof console!=='undefined'){var argsWithFormat=args.map(function(item){return''+item;});argsWithFormat.unshift('Warning: '+format);// We intentionally don't use spread (or .apply) directly because it\n// breaks IE9: https://github.com/facebook/react/issues/13610\nFunction.prototype.apply.call(console.error,console,argsWithFormat);}try{// --- Welcome to debugging React ---\n// This error was thrown as a convenience so that you can use this stack\n// to find the callsite that caused this warning to fire.\nvar argIndex=0;var message='Warning: '+format.replace(/%s/g,function(){return args[argIndex++];});throw new Error(message);}catch(x){}};}var warningWithoutStack$1=warningWithoutStack;/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */ /**\n * This API should be called `delete` but we'd have to make sure to always\n * transform these to strings for IE support. When this transform is fully\n * supported we can rename it.\n */function get(key){return key._reactInternalFiber;}function set(key,value){key._reactInternalFiber=value;}var ReactSharedInternals=React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;// Prevent newer renderers from RTE when used with older react package versions.\n// Current owner and dispatcher used to share the same ref,\n// but PR #14548 split them out to better support the react-debug-tools package.\nif(!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')){ReactSharedInternals.ReactCurrentDispatcher={current:null};}if(!ReactSharedInternals.hasOwnProperty('ReactCurrentBatchConfig')){ReactSharedInternals.ReactCurrentBatchConfig={suspense:null};}// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar hasSymbol=typeof Symbol==='function'&&Symbol.for;var REACT_ELEMENT_TYPE=hasSymbol?Symbol.for('react.element'):0xeac7;var REACT_PORTAL_TYPE=hasSymbol?Symbol.for('react.portal'):0xeaca;var REACT_FRAGMENT_TYPE=hasSymbol?Symbol.for('react.fragment'):0xeacb;var REACT_STRICT_MODE_TYPE=hasSymbol?Symbol.for('react.strict_mode'):0xeacc;var REACT_PROFILER_TYPE=hasSymbol?Symbol.for('react.profiler'):0xead2;var REACT_PROVIDER_TYPE=hasSymbol?Symbol.for('react.provider'):0xeacd;var REACT_CONTEXT_TYPE=hasSymbol?Symbol.for('react.context'):0xeace;// TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary\n// (unstable) APIs that have been removed. Can we remove the symbols?\nvar REACT_CONCURRENT_MODE_TYPE=hasSymbol?Symbol.for('react.concurrent_mode'):0xeacf;var REACT_FORWARD_REF_TYPE=hasSymbol?Symbol.for('react.forward_ref'):0xead0;var REACT_SUSPENSE_TYPE=hasSymbol?Symbol.for('react.suspense'):0xead1;var REACT_SUSPENSE_LIST_TYPE=hasSymbol?Symbol.for('react.suspense_list'):0xead8;var REACT_MEMO_TYPE=hasSymbol?Symbol.for('react.memo'):0xead3;var REACT_LAZY_TYPE=hasSymbol?Symbol.for('react.lazy'):0xead4;var REACT_FUNDAMENTAL_TYPE=hasSymbol?Symbol.for('react.fundamental'):0xead5;var REACT_RESPONDER_TYPE=hasSymbol?Symbol.for('react.responder'):0xead6;var MAYBE_ITERATOR_SYMBOL=typeof Symbol==='function'&&Symbol.iterator;var FAUX_ITERATOR_SYMBOL='@@iterator';function getIteratorFn(maybeIterable){if(maybeIterable===null||typeof maybeIterable!=='object'){return null;}var maybeIterator=MAYBE_ITERATOR_SYMBOL&&maybeIterable[MAYBE_ITERATOR_SYMBOL]||maybeIterable[FAUX_ITERATOR_SYMBOL];if(typeof maybeIterator==='function'){return maybeIterator;}return null;}var Pending=0;var Resolved=1;var Rejected=2;function refineResolvedLazyComponent(lazyComponent){return lazyComponent._status===Resolved?lazyComponent._result:null;}function getWrappedName(outerType,innerType,wrapperName){var functionName=innerType.displayName||innerType.name||'';return outerType.displayName||(functionName!==''?wrapperName+'('+functionName+')':wrapperName);}function getComponentName(type){if(type==null){// Host root, text node or just invalid type.\nreturn null;}{if(typeof type.tag==='number'){warningWithoutStack$1(false,'Received an unexpected object in getComponentName(). '+'This is likely a bug in React. Please file an issue.');}}if(typeof type==='function'){return type.displayName||type.name||null;}if(typeof type==='string'){return type;}switch(type){case REACT_FRAGMENT_TYPE:return'Fragment';case REACT_PORTAL_TYPE:return'Portal';case REACT_PROFILER_TYPE:return'Profiler';case REACT_STRICT_MODE_TYPE:return'StrictMode';case REACT_SUSPENSE_TYPE:return'Suspense';case REACT_SUSPENSE_LIST_TYPE:return'SuspenseList';}if(typeof type==='object'){switch(type.$$typeof){case REACT_CONTEXT_TYPE:return'Context.Consumer';case REACT_PROVIDER_TYPE:return'Context.Provider';case REACT_FORWARD_REF_TYPE:return getWrappedName(type,type.render,'ForwardRef');case REACT_MEMO_TYPE:return getComponentName(type.type);case REACT_LAZY_TYPE:{var thenable=type;var resolvedThenable=refineResolvedLazyComponent(thenable);if(resolvedThenable){return getComponentName(resolvedThenable);}break;}}}return null;}// Don't change these two values. They're used by React Dev Tools.\nvar NoEffect=/*              */0;var PerformedWork=/*         */1;// You can change the rest (and add more).\nvar Placement=/*             */2;var Update=/*                */4;var PlacementAndUpdate=/*    */6;var Deletion=/*              */8;var ContentReset=/*          */16;var Callback=/*              */32;var DidCapture=/*            */64;var Ref=/*                   */128;var Snapshot=/*              */256;var Passive=/*               */512;// Passive & Update & Callback & Ref & Snapshot\nvar LifecycleEffectMask=/*   */932;// Union of all host effects\nvar HostEffectMask=/*        */1023;var Incomplete=/*            */1024;var ShouldCapture=/*         */2048;var ReactCurrentOwner=ReactSharedInternals.ReactCurrentOwner;var MOUNTING=1;var MOUNTED=2;var UNMOUNTED=3;function isFiberMountedImpl(fiber){var node=fiber;if(!fiber.alternate){// If there is no alternate, this might be a new tree that isn't inserted\n// yet. If it is, then it will have a pending insertion effect on it.\nif((node.effectTag&Placement)!==NoEffect){return MOUNTING;}while(node.return){node=node.return;if((node.effectTag&Placement)!==NoEffect){return MOUNTING;}}}else{while(node.return){node=node.return;}}if(node.tag===HostRoot){// TODO: Check if this was a nested HostRoot when used with\n// renderContainerIntoSubtree.\nreturn MOUNTED;}// If we didn't hit the root, that means that we're in an disconnected tree\n// that has been unmounted.\nreturn UNMOUNTED;}function isFiberMounted(fiber){return isFiberMountedImpl(fiber)===MOUNTED;}function isMounted(component){{var owner=ReactCurrentOwner.current;if(owner!==null&&owner.tag===ClassComponent){var ownerFiber=owner;var instance=ownerFiber.stateNode;!instance._warnedAboutRefsInRender?warningWithoutStack$1(false,'%s is accessing isMounted inside its render() function. '+'render() should be a pure function of props and state. It should '+'never access something that requires stale data from the previous '+'render, such as refs. Move this logic to componentDidMount and '+'componentDidUpdate instead.',getComponentName(ownerFiber.type)||'A component'):void 0;instance._warnedAboutRefsInRender=true;}}var fiber=get(component);if(!fiber){return false;}return isFiberMountedImpl(fiber)===MOUNTED;}function assertIsMounted(fiber){(function(){if(!(isFiberMountedImpl(fiber)===MOUNTED)){{throw ReactError(Error('Unable to find node on an unmounted component.'));}}})();}function findCurrentFiberUsingSlowPath(fiber){var alternate=fiber.alternate;if(!alternate){// If there is no alternate, then we only need to check if it is mounted.\nvar state=isFiberMountedImpl(fiber);(function(){if(!(state!==UNMOUNTED)){{throw ReactError(Error('Unable to find node on an unmounted component.'));}}})();if(state===MOUNTING){return null;}return fiber;}// If we have two possible branches, we'll walk backwards up to the root\n// to see what path the root points to. On the way we may hit one of the\n// special cases and we'll deal with them.\nvar a=fiber;var b=alternate;while(true){var parentA=a.return;if(parentA===null){// We're at the root.\nbreak;}var parentB=parentA.alternate;if(parentB===null){// There is no alternate. This is an unusual case. Currently, it only\n// happens when a Suspense component is hidden. An extra fragment fiber\n// is inserted in between the Suspense fiber and its children. Skip\n// over this extra fragment fiber and proceed to the next parent.\nvar nextParent=parentA.return;if(nextParent!==null){a=b=nextParent;continue;}// If there's no parent, we're at the root.\nbreak;}// If both copies of the parent fiber point to the same child, we can\n// assume that the child is current. This happens when we bailout on low\n// priority: the bailed out fiber's child reuses the current child.\nif(parentA.child===parentB.child){var child=parentA.child;while(child){if(child===a){// We've determined that A is the current branch.\nassertIsMounted(parentA);return fiber;}if(child===b){// We've determined that B is the current branch.\nassertIsMounted(parentA);return alternate;}child=child.sibling;}// We should never have an alternate for any mounting node. So the only\n// way this could possibly happen is if this was unmounted, if at all.\n(function(){{{throw ReactError(Error('Unable to find node on an unmounted component.'));}}})();}if(a.return!==b.return){// The return pointer of A and the return pointer of B point to different\n// fibers. We assume that return pointers never criss-cross, so A must\n// belong to the child set of A.return, and B must belong to the child\n// set of B.return.\na=parentA;b=parentB;}else{// The return pointers point to the same fiber. We'll have to use the\n// default, slow path: scan the child sets of each parent alternate to see\n// which child belongs to which set.\n//\n// Search parent A's child set\nvar didFindChild=false;var _child=parentA.child;while(_child){if(_child===a){didFindChild=true;a=parentA;b=parentB;break;}if(_child===b){didFindChild=true;b=parentA;a=parentB;break;}_child=_child.sibling;}if(!didFindChild){// Search parent B's child set\n_child=parentB.child;while(_child){if(_child===a){didFindChild=true;a=parentB;b=parentA;break;}if(_child===b){didFindChild=true;b=parentB;a=parentA;break;}_child=_child.sibling;}(function(){if(!didFindChild){{throw ReactError(Error('Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.'));}}})();}}(function(){if(!(a.alternate===b)){{throw ReactError(Error('Return fibers should always be each others\\' alternates. This error is likely caused by a bug in React. Please file an issue.'));}}})();}// If the root is not a host container, we're in a disconnected tree. I.e.\n// unmounted.\n(function(){if(!(a.tag===HostRoot)){{throw ReactError(Error('Unable to find node on an unmounted component.'));}}})();if(a.stateNode.current===a){// We've determined that A is the current branch.\nreturn fiber;}// Otherwise B has to be current branch.\nreturn alternate;}function findCurrentHostFiber(parent){var currentParent=findCurrentFiberUsingSlowPath(parent);if(!currentParent){return null;}// Next we'll drill down this component to find the first HostComponent/Text.\nvar node=currentParent;while(true){if(node.tag===HostComponent||node.tag===HostText){return node;}else if(node.child){node.child.return=node;node=node.child;continue;}if(node===currentParent){return null;}while(!node.sibling){if(!node.return||node.return===currentParent){return null;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}// Flow needs the return null here, but ESLint complains about it.\n// eslint-disable-next-line no-unreachable\nreturn null;}function findCurrentHostFiberWithNoPortals(parent){var currentParent=findCurrentFiberUsingSlowPath(parent);if(!currentParent){return null;}// Next we'll drill down this component to find the first HostComponent/Text.\nvar node=currentParent;while(true){if(node.tag===HostComponent||node.tag===HostText||node.tag===FundamentalComponent){return node;}else if(node.child&&node.tag!==HostPortal){node.child.return=node;node=node.child;continue;}if(node===currentParent){return null;}while(!node.sibling){if(!node.return||node.return===currentParent){return null;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}// Flow needs the return null here, but ESLint complains about it.\n// eslint-disable-next-line no-unreachable\nreturn null;}// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\nvar getPublicInstance=$$$hostConfig.getPublicInstance;// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// This is a host config that's used for the `react-reconciler` package on npm.\n// It is only used by third-party renderers.\n//\n// Its API lets you pass the host config as an argument.\n// However, inside the `react-reconciler` we treat host config as a module.\n// This file is a shim between two worlds.\n//\n// It works because the `react-reconciler` bundle is wrapped in something like:\n//\n// module.exports = function ($$$config) {\n//   /* reconciler code */\n// }\n//\n// So `$$$config` looks like a global variable, but it's\n// really an argument to a top-level wrapping function.\nvar getRootHostContext=$$$hostConfig.getRootHostContext;var getChildHostContext=$$$hostConfig.getChildHostContext;var prepareForCommit=$$$hostConfig.prepareForCommit;var resetAfterCommit=$$$hostConfig.resetAfterCommit;var createInstance=$$$hostConfig.createInstance;var appendInitialChild=$$$hostConfig.appendInitialChild;var finalizeInitialChildren=$$$hostConfig.finalizeInitialChildren;var prepareUpdate=$$$hostConfig.prepareUpdate;var shouldSetTextContent=$$$hostConfig.shouldSetTextContent;var shouldDeprioritizeSubtree=$$$hostConfig.shouldDeprioritizeSubtree;var createTextInstance=$$$hostConfig.createTextInstance;var scheduleTimeout=$$$hostConfig.setTimeout;var cancelTimeout=$$$hostConfig.clearTimeout;var noTimeout=$$$hostConfig.noTimeout;var now=$$$hostConfig.now;var isPrimaryRenderer=$$$hostConfig.isPrimaryRenderer;var warnsIfNotActing=$$$hostConfig.warnsIfNotActing;var supportsMutation=$$$hostConfig.supportsMutation;var supportsPersistence=$$$hostConfig.supportsPersistence;var supportsHydration=$$$hostConfig.supportsHydration;var mountResponderInstance=$$$hostConfig.mountResponderInstance;var unmountResponderInstance=$$$hostConfig.unmountResponderInstance;var getFundamentalComponentInstance=$$$hostConfig.getFundamentalComponentInstance;var mountFundamentalComponent=$$$hostConfig.mountFundamentalComponent;var shouldUpdateFundamentalComponent=$$$hostConfig.shouldUpdateFundamentalComponent;// -------------------\n//      Mutation\n//     (optional)\n// -------------------\nvar appendChild=$$$hostConfig.appendChild;var appendChildToContainer=$$$hostConfig.appendChildToContainer;var commitTextUpdate=$$$hostConfig.commitTextUpdate;var commitMount=$$$hostConfig.commitMount;var commitUpdate=$$$hostConfig.commitUpdate;var insertBefore=$$$hostConfig.insertBefore;var insertInContainerBefore=$$$hostConfig.insertInContainerBefore;var removeChild=$$$hostConfig.removeChild;var removeChildFromContainer=$$$hostConfig.removeChildFromContainer;var resetTextContent=$$$hostConfig.resetTextContent;var hideInstance=$$$hostConfig.hideInstance;var hideTextInstance=$$$hostConfig.hideTextInstance;var unhideInstance=$$$hostConfig.unhideInstance;var unhideTextInstance=$$$hostConfig.unhideTextInstance;var updateFundamentalComponent=$$$hostConfig.updateFundamentalComponent;var unmountFundamentalComponent=$$$hostConfig.unmountFundamentalComponent;// -------------------\n//     Persistence\n//     (optional)\n// -------------------\nvar cloneInstance=$$$hostConfig.cloneInstance;var createContainerChildSet=$$$hostConfig.createContainerChildSet;var appendChildToContainerChildSet=$$$hostConfig.appendChildToContainerChildSet;var finalizeContainerChildren=$$$hostConfig.finalizeContainerChildren;var replaceContainerChildren=$$$hostConfig.replaceContainerChildren;var cloneHiddenInstance=$$$hostConfig.cloneHiddenInstance;var cloneHiddenTextInstance=$$$hostConfig.cloneHiddenTextInstance;var cloneFundamentalInstance=$$$hostConfig.cloneInstance;// -------------------\n//     Hydration\n//     (optional)\n// -------------------\nvar canHydrateInstance=$$$hostConfig.canHydrateInstance;var canHydrateTextInstance=$$$hostConfig.canHydrateTextInstance;var canHydrateSuspenseInstance=$$$hostConfig.canHydrateSuspenseInstance;var isSuspenseInstancePending=$$$hostConfig.isSuspenseInstancePending;var isSuspenseInstanceFallback=$$$hostConfig.isSuspenseInstanceFallback;var registerSuspenseInstanceRetry=$$$hostConfig.registerSuspenseInstanceRetry;var getNextHydratableSibling=$$$hostConfig.getNextHydratableSibling;var getFirstHydratableChild=$$$hostConfig.getFirstHydratableChild;var hydrateInstance=$$$hostConfig.hydrateInstance;var hydrateTextInstance=$$$hostConfig.hydrateTextInstance;var getNextHydratableInstanceAfterSuspenseInstance=$$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance;var clearSuspenseBoundary=$$$hostConfig.clearSuspenseBoundary;var clearSuspenseBoundaryFromContainer=$$$hostConfig.clearSuspenseBoundaryFromContainer;var didNotMatchHydratedContainerTextInstance=$$$hostConfig.didNotMatchHydratedContainerTextInstance;var didNotMatchHydratedTextInstance=$$$hostConfig.didNotMatchHydratedTextInstance;var didNotHydrateContainerInstance=$$$hostConfig.didNotHydrateContainerInstance;var didNotHydrateInstance=$$$hostConfig.didNotHydrateInstance;var didNotFindHydratableContainerInstance=$$$hostConfig.didNotFindHydratableContainerInstance;var didNotFindHydratableContainerTextInstance=$$$hostConfig.didNotFindHydratableContainerTextInstance;var didNotFindHydratableContainerSuspenseInstance=$$$hostConfig.didNotFindHydratableContainerSuspenseInstance;var didNotFindHydratableInstance=$$$hostConfig.didNotFindHydratableInstance;var didNotFindHydratableTextInstance=$$$hostConfig.didNotFindHydratableTextInstance;var didNotFindHydratableSuspenseInstance=$$$hostConfig.didNotFindHydratableSuspenseInstance;var enableUserTimingAPI=true;// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:\nvar debugRenderPhaseSideEffects=false;// In some cases, StrictMode should also double-render lifecycles.\n// This can be confusing for tests though,\n// And it can be bad for performance in production.\n// This feature flag can be used to control the behavior:\nvar debugRenderPhaseSideEffectsForStrictMode=true;// To preserve the \"Pause on caught exceptions\" behavior of the debugger, we\n// replay the begin phase of a failed component inside invokeGuardedCallback.\nvar replayFailedUnitOfWorkWithInvokeGuardedCallback=true;// Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:\nvar warnAboutDeprecatedLifecycles=true;// Gather advanced timing metrics for Profiler subtrees.\nvar enableProfilerTimer=true;// Trace which interactions trigger each commit.\nvar enableSchedulerTracing=true;// Only used in www builds.\nvar enableSuspenseServerRenderer=false;// TODO: true? Here it might just be false.\n// Only used in www builds.\n// Only used in www builds.\n// Disable javascript: URL strings in href for XSS protection.\n// React Fire: prevent the value and checked attributes from syncing\n// with their related DOM properties\n// These APIs will no longer be \"unstable\" in the upcoming 16.7 release,\n// Control this behavior with a flag to support 16.6 minor releases in the meanwhile.\n// See https://github.com/react-native-community/discussions-and-proposals/issues/72 for more information\n// This is a flag so we can fix warnings in RN core before turning it on\n// Experimental React Flare event system and event components support.\nvar enableFlareAPI=false;// Experimental Host Component support.\nvar enableFundamentalAPI=false;// New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107\n// We will enforce mocking scheduler with scheduler/unstable_mock at some point. (v17?)\n// Till then, we warn about the missing mock, but still fallback to a sync mode compatible version\nvar warnAboutUnmockedScheduler=false;// Temporary flag to revert the fix in #15650\nvar revertPassiveEffectsChange=false;// For tests, we flush suspense fallbacks in an act scope;\n// *except* in some of our own tests, where we test incremental loading states.\nvar flushSuspenseFallbacksInTests=true;// Changes priority of some events like mousemove to user-blocking priority,\n// but without making them discrete. The flag exists in case it causes\n// starvation problems.\n// Add a callback property to suspense to notify which promises are currently\n// in the update queue. This allows reporting and tracing of what is causing\n// the user to see a loading state.\nvar enableSuspenseCallback=false;// Part of the simplification of React.createElement so we can eventually move\n// from React.createElement to React.jsx\n// https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md\nvar warnAboutDefaultPropsOnFunctionComponents=false;var disableLegacyContext=false;var disableSchedulerTimeoutBasedOnReactExpirationTime=false;var BEFORE_SLASH_RE=/^(.*)[\\\\\\/]/;var describeComponentFrame=function describeComponentFrame(name,source,ownerName){var sourceInfo='';if(source){var path=source.fileName;var fileName=path.replace(BEFORE_SLASH_RE,'');{// In DEV, include code for a common special case:\n// prefer \"folder/index.js\" instead of just \"index.js\".\nif(/^index\\./.test(fileName)){var match=path.match(BEFORE_SLASH_RE);if(match){var pathBeforeSlash=match[1];if(pathBeforeSlash){var folderName=pathBeforeSlash.replace(BEFORE_SLASH_RE,'');fileName=folderName+'/'+fileName;}}}}sourceInfo=' (at '+fileName+':'+source.lineNumber+')';}else if(ownerName){sourceInfo=' (created by '+ownerName+')';}return'\\n    in '+(name||'Unknown')+sourceInfo;};var ReactDebugCurrentFrame=ReactSharedInternals.ReactDebugCurrentFrame;function describeFiber(fiber){switch(fiber.tag){case HostRoot:case HostPortal:case HostText:case Fragment:case ContextProvider:case ContextConsumer:return'';default:var owner=fiber._debugOwner;var source=fiber._debugSource;var name=getComponentName(fiber.type);var ownerName=null;if(owner){ownerName=getComponentName(owner.type);}return describeComponentFrame(name,source,ownerName);}}function getStackByFiberInDevAndProd(workInProgress){var info='';var node=workInProgress;do{info+=describeFiber(node);node=node.return;}while(node);return info;}var current=null;var phase=null;function getCurrentFiberOwnerNameInDevOrNull(){{if(current===null){return null;}var owner=current._debugOwner;if(owner!==null&&typeof owner!=='undefined'){return getComponentName(owner.type);}}return null;}function getCurrentFiberStackInDev(){{if(current===null){return'';}// Safe because if current fiber exists, we are reconciling,\n// and it is guaranteed to be the work-in-progress version.\nreturn getStackByFiberInDevAndProd(current);}return'';}function resetCurrentFiber(){{ReactDebugCurrentFrame.getCurrentStack=null;current=null;phase=null;}}function setCurrentFiber(fiber){{ReactDebugCurrentFrame.getCurrentStack=getCurrentFiberStackInDev;current=fiber;phase=null;}}function setCurrentPhase(lifeCyclePhase){{phase=lifeCyclePhase;}}// Prefix measurements so that it's possible to filter them.\n// Longer prefixes are hard to read in DevTools.\nvar reactEmoji='\\u269B';var warningEmoji='\\u26D4';var supportsUserTiming=typeof performance!=='undefined'&&typeof performance.mark==='function'&&typeof performance.clearMarks==='function'&&typeof performance.measure==='function'&&typeof performance.clearMeasures==='function';// Keep track of current fiber so that we know the path to unwind on pause.\n// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?\nvar currentFiber=null;// If we're in the middle of user code, which fiber and method is it?\n// Reusing `currentFiber` would be confusing for this because user code fiber\n// can change during commit phase too, but we don't need to unwind it (since\n// lifecycles in the commit phase don't resemble a tree).\nvar currentPhase=null;var currentPhaseFiber=null;// Did lifecycle hook schedule an update? This is often a performance problem,\n// so we will keep track of it, and include it in the report.\n// Track commits caused by cascading updates.\nvar isCommitting=false;var hasScheduledUpdateInCurrentCommit=false;var hasScheduledUpdateInCurrentPhase=false;var commitCountInCurrentWorkLoop=0;var effectCountInCurrentCommit=0;var isWaitingForCallback=false;// During commits, we only show a measurement once per method name\n// to avoid stretch the commit phase with measurement overhead.\nvar labelsInCurrentCommit=new Set();var formatMarkName=function formatMarkName(markName){return reactEmoji+' '+markName;};var formatLabel=function formatLabel(label,warning){var prefix=warning?warningEmoji+' ':reactEmoji+' ';var suffix=warning?' Warning: '+warning:'';return''+prefix+label+suffix;};var beginMark=function beginMark(markName){performance.mark(formatMarkName(markName));};var clearMark=function clearMark(markName){performance.clearMarks(formatMarkName(markName));};var endMark=function endMark(label,markName,warning){var formattedMarkName=formatMarkName(markName);var formattedLabel=formatLabel(label,warning);try{performance.measure(formattedLabel,formattedMarkName);}catch(err){}// If previous mark was missing for some reason, this will throw.\n// This could only happen if React crashed in an unexpected place earlier.\n// Don't pile on with more errors.\n// Clear marks immediately to avoid growing buffer.\nperformance.clearMarks(formattedMarkName);performance.clearMeasures(formattedLabel);};var getFiberMarkName=function getFiberMarkName(label,debugID){return label+' (#'+debugID+')';};var getFiberLabel=function getFiberLabel(componentName,isMounted,phase){if(phase===null){// These are composite component total time measurements.\nreturn componentName+' ['+(isMounted?'update':'mount')+']';}else{// Composite component methods.\nreturn componentName+'.'+phase;}};var beginFiberMark=function beginFiberMark(fiber,phase){var componentName=getComponentName(fiber.type)||'Unknown';var debugID=fiber._debugID;var isMounted=fiber.alternate!==null;var label=getFiberLabel(componentName,isMounted,phase);if(isCommitting&&labelsInCurrentCommit.has(label)){// During the commit phase, we don't show duplicate labels because\n// there is a fixed overhead for every measurement, and we don't\n// want to stretch the commit phase beyond necessary.\nreturn false;}labelsInCurrentCommit.add(label);var markName=getFiberMarkName(label,debugID);beginMark(markName);return true;};var clearFiberMark=function clearFiberMark(fiber,phase){var componentName=getComponentName(fiber.type)||'Unknown';var debugID=fiber._debugID;var isMounted=fiber.alternate!==null;var label=getFiberLabel(componentName,isMounted,phase);var markName=getFiberMarkName(label,debugID);clearMark(markName);};var endFiberMark=function endFiberMark(fiber,phase,warning){var componentName=getComponentName(fiber.type)||'Unknown';var debugID=fiber._debugID;var isMounted=fiber.alternate!==null;var label=getFiberLabel(componentName,isMounted,phase);var markName=getFiberMarkName(label,debugID);endMark(label,markName,warning);};var shouldIgnoreFiber=function shouldIgnoreFiber(fiber){// Host components should be skipped in the timeline.\n// We could check typeof fiber.type, but does this work with RN?\nswitch(fiber.tag){case HostRoot:case HostComponent:case HostText:case HostPortal:case Fragment:case ContextProvider:case ContextConsumer:case Mode:return true;default:return false;}};var clearPendingPhaseMeasurement=function clearPendingPhaseMeasurement(){if(currentPhase!==null&&currentPhaseFiber!==null){clearFiberMark(currentPhaseFiber,currentPhase);}currentPhaseFiber=null;currentPhase=null;hasScheduledUpdateInCurrentPhase=false;};var pauseTimers=function pauseTimers(){// Stops all currently active measurements so that they can be resumed\n// if we continue in a later deferred loop from the same unit of work.\nvar fiber=currentFiber;while(fiber){if(fiber._debugIsCurrentlyTiming){endFiberMark(fiber,null,null);}fiber=fiber.return;}};var resumeTimersRecursively=function resumeTimersRecursively(fiber){if(fiber.return!==null){resumeTimersRecursively(fiber.return);}if(fiber._debugIsCurrentlyTiming){beginFiberMark(fiber,null);}};var resumeTimers=function resumeTimers(){// Resumes all measurements that were active during the last deferred loop.\nif(currentFiber!==null){resumeTimersRecursively(currentFiber);}};function recordEffect(){if(enableUserTimingAPI){effectCountInCurrentCommit++;}}function recordScheduleUpdate(){if(enableUserTimingAPI){if(isCommitting){hasScheduledUpdateInCurrentCommit=true;}if(currentPhase!==null&&currentPhase!=='componentWillMount'&&currentPhase!=='componentWillReceiveProps'){hasScheduledUpdateInCurrentPhase=true;}}}function startRequestCallbackTimer(){if(enableUserTimingAPI){if(supportsUserTiming&&!isWaitingForCallback){isWaitingForCallback=true;beginMark('(Waiting for async callback...)');}}}function stopRequestCallbackTimer(didExpire){if(enableUserTimingAPI){if(supportsUserTiming){isWaitingForCallback=false;var warning=didExpire?'Update expired; will flush synchronously':null;endMark('(Waiting for async callback...)','(Waiting for async callback...)',warning);}}}function startWorkTimer(fiber){if(enableUserTimingAPI){if(!supportsUserTiming||shouldIgnoreFiber(fiber)){return;}// If we pause, this is the fiber to unwind from.\ncurrentFiber=fiber;if(!beginFiberMark(fiber,null)){return;}fiber._debugIsCurrentlyTiming=true;}}function cancelWorkTimer(fiber){if(enableUserTimingAPI){if(!supportsUserTiming||shouldIgnoreFiber(fiber)){return;}// Remember we shouldn't complete measurement for this fiber.\n// Otherwise flamechart will be deep even for small updates.\nfiber._debugIsCurrentlyTiming=false;clearFiberMark(fiber,null);}}function stopWorkTimer(fiber){if(enableUserTimingAPI){if(!supportsUserTiming||shouldIgnoreFiber(fiber)){return;}// If we pause, its parent is the fiber to unwind from.\ncurrentFiber=fiber.return;if(!fiber._debugIsCurrentlyTiming){return;}fiber._debugIsCurrentlyTiming=false;endFiberMark(fiber,null,null);}}function stopFailedWorkTimer(fiber){if(enableUserTimingAPI){if(!supportsUserTiming||shouldIgnoreFiber(fiber)){return;}// If we pause, its parent is the fiber to unwind from.\ncurrentFiber=fiber.return;if(!fiber._debugIsCurrentlyTiming){return;}fiber._debugIsCurrentlyTiming=false;var warning=fiber.tag===SuspenseComponent||fiber.tag===DehydratedSuspenseComponent?'Rendering was suspended':'An error was thrown inside this error boundary';endFiberMark(fiber,null,warning);}}function startPhaseTimer(fiber,phase){if(enableUserTimingAPI){if(!supportsUserTiming){return;}clearPendingPhaseMeasurement();if(!beginFiberMark(fiber,phase)){return;}currentPhaseFiber=fiber;currentPhase=phase;}}function stopPhaseTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}if(currentPhase!==null&&currentPhaseFiber!==null){var warning=hasScheduledUpdateInCurrentPhase?'Scheduled a cascading update':null;endFiberMark(currentPhaseFiber,currentPhase,warning);}currentPhase=null;currentPhaseFiber=null;}}function startWorkLoopTimer(nextUnitOfWork){if(enableUserTimingAPI){currentFiber=nextUnitOfWork;if(!supportsUserTiming){return;}commitCountInCurrentWorkLoop=0;// This is top level call.\n// Any other measurements are performed within.\nbeginMark('(React Tree Reconciliation)');// Resume any measurements that were in progress during the last loop.\nresumeTimers();}}function stopWorkLoopTimer(interruptedBy,didCompleteRoot){if(enableUserTimingAPI){if(!supportsUserTiming){return;}var warning=null;if(interruptedBy!==null){if(interruptedBy.tag===HostRoot){warning='A top-level update interrupted the previous render';}else{var componentName=getComponentName(interruptedBy.type)||'Unknown';warning='An update to '+componentName+' interrupted the previous render';}}else if(commitCountInCurrentWorkLoop>1){warning='There were cascading updates';}commitCountInCurrentWorkLoop=0;var label=didCompleteRoot?'(React Tree Reconciliation: Completed Root)':'(React Tree Reconciliation: Yielded)';// Pause any measurements until the next loop.\npauseTimers();endMark(label,'(React Tree Reconciliation)',warning);}}function startCommitTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}isCommitting=true;hasScheduledUpdateInCurrentCommit=false;labelsInCurrentCommit.clear();beginMark('(Committing Changes)');}}function stopCommitTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}var warning=null;if(hasScheduledUpdateInCurrentCommit){warning='Lifecycle hook scheduled a cascading update';}else if(commitCountInCurrentWorkLoop>0){warning='Caused by a cascading update in earlier commit';}hasScheduledUpdateInCurrentCommit=false;commitCountInCurrentWorkLoop++;isCommitting=false;labelsInCurrentCommit.clear();endMark('(Committing Changes)','(Committing Changes)',warning);}}function startCommitSnapshotEffectsTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}effectCountInCurrentCommit=0;beginMark('(Committing Snapshot Effects)');}}function stopCommitSnapshotEffectsTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}var count=effectCountInCurrentCommit;effectCountInCurrentCommit=0;endMark('(Committing Snapshot Effects: '+count+' Total)','(Committing Snapshot Effects)',null);}}function startCommitHostEffectsTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}effectCountInCurrentCommit=0;beginMark('(Committing Host Effects)');}}function stopCommitHostEffectsTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}var count=effectCountInCurrentCommit;effectCountInCurrentCommit=0;endMark('(Committing Host Effects: '+count+' Total)','(Committing Host Effects)',null);}}function startCommitLifeCyclesTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}effectCountInCurrentCommit=0;beginMark('(Calling Lifecycle Methods)');}}function stopCommitLifeCyclesTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}var count=effectCountInCurrentCommit;effectCountInCurrentCommit=0;endMark('(Calling Lifecycle Methods: '+count+' Total)','(Calling Lifecycle Methods)',null);}}var valueStack=[];var fiberStack=void 0;{fiberStack=[];}var index=-1;function createCursor(defaultValue){return{current:defaultValue};}function pop(cursor,fiber){if(index<0){{warningWithoutStack$1(false,'Unexpected pop.');}return;}{if(fiber!==fiberStack[index]){warningWithoutStack$1(false,'Unexpected Fiber popped.');}}cursor.current=valueStack[index];valueStack[index]=null;{fiberStack[index]=null;}index--;}function push(cursor,value,fiber){index++;valueStack[index]=cursor.current;{fiberStack[index]=fiber;}cursor.current=value;}var warnedAboutMissingGetChildContext=void 0;{warnedAboutMissingGetChildContext={};}var emptyContextObject={};{Object.freeze(emptyContextObject);}// A cursor to the current merged context object on the stack.\nvar contextStackCursor=createCursor(emptyContextObject);// A cursor to a boolean indicating whether the context has changed.\nvar didPerformWorkStackCursor=createCursor(false);// Keep track of the previous context object that was on the stack.\n// We use this to get access to the parent context after we have already\n// pushed the next context provider, and now need to merge their contexts.\nvar previousContext=emptyContextObject;function getUnmaskedContext(workInProgress,Component,didPushOwnContextIfProvider){if(disableLegacyContext){return emptyContextObject;}else{if(didPushOwnContextIfProvider&&isContextProvider(Component)){// If the fiber is a context provider itself, when we read its context\n// we may have already pushed its own child context on the stack. A context\n// provider should not \"see\" its own child context. Therefore we read the\n// previous (parent) context instead for a context provider.\nreturn previousContext;}return contextStackCursor.current;}}function cacheContext(workInProgress,unmaskedContext,maskedContext){if(disableLegacyContext){return;}else{var instance=workInProgress.stateNode;instance.__reactInternalMemoizedUnmaskedChildContext=unmaskedContext;instance.__reactInternalMemoizedMaskedChildContext=maskedContext;}}function getMaskedContext(workInProgress,unmaskedContext){if(disableLegacyContext){return emptyContextObject;}else{var type=workInProgress.type;var contextTypes=type.contextTypes;if(!contextTypes){return emptyContextObject;}// Avoid recreating masked context unless unmasked context has changed.\n// Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n// This may trigger infinite loops if componentWillReceiveProps calls setState.\nvar instance=workInProgress.stateNode;if(instance&&instance.__reactInternalMemoizedUnmaskedChildContext===unmaskedContext){return instance.__reactInternalMemoizedMaskedChildContext;}var context={};for(var key in contextTypes){context[key]=unmaskedContext[key];}{var name=getComponentName(type)||'Unknown';checkPropTypes(contextTypes,context,'context',name,getCurrentFiberStackInDev);}// Cache unmasked context so we can avoid recreating masked context unless necessary.\n// Context is created before the class component is instantiated so check for instance.\nif(instance){cacheContext(workInProgress,unmaskedContext,context);}return context;}}function hasContextChanged(){if(disableLegacyContext){return false;}else{return didPerformWorkStackCursor.current;}}function isContextProvider(type){if(disableLegacyContext){return false;}else{var childContextTypes=type.childContextTypes;return childContextTypes!==null&&childContextTypes!==undefined;}}function popContext(fiber){if(disableLegacyContext){return;}else{pop(didPerformWorkStackCursor,fiber);pop(contextStackCursor,fiber);}}function popTopLevelContextObject(fiber){if(disableLegacyContext){return;}else{pop(didPerformWorkStackCursor,fiber);pop(contextStackCursor,fiber);}}function pushTopLevelContextObject(fiber,context,didChange){if(disableLegacyContext){return;}else{(function(){if(!(contextStackCursor.current===emptyContextObject)){{throw ReactError(Error('Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.'));}}})();push(contextStackCursor,context,fiber);push(didPerformWorkStackCursor,didChange,fiber);}}function processChildContext(fiber,type,parentContext){if(disableLegacyContext){return parentContext;}else{var instance=fiber.stateNode;var childContextTypes=type.childContextTypes;// TODO (bvaughn) Replace this behavior with an invariant() in the future.\n// It has only been added in Fiber to match the (unintentional) behavior in Stack.\nif(typeof instance.getChildContext!=='function'){{var componentName=getComponentName(type)||'Unknown';if(!warnedAboutMissingGetChildContext[componentName]){warnedAboutMissingGetChildContext[componentName]=true;warningWithoutStack$1(false,'%s.childContextTypes is specified but there is no getChildContext() method '+'on the instance. You can either define getChildContext() on %s or remove '+'childContextTypes from it.',componentName,componentName);}}return parentContext;}var childContext=void 0;{setCurrentPhase('getChildContext');}startPhaseTimer(fiber,'getChildContext');childContext=instance.getChildContext();stopPhaseTimer();{setCurrentPhase(null);}for(var contextKey in childContext){(function(){if(!(contextKey in childContextTypes)){{throw ReactError(Error((getComponentName(type)||'Unknown')+'.getChildContext(): key \"'+contextKey+'\" is not defined in childContextTypes.'));}}})();}{var name=getComponentName(type)||'Unknown';checkPropTypes(childContextTypes,childContext,'child context',name,// In practice, there is one case in which we won't get a stack. It's when\n// somebody calls unstable_renderSubtreeIntoContainer() and we process\n// context from the parent component instance. The stack will be missing\n// because it's outside of the reconciliation, and so the pointer has not\n// been set. This is rare and doesn't matter. We'll also remove that API.\ngetCurrentFiberStackInDev);}return _assign({},parentContext,childContext);}}function pushContextProvider(workInProgress){if(disableLegacyContext){return false;}else{var instance=workInProgress.stateNode;// We push the context as early as possible to ensure stack integrity.\n// If the instance does not exist yet, we will push null at first,\n// and replace it on the stack later when invalidating the context.\nvar memoizedMergedChildContext=instance&&instance.__reactInternalMemoizedMergedChildContext||emptyContextObject;// Remember the parent context so we can merge with it later.\n// Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\npreviousContext=contextStackCursor.current;push(contextStackCursor,memoizedMergedChildContext,workInProgress);push(didPerformWorkStackCursor,didPerformWorkStackCursor.current,workInProgress);return true;}}function invalidateContextProvider(workInProgress,type,didChange){if(disableLegacyContext){return;}else{var instance=workInProgress.stateNode;(function(){if(!instance){{throw ReactError(Error('Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.'));}}})();if(didChange){// Merge parent and own context.\n// Skip this if we're not updating due to sCU.\n// This avoids unnecessarily recomputing memoized values.\nvar mergedContext=processChildContext(workInProgress,type,previousContext);instance.__reactInternalMemoizedMergedChildContext=mergedContext;// Replace the old (or empty) context with the new one.\n// It is important to unwind the context in the reverse order.\npop(didPerformWorkStackCursor,workInProgress);pop(contextStackCursor,workInProgress);// Now push the new context and mark that it has changed.\npush(contextStackCursor,mergedContext,workInProgress);push(didPerformWorkStackCursor,didChange,workInProgress);}else{pop(didPerformWorkStackCursor,workInProgress);push(didPerformWorkStackCursor,didChange,workInProgress);}}}function findCurrentUnmaskedContext(fiber){if(disableLegacyContext){return emptyContextObject;}else{// Currently this is only used with renderSubtreeIntoContainer; not sure if it\n// makes sense elsewhere\n(function(){if(!(isFiberMounted(fiber)&&fiber.tag===ClassComponent)){{throw ReactError(Error('Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.'));}}})();var node=fiber;do{switch(node.tag){case HostRoot:return node.stateNode.context;case ClassComponent:{var Component=node.type;if(isContextProvider(Component)){return node.stateNode.__reactInternalMemoizedMergedChildContext;}break;}}node=node.return;}while(node!==null);(function(){{{throw ReactError(Error('Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.'));}}})();}}var BatchedRoot=1;var ConcurrentRoot=2;/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */var warning=warningWithoutStack$1;{warning=function warning(condition,format){if(condition){return;}var ReactDebugCurrentFrame=ReactSharedInternals.ReactDebugCurrentFrame;var stack=ReactDebugCurrentFrame.getStackAddendum();// eslint-disable-next-line react-internal/warning-and-invariant-args\nfor(var _len=arguments.length,args=Array(_len>2?_len-2:0),_key=2;_key<_len;_key++){args[_key-2]=arguments[_key];}warningWithoutStack$1.apply(undefined,[false,format+'%s'].concat(args,[stack]));};}var warning$1=warning;// Intentionally not named imports because Rollup would use dynamic dispatch for\n// CommonJS interop named imports.\nvar Scheduler_runWithPriority=Scheduler.unstable_runWithPriority;var Scheduler_scheduleCallback=Scheduler.unstable_scheduleCallback;var Scheduler_cancelCallback=Scheduler.unstable_cancelCallback;var Scheduler_shouldYield=Scheduler.unstable_shouldYield;var Scheduler_requestPaint=Scheduler.unstable_requestPaint;var Scheduler_now=Scheduler.unstable_now;var Scheduler_getCurrentPriorityLevel=Scheduler.unstable_getCurrentPriorityLevel;var Scheduler_ImmediatePriority=Scheduler.unstable_ImmediatePriority;var Scheduler_UserBlockingPriority=Scheduler.unstable_UserBlockingPriority;var Scheduler_NormalPriority=Scheduler.unstable_NormalPriority;var Scheduler_LowPriority=Scheduler.unstable_LowPriority;var Scheduler_IdlePriority=Scheduler.unstable_IdlePriority;if(enableSchedulerTracing){// Provide explicit error message when production+profiling bundle of e.g.\n// react-dom is used with production (non-profiling) bundle of\n// scheduler/tracing\n(function(){if(!(tracing.__interactionsRef!=null&&tracing.__interactionsRef.current!=null)){{throw ReactError(Error('It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling'));}}})();}var fakeCallbackNode={};// Except for NoPriority, these correspond to Scheduler priorities. We use\n// ascending numbers so we can compare them like numbers. They start at 90 to\n// avoid clashing with Scheduler's priorities.\nvar ImmediatePriority=99;var UserBlockingPriority=98;var NormalPriority=97;var LowPriority=96;var IdlePriority=95;// NoPriority is the absence of priority. Also React-only.\nvar NoPriority=90;var shouldYield=Scheduler_shouldYield;var requestPaint=// Fall back gracefully if we're running an older version of Scheduler.\nScheduler_requestPaint!==undefined?Scheduler_requestPaint:function(){};var syncQueue=null;var immediateQueueCallbackNode=null;var isFlushingSyncQueue=false;var initialTimeMs=Scheduler_now();// If the initial timestamp is reasonably small, use Scheduler's `now` directly.\n// This will be the case for modern browsers that support `performance.now`. In\n// older browsers, Scheduler falls back to `Date.now`, which returns a Unix\n// timestamp. In that case, subtract the module initialization time to simulate\n// the behavior of performance.now and keep our times small enough to fit\n// within 32 bits.\n// TODO: Consider lifting this into Scheduler.\nvar now$1=initialTimeMs<10000?Scheduler_now:function(){return Scheduler_now()-initialTimeMs;};function getCurrentPriorityLevel(){switch(Scheduler_getCurrentPriorityLevel()){case Scheduler_ImmediatePriority:return ImmediatePriority;case Scheduler_UserBlockingPriority:return UserBlockingPriority;case Scheduler_NormalPriority:return NormalPriority;case Scheduler_LowPriority:return LowPriority;case Scheduler_IdlePriority:return IdlePriority;default:(function(){{{throw ReactError(Error('Unknown priority level.'));}}})();}}function reactPriorityToSchedulerPriority(reactPriorityLevel){switch(reactPriorityLevel){case ImmediatePriority:return Scheduler_ImmediatePriority;case UserBlockingPriority:return Scheduler_UserBlockingPriority;case NormalPriority:return Scheduler_NormalPriority;case LowPriority:return Scheduler_LowPriority;case IdlePriority:return Scheduler_IdlePriority;default:(function(){{{throw ReactError(Error('Unknown priority level.'));}}})();}}function runWithPriority(reactPriorityLevel,fn){var priorityLevel=reactPriorityToSchedulerPriority(reactPriorityLevel);return Scheduler_runWithPriority(priorityLevel,fn);}function scheduleCallback(reactPriorityLevel,callback,options){var priorityLevel=reactPriorityToSchedulerPriority(reactPriorityLevel);return Scheduler_scheduleCallback(priorityLevel,callback,options);}function scheduleSyncCallback(callback){// Push this callback into an internal queue. We'll flush these either in\n// the next tick, or earlier if something calls `flushSyncCallbackQueue`.\nif(syncQueue===null){syncQueue=[callback];// Flush the queue in the next tick, at the earliest.\nimmediateQueueCallbackNode=Scheduler_scheduleCallback(Scheduler_ImmediatePriority,flushSyncCallbackQueueImpl);}else{// Push onto existing queue. Don't need to schedule a callback because\n// we already scheduled one when we created the queue.\nsyncQueue.push(callback);}return fakeCallbackNode;}function cancelCallback(callbackNode){if(callbackNode!==fakeCallbackNode){Scheduler_cancelCallback(callbackNode);}}function flushSyncCallbackQueue(){if(immediateQueueCallbackNode!==null){Scheduler_cancelCallback(immediateQueueCallbackNode);}flushSyncCallbackQueueImpl();}function flushSyncCallbackQueueImpl(){if(!isFlushingSyncQueue&&syncQueue!==null){// Prevent re-entrancy.\nisFlushingSyncQueue=true;var i=0;try{var _isSync=true;var queue=syncQueue;runWithPriority(ImmediatePriority,function(){for(;i<queue.length;i++){var callback=queue[i];do{callback=callback(_isSync);}while(callback!==null);}});syncQueue=null;}catch(error){// If something throws, leave the remaining callbacks on the queue.\nif(syncQueue!==null){syncQueue=syncQueue.slice(i+1);}// Resume flushing in the next tick\nScheduler_scheduleCallback(Scheduler_ImmediatePriority,flushSyncCallbackQueue);throw error;}finally{isFlushingSyncQueue=false;}}}var NoMode=0;var StrictMode=1;// TODO: Remove BatchedMode and ConcurrentMode by reading from the root\n// tag instead\nvar BatchedMode=2;var ConcurrentMode=4;var ProfileMode=8;// Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\nvar MAX_SIGNED_31_BIT_INT=1073741823;var NoWork=0;var Never=1;var Sync=MAX_SIGNED_31_BIT_INT;var Batched=Sync-1;var UNIT_SIZE=10;var MAGIC_NUMBER_OFFSET=Batched-1;// 1 unit of expiration time represents 10ms.\nfunction msToExpirationTime(ms){// Always add an offset so that we don't clash with the magic number for NoWork.\nreturn MAGIC_NUMBER_OFFSET-(ms/UNIT_SIZE|0);}function expirationTimeToMs(expirationTime){return(MAGIC_NUMBER_OFFSET-expirationTime)*UNIT_SIZE;}function ceiling(num,precision){return((num/precision|0)+1)*precision;}function computeExpirationBucket(currentTime,expirationInMs,bucketSizeMs){return MAGIC_NUMBER_OFFSET-ceiling(MAGIC_NUMBER_OFFSET-currentTime+expirationInMs/UNIT_SIZE,bucketSizeMs/UNIT_SIZE);}// TODO: This corresponds to Scheduler's NormalPriority, not LowPriority. Update\n// the names to reflect.\nvar LOW_PRIORITY_EXPIRATION=5000;var LOW_PRIORITY_BATCH_SIZE=250;function computeAsyncExpiration(currentTime){return computeExpirationBucket(currentTime,LOW_PRIORITY_EXPIRATION,LOW_PRIORITY_BATCH_SIZE);}function computeSuspenseExpiration(currentTime,timeoutMs){// TODO: Should we warn if timeoutMs is lower than the normal pri expiration time?\nreturn computeExpirationBucket(currentTime,timeoutMs,LOW_PRIORITY_BATCH_SIZE);}// We intentionally set a higher expiration time for interactive updates in\n// dev than in production.\n//\n// If the main thread is being blocked so long that you hit the expiration,\n// it's a problem that could be solved with better scheduling.\n//\n// People will be more likely to notice this and fix it with the long\n// expiration time in development.\n//\n// In production we opt for better UX at the risk of masking scheduling\n// problems, by expiring fast.\nvar HIGH_PRIORITY_EXPIRATION=500;var HIGH_PRIORITY_BATCH_SIZE=100;function computeInteractiveExpiration(currentTime){return computeExpirationBucket(currentTime,HIGH_PRIORITY_EXPIRATION,HIGH_PRIORITY_BATCH_SIZE);}function inferPriorityFromExpirationTime(currentTime,expirationTime){if(expirationTime===Sync){return ImmediatePriority;}if(expirationTime===Never){return IdlePriority;}var msUntil=expirationTimeToMs(expirationTime)-expirationTimeToMs(currentTime);if(msUntil<=0){return ImmediatePriority;}if(msUntil<=HIGH_PRIORITY_EXPIRATION+HIGH_PRIORITY_BATCH_SIZE){return UserBlockingPriority;}if(msUntil<=LOW_PRIORITY_EXPIRATION+LOW_PRIORITY_BATCH_SIZE){return NormalPriority;}// TODO: Handle LowPriority\n// Assume anything lower has idle priority\nreturn IdlePriority;}/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */function is(x,y){return x===y&&(x!==0||1/x===1/y)||x!==x&&y!==y// eslint-disable-line no-self-compare\n;}var hasOwnProperty=Object.prototype.hasOwnProperty;/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */function shallowEqual(objA,objB){if(is(objA,objB)){return true;}if(typeof objA!=='object'||objA===null||typeof objB!=='object'||objB===null){return false;}var keysA=Object.keys(objA);var keysB=Object.keys(objB);if(keysA.length!==keysB.length){return false;}// Test for A's keys different from B.\nfor(var i=0;i<keysA.length;i++){if(!hasOwnProperty.call(objB,keysA[i])||!is(objA[keysA[i]],objB[keysA[i]])){return false;}}return true;}/**\n * Forked from fbjs/warning:\n * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js\n *\n * Only change is we use console.warn instead of console.error,\n * and do nothing when 'console' is not supported.\n * This really simplifies the code.\n * ---\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */var lowPriorityWarning=function lowPriorityWarning(){};{var printWarning=function printWarning(format){for(var _len=arguments.length,args=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}var argIndex=0;var message='Warning: '+format.replace(/%s/g,function(){return args[argIndex++];});if(typeof console!=='undefined'){console.warn(message);}try{// --- Welcome to debugging React ---\n// This error was thrown as a convenience so that you can use this stack\n// to find the callsite that caused this warning to fire.\nthrow new Error(message);}catch(x){}};lowPriorityWarning=function lowPriorityWarning(condition,format){if(format===undefined){throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning '+'message argument');}if(!condition){for(var _len2=arguments.length,args=Array(_len2>2?_len2-2:0),_key2=2;_key2<_len2;_key2++){args[_key2-2]=arguments[_key2];}printWarning.apply(undefined,[format].concat(args));}};}var lowPriorityWarning$1=lowPriorityWarning;var ReactStrictModeWarnings={recordUnsafeLifecycleWarnings:function recordUnsafeLifecycleWarnings(fiber,instance){},flushPendingUnsafeLifecycleWarnings:function flushPendingUnsafeLifecycleWarnings(){},recordLegacyContextWarning:function recordLegacyContextWarning(fiber,instance){},flushLegacyContextWarning:function flushLegacyContextWarning(){},discardPendingWarnings:function discardPendingWarnings(){}};{var findStrictRoot=function findStrictRoot(fiber){var maybeStrictRoot=null;var node=fiber;while(node!==null){if(node.mode&StrictMode){maybeStrictRoot=node;}node=node.return;}return maybeStrictRoot;};var setToSortedString=function setToSortedString(set){var array=[];set.forEach(function(value){array.push(value);});return array.sort().join(', ');};var pendingComponentWillMountWarnings=[];var pendingUNSAFE_ComponentWillMountWarnings=[];var pendingComponentWillReceivePropsWarnings=[];var pendingUNSAFE_ComponentWillReceivePropsWarnings=[];var pendingComponentWillUpdateWarnings=[];var pendingUNSAFE_ComponentWillUpdateWarnings=[];// Tracks components we have already warned about.\nvar didWarnAboutUnsafeLifecycles=new Set();ReactStrictModeWarnings.recordUnsafeLifecycleWarnings=function(fiber,instance){// Dedup strategy: Warn once per component.\nif(didWarnAboutUnsafeLifecycles.has(fiber.type)){return;}if(typeof instance.componentWillMount==='function'&&// Don't warn about react-lifecycles-compat polyfilled components.\ninstance.componentWillMount.__suppressDeprecationWarning!==true){pendingComponentWillMountWarnings.push(fiber);}if(fiber.mode&StrictMode&&typeof instance.UNSAFE_componentWillMount==='function'){pendingUNSAFE_ComponentWillMountWarnings.push(fiber);}if(typeof instance.componentWillReceiveProps==='function'&&instance.componentWillReceiveProps.__suppressDeprecationWarning!==true){pendingComponentWillReceivePropsWarnings.push(fiber);}if(fiber.mode&StrictMode&&typeof instance.UNSAFE_componentWillReceiveProps==='function'){pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);}if(typeof instance.componentWillUpdate==='function'&&instance.componentWillUpdate.__suppressDeprecationWarning!==true){pendingComponentWillUpdateWarnings.push(fiber);}if(fiber.mode&StrictMode&&typeof instance.UNSAFE_componentWillUpdate==='function'){pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);}};ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings=function(){// We do an initial pass to gather component names\nvar componentWillMountUniqueNames=new Set();if(pendingComponentWillMountWarnings.length>0){pendingComponentWillMountWarnings.forEach(function(fiber){componentWillMountUniqueNames.add(getComponentName(fiber.type)||'Component');didWarnAboutUnsafeLifecycles.add(fiber.type);});pendingComponentWillMountWarnings=[];}var UNSAFE_componentWillMountUniqueNames=new Set();if(pendingUNSAFE_ComponentWillMountWarnings.length>0){pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber){UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type)||'Component');didWarnAboutUnsafeLifecycles.add(fiber.type);});pendingUNSAFE_ComponentWillMountWarnings=[];}var componentWillReceivePropsUniqueNames=new Set();if(pendingComponentWillReceivePropsWarnings.length>0){pendingComponentWillReceivePropsWarnings.forEach(function(fiber){componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type)||'Component');didWarnAboutUnsafeLifecycles.add(fiber.type);});pendingComponentWillReceivePropsWarnings=[];}var UNSAFE_componentWillReceivePropsUniqueNames=new Set();if(pendingUNSAFE_ComponentWillReceivePropsWarnings.length>0){pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber){UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type)||'Component');didWarnAboutUnsafeLifecycles.add(fiber.type);});pendingUNSAFE_ComponentWillReceivePropsWarnings=[];}var componentWillUpdateUniqueNames=new Set();if(pendingComponentWillUpdateWarnings.length>0){pendingComponentWillUpdateWarnings.forEach(function(fiber){componentWillUpdateUniqueNames.add(getComponentName(fiber.type)||'Component');didWarnAboutUnsafeLifecycles.add(fiber.type);});pendingComponentWillUpdateWarnings=[];}var UNSAFE_componentWillUpdateUniqueNames=new Set();if(pendingUNSAFE_ComponentWillUpdateWarnings.length>0){pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber){UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type)||'Component');didWarnAboutUnsafeLifecycles.add(fiber.type);});pendingUNSAFE_ComponentWillUpdateWarnings=[];}// Finally, we flush all the warnings\n// UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\nif(UNSAFE_componentWillMountUniqueNames.size>0){var sortedNames=setToSortedString(UNSAFE_componentWillMountUniqueNames);warningWithoutStack$1(false,'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. '+'See https://fb.me/react-async-component-lifecycle-hooks for details.\\n\\n'+'* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n'+'\\nPlease update the following components: %s',sortedNames);}if(UNSAFE_componentWillReceivePropsUniqueNames.size>0){var _sortedNames=setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);warningWithoutStack$1(false,'Using UNSAFE_componentWillReceiveProps in strict mode is not recommended '+'and may indicate bugs in your code. '+'See https://fb.me/react-async-component-lifecycle-hooks for details.\\n\\n'+'* Move data fetching code or side effects to componentDidUpdate.\\n'+\"* If you're updating state whenever props change, \"+'refactor your code to use memoization techniques or move it to '+'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\\n'+'\\nPlease update the following components: %s',_sortedNames);}if(UNSAFE_componentWillUpdateUniqueNames.size>0){var _sortedNames2=setToSortedString(UNSAFE_componentWillUpdateUniqueNames);warningWithoutStack$1(false,'Using UNSAFE_componentWillUpdate in strict mode is not recommended '+'and may indicate bugs in your code. '+'See https://fb.me/react-async-component-lifecycle-hooks for details.\\n\\n'+'* Move data fetching code or side effects to componentDidUpdate.\\n'+'\\nPlease update the following components: %s',_sortedNames2);}if(componentWillMountUniqueNames.size>0){var _sortedNames3=setToSortedString(componentWillMountUniqueNames);lowPriorityWarning$1(false,'componentWillMount has been renamed, and is not recommended for use. '+'See https://fb.me/react-async-component-lifecycle-hooks for details.\\n\\n'+'* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n'+'* Rename componentWillMount to UNSAFE_componentWillMount to suppress '+'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. '+'To rename all deprecated lifecycles to their new names, you can run '+'`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n'+'\\nPlease update the following components: %s',_sortedNames3);}if(componentWillReceivePropsUniqueNames.size>0){var _sortedNames4=setToSortedString(componentWillReceivePropsUniqueNames);lowPriorityWarning$1(false,'componentWillReceiveProps has been renamed, and is not recommended for use. '+'See https://fb.me/react-async-component-lifecycle-hooks for details.\\n\\n'+'* Move data fetching code or side effects to componentDidUpdate.\\n'+\"* If you're updating state whenever props change, refactor your \"+'code to use memoization techniques or move it to '+'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\\n'+'* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress '+'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. '+'To rename all deprecated lifecycles to their new names, you can run '+'`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n'+'\\nPlease update the following components: %s',_sortedNames4);}if(componentWillUpdateUniqueNames.size>0){var _sortedNames5=setToSortedString(componentWillUpdateUniqueNames);lowPriorityWarning$1(false,'componentWillUpdate has been renamed, and is not recommended for use. '+'See https://fb.me/react-async-component-lifecycle-hooks for details.\\n\\n'+'* Move data fetching code or side effects to componentDidUpdate.\\n'+'* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress '+'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. '+'To rename all deprecated lifecycles to their new names, you can run '+'`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n'+'\\nPlease update the following components: %s',_sortedNames5);}};var pendingLegacyContextWarning=new Map();// Tracks components we have already warned about.\nvar didWarnAboutLegacyContext=new Set();ReactStrictModeWarnings.recordLegacyContextWarning=function(fiber,instance){var strictRoot=findStrictRoot(fiber);if(strictRoot===null){warningWithoutStack$1(false,'Expected to find a StrictMode component in a strict mode tree. '+'This error is likely caused by a bug in React. Please file an issue.');return;}// Dedup strategy: Warn once per component.\nif(didWarnAboutLegacyContext.has(fiber.type)){return;}var warningsForRoot=pendingLegacyContextWarning.get(strictRoot);if(fiber.type.contextTypes!=null||fiber.type.childContextTypes!=null||instance!==null&&typeof instance.getChildContext==='function'){if(warningsForRoot===undefined){warningsForRoot=[];pendingLegacyContextWarning.set(strictRoot,warningsForRoot);}warningsForRoot.push(fiber);}};ReactStrictModeWarnings.flushLegacyContextWarning=function(){pendingLegacyContextWarning.forEach(function(fiberArray,strictRoot){var uniqueNames=new Set();fiberArray.forEach(function(fiber){uniqueNames.add(getComponentName(fiber.type)||'Component');didWarnAboutLegacyContext.add(fiber.type);});var sortedNames=setToSortedString(uniqueNames);var strictRootComponentStack=getStackByFiberInDevAndProd(strictRoot);warningWithoutStack$1(false,'Legacy context API has been detected within a strict-mode tree: %s'+'\\n\\nThe old API will be supported in all 16.x releases, but applications '+'using it should migrate to the new version.'+'\\n\\nPlease update the following components: %s'+'\\n\\nLearn more about this warning here:'+'\\nhttps://fb.me/react-legacy-context',strictRootComponentStack,sortedNames);});};ReactStrictModeWarnings.discardPendingWarnings=function(){pendingComponentWillMountWarnings=[];pendingUNSAFE_ComponentWillMountWarnings=[];pendingComponentWillReceivePropsWarnings=[];pendingUNSAFE_ComponentWillReceivePropsWarnings=[];pendingComponentWillUpdateWarnings=[];pendingUNSAFE_ComponentWillUpdateWarnings=[];pendingLegacyContextWarning=new Map();};}// Resolves type to a family.\n// Used by React Refresh runtime through DevTools Global Hook.\nvar resolveFamily=null;// $FlowFixMe Flow gets confused by a WeakSet feature check below.\nvar failedBoundaries=null;var setRefreshHandler=function setRefreshHandler(handler){{resolveFamily=handler;}};function resolveFunctionForHotReloading(type){{if(resolveFamily===null){// Hot reloading is disabled.\nreturn type;}var family=resolveFamily(type);if(family===undefined){return type;}// Use the latest known implementation.\nreturn family.current;}}function resolveClassForHotReloading(type){// No implementation differences.\nreturn resolveFunctionForHotReloading(type);}function resolveForwardRefForHotReloading(type){{if(resolveFamily===null){// Hot reloading is disabled.\nreturn type;}var family=resolveFamily(type);if(family===undefined){// Check if we're dealing with a real forwardRef. Don't want to crash early.\nif(type!==null&&type!==undefined&&typeof type.render==='function'){// ForwardRef is special because its resolved .type is an object,\n// but it's possible that we only have its inner render function in the map.\n// If that inner render function is different, we'll build a new forwardRef type.\nvar currentRender=resolveFunctionForHotReloading(type.render);if(type.render!==currentRender){var syntheticType={$$typeof:REACT_FORWARD_REF_TYPE,render:currentRender};if(type.displayName!==undefined){syntheticType.displayName=type.displayName;}return syntheticType;}}return type;}// Use the latest known implementation.\nreturn family.current;}}function isCompatibleFamilyForHotReloading(fiber,element){{if(resolveFamily===null){// Hot reloading is disabled.\nreturn false;}var prevType=fiber.elementType;var nextType=element.type;// If we got here, we know types aren't === equal.\nvar needsCompareFamilies=false;var $$typeofNextType=typeof nextType==='object'&&nextType!==null?nextType.$$typeof:null;switch(fiber.tag){case ClassComponent:{if(typeof nextType==='function'){needsCompareFamilies=true;}break;}case FunctionComponent:{if(typeof nextType==='function'){needsCompareFamilies=true;}else if($$typeofNextType===REACT_LAZY_TYPE){// We don't know the inner type yet.\n// We're going to assume that the lazy inner type is stable,\n// and so it is sufficient to avoid reconciling it away.\n// We're not going to unwrap or actually use the new lazy type.\nneedsCompareFamilies=true;}break;}case ForwardRef:{if($$typeofNextType===REACT_FORWARD_REF_TYPE){needsCompareFamilies=true;}else if($$typeofNextType===REACT_LAZY_TYPE){needsCompareFamilies=true;}break;}case MemoComponent:case SimpleMemoComponent:{if($$typeofNextType===REACT_MEMO_TYPE){// TODO: if it was but can no longer be simple,\n// we shouldn't set this.\nneedsCompareFamilies=true;}else if($$typeofNextType===REACT_LAZY_TYPE){needsCompareFamilies=true;}break;}default:return false;}// Check if both types have a family and it's the same one.\nif(needsCompareFamilies){// Note: memo() and forwardRef() we'll compare outer rather than inner type.\n// This means both of them need to be registered to preserve state.\n// If we unwrapped and compared the inner types for wrappers instead,\n// then we would risk falsely saying two separate memo(Foo)\n// calls are equivalent because they wrap the same Foo function.\nvar prevFamily=resolveFamily(prevType);if(prevFamily!==undefined&&prevFamily===resolveFamily(nextType)){return true;}}return false;}}function markFailedErrorBoundaryForHotReloading(fiber){{if(resolveFamily===null){// Hot reloading is disabled.\nreturn;}if(typeof WeakSet!=='function'){return;}if(failedBoundaries===null){failedBoundaries=new WeakSet();}failedBoundaries.add(fiber);}}var scheduleRefresh=function scheduleRefresh(root,update){{if(resolveFamily===null){// Hot reloading is disabled.\nreturn;}var _staleFamilies=update.staleFamilies,_updatedFamilies=update.updatedFamilies;flushPassiveEffects();flushSync(function(){scheduleFibersWithFamiliesRecursively(root.current,_updatedFamilies,_staleFamilies);});}};var scheduleRoot=function scheduleRoot(root,element){{if(root.context!==emptyContextObject){// Super edge case: root has a legacy _renderSubtree context\n// but we don't know the parentComponent so we can't pass it.\n// Just ignore. We'll delete this with _renderSubtree code path later.\nreturn;}flushPassiveEffects();updateContainerAtExpirationTime(element,root,null,Sync,null);}};function scheduleFibersWithFamiliesRecursively(fiber,updatedFamilies,staleFamilies){{var alternate=fiber.alternate,child=fiber.child,sibling=fiber.sibling,tag=fiber.tag,type=fiber.type;var candidateType=null;switch(tag){case FunctionComponent:case SimpleMemoComponent:case ClassComponent:candidateType=type;break;case ForwardRef:candidateType=type.render;break;default:break;}if(resolveFamily===null){throw new Error('Expected resolveFamily to be set during hot reload.');}var needsRender=false;var needsRemount=false;if(candidateType!==null){var family=resolveFamily(candidateType);if(family!==undefined){if(staleFamilies.has(family)){needsRemount=true;}else if(updatedFamilies.has(family)){needsRender=true;}}}if(failedBoundaries!==null){if(failedBoundaries.has(fiber)||alternate!==null&&failedBoundaries.has(alternate)){needsRemount=true;}}if(needsRemount){fiber._debugNeedsRemount=true;}if(needsRemount||needsRender){scheduleWork(fiber,Sync);}if(child!==null&&!needsRemount){scheduleFibersWithFamiliesRecursively(child,updatedFamilies,staleFamilies);}if(sibling!==null){scheduleFibersWithFamiliesRecursively(sibling,updatedFamilies,staleFamilies);}}}var findHostInstancesForRefresh=function findHostInstancesForRefresh(root,families){{var hostInstances=new Set();var types=new Set(families.map(function(family){return family.current;}));findHostInstancesForMatchingFibersRecursively(root.current,types,hostInstances);return hostInstances;}};function findHostInstancesForMatchingFibersRecursively(fiber,types,hostInstances){{var child=fiber.child,sibling=fiber.sibling,tag=fiber.tag,type=fiber.type;var candidateType=null;switch(tag){case FunctionComponent:case SimpleMemoComponent:case ClassComponent:candidateType=type;break;case ForwardRef:candidateType=type.render;break;default:break;}var didMatch=false;if(candidateType!==null){if(types.has(candidateType)){didMatch=true;}}if(didMatch){// We have a match. This only drills down to the closest host components.\n// There's no need to search deeper because for the purpose of giving\n// visual feedback, \"flashing\" outermost parent rectangles is sufficient.\nfindHostInstancesForFiberShallowly(fiber,hostInstances);}else{// If there's no match, maybe there will be one further down in the child tree.\nif(child!==null){findHostInstancesForMatchingFibersRecursively(child,types,hostInstances);}}if(sibling!==null){findHostInstancesForMatchingFibersRecursively(sibling,types,hostInstances);}}}function findHostInstancesForFiberShallowly(fiber,hostInstances){{var foundHostInstances=findChildHostInstancesForFiberShallowly(fiber,hostInstances);if(foundHostInstances){return;}// If we didn't find any host children, fallback to closest host parent.\nvar node=fiber;while(true){switch(node.tag){case HostComponent:hostInstances.add(node.stateNode);return;case HostPortal:hostInstances.add(node.stateNode.containerInfo);return;case HostRoot:hostInstances.add(node.stateNode.containerInfo);return;}if(node.return===null){throw new Error('Expected to reach root first.');}node=node.return;}}}function findChildHostInstancesForFiberShallowly(fiber,hostInstances){{var node=fiber;var foundHostInstances=false;while(true){if(node.tag===HostComponent){// We got a match.\nfoundHostInstances=true;hostInstances.add(node.stateNode);// There may still be more, so keep searching.\n}else if(node.child!==null){node.child.return=node;node=node.child;continue;}if(node===fiber){return foundHostInstances;}while(node.sibling===null){if(node.return===null||node.return===fiber){return foundHostInstances;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}}return false;}function resolveDefaultProps(Component,baseProps){if(Component&&Component.defaultProps){// Resolve default props. Taken from ReactElement\nvar props=_assign({},baseProps);var defaultProps=Component.defaultProps;for(var propName in defaultProps){if(props[propName]===undefined){props[propName]=defaultProps[propName];}}return props;}return baseProps;}function readLazyComponentType(lazyComponent){var status=lazyComponent._status;var result=lazyComponent._result;switch(status){case Resolved:{var Component=result;return Component;}case Rejected:{var error=result;throw error;}case Pending:{var thenable=result;throw thenable;}default:{lazyComponent._status=Pending;var ctor=lazyComponent._ctor;var _thenable=ctor();_thenable.then(function(moduleObject){if(lazyComponent._status===Pending){var defaultExport=moduleObject.default;{if(defaultExport===undefined){warning$1(false,'lazy: Expected the result of a dynamic import() call. '+'Instead received: %s\\n\\nYour code should look like: \\n  '+\"const MyComponent = lazy(() => import('./MyComponent'))\",moduleObject);}}lazyComponent._status=Resolved;lazyComponent._result=defaultExport;}},function(error){if(lazyComponent._status===Pending){lazyComponent._status=Rejected;lazyComponent._result=error;}});// Handle synchronous thenables.\nswitch(lazyComponent._status){case Resolved:return lazyComponent._result;case Rejected:throw lazyComponent._result;}lazyComponent._result=_thenable;throw _thenable;}}}var valueCursor=createCursor(null);var rendererSigil=void 0;{// Use this to detect multiple renderers using the same context\nrendererSigil={};}var currentlyRenderingFiber=null;var lastContextDependency=null;var lastContextWithAllBitsObserved=null;var isDisallowedContextReadInDEV=false;function resetContextDependencies(){// This is called right before React yields execution, to ensure `readContext`\n// cannot be called outside the render phase.\ncurrentlyRenderingFiber=null;lastContextDependency=null;lastContextWithAllBitsObserved=null;{isDisallowedContextReadInDEV=false;}}function enterDisallowedContextReadInDEV(){{isDisallowedContextReadInDEV=true;}}function exitDisallowedContextReadInDEV(){{isDisallowedContextReadInDEV=false;}}function pushProvider(providerFiber,nextValue){var context=providerFiber.type._context;if(isPrimaryRenderer){push(valueCursor,context._currentValue,providerFiber);context._currentValue=nextValue;{!(context._currentRenderer===undefined||context._currentRenderer===null||context._currentRenderer===rendererSigil)?warningWithoutStack$1(false,'Detected multiple renderers concurrently rendering the '+'same context provider. This is currently unsupported.'):void 0;context._currentRenderer=rendererSigil;}}else{push(valueCursor,context._currentValue2,providerFiber);context._currentValue2=nextValue;{!(context._currentRenderer2===undefined||context._currentRenderer2===null||context._currentRenderer2===rendererSigil)?warningWithoutStack$1(false,'Detected multiple renderers concurrently rendering the '+'same context provider. This is currently unsupported.'):void 0;context._currentRenderer2=rendererSigil;}}}function popProvider(providerFiber){var currentValue=valueCursor.current;pop(valueCursor,providerFiber);var context=providerFiber.type._context;if(isPrimaryRenderer){context._currentValue=currentValue;}else{context._currentValue2=currentValue;}}function calculateChangedBits(context,newValue,oldValue){if(is(oldValue,newValue)){// No change\nreturn 0;}else{var changedBits=typeof context._calculateChangedBits==='function'?context._calculateChangedBits(oldValue,newValue):MAX_SIGNED_31_BIT_INT;{!((changedBits&MAX_SIGNED_31_BIT_INT)===changedBits)?warning$1(false,'calculateChangedBits: Expected the return value to be a '+'31-bit integer. Instead received: %s',changedBits):void 0;}return changedBits|0;}}function scheduleWorkOnParentPath(parent,renderExpirationTime){// Update the child expiration time of all the ancestors, including\n// the alternates.\nvar node=parent;while(node!==null){var alternate=node.alternate;if(node.childExpirationTime<renderExpirationTime){node.childExpirationTime=renderExpirationTime;if(alternate!==null&&alternate.childExpirationTime<renderExpirationTime){alternate.childExpirationTime=renderExpirationTime;}}else if(alternate!==null&&alternate.childExpirationTime<renderExpirationTime){alternate.childExpirationTime=renderExpirationTime;}else{// Neither alternate was updated, which means the rest of the\n// ancestor path already has sufficient priority.\nbreak;}node=node.return;}}function propagateContextChange(workInProgress,context,changedBits,renderExpirationTime){var fiber=workInProgress.child;if(fiber!==null){// Set the return pointer of the child to the work-in-progress fiber.\nfiber.return=workInProgress;}while(fiber!==null){var nextFiber=void 0;// Visit this fiber.\nvar list=fiber.dependencies;if(list!==null){nextFiber=fiber.child;var dependency=list.firstContext;while(dependency!==null){// Check if the context matches.\nif(dependency.context===context&&(dependency.observedBits&changedBits)!==0){// Match! Schedule an update on this fiber.\nif(fiber.tag===ClassComponent){// Schedule a force update on the work-in-progress.\nvar update=createUpdate(renderExpirationTime,null);update.tag=ForceUpdate;// TODO: Because we don't have a work-in-progress, this will add the\n// update to the current fiber, too, which means it will persist even if\n// this render is thrown away. Since it's a race condition, not sure it's\n// worth fixing.\nenqueueUpdate(fiber,update);}if(fiber.expirationTime<renderExpirationTime){fiber.expirationTime=renderExpirationTime;}var alternate=fiber.alternate;if(alternate!==null&&alternate.expirationTime<renderExpirationTime){alternate.expirationTime=renderExpirationTime;}scheduleWorkOnParentPath(fiber.return,renderExpirationTime);// Mark the expiration time on the list, too.\nif(list.expirationTime<renderExpirationTime){list.expirationTime=renderExpirationTime;}// Since we already found a match, we can stop traversing the\n// dependency list.\nbreak;}dependency=dependency.next;}}else if(fiber.tag===ContextProvider){// Don't scan deeper if this is a matching provider\nnextFiber=fiber.type===workInProgress.type?null:fiber.child;}else if(enableSuspenseServerRenderer&&fiber.tag===DehydratedSuspenseComponent){// If a dehydrated suspense component is in this subtree, we don't know\n// if it will have any context consumers in it. The best we can do is\n// mark it as having updates on its children.\nif(fiber.expirationTime<renderExpirationTime){fiber.expirationTime=renderExpirationTime;}var _alternate=fiber.alternate;if(_alternate!==null&&_alternate.expirationTime<renderExpirationTime){_alternate.expirationTime=renderExpirationTime;}// This is intentionally passing this fiber as the parent\n// because we want to schedule this fiber as having work\n// on its children. We'll use the childExpirationTime on\n// this fiber to indicate that a context has changed.\nscheduleWorkOnParentPath(fiber,renderExpirationTime);nextFiber=fiber.sibling;}else{// Traverse down.\nnextFiber=fiber.child;}if(nextFiber!==null){// Set the return pointer of the child to the work-in-progress fiber.\nnextFiber.return=fiber;}else{// No child. Traverse to next sibling.\nnextFiber=fiber;while(nextFiber!==null){if(nextFiber===workInProgress){// We're back to the root of this subtree. Exit.\nnextFiber=null;break;}var sibling=nextFiber.sibling;if(sibling!==null){// Set the return pointer of the sibling to the work-in-progress fiber.\nsibling.return=nextFiber.return;nextFiber=sibling;break;}// No more siblings. Traverse up.\nnextFiber=nextFiber.return;}}fiber=nextFiber;}}function prepareToReadContext(workInProgress,renderExpirationTime){currentlyRenderingFiber=workInProgress;lastContextDependency=null;lastContextWithAllBitsObserved=null;var dependencies=workInProgress.dependencies;if(dependencies!==null){var firstContext=dependencies.firstContext;if(firstContext!==null){if(dependencies.expirationTime>=renderExpirationTime){// Context list has a pending update. Mark that this fiber performed work.\nmarkWorkInProgressReceivedUpdate();}// Reset the work-in-progress list\ndependencies.firstContext=null;}}}function _readContext(context,observedBits){{// This warning would fire if you read context inside a Hook like useMemo.\n// Unlike the class check below, it's not enforced in production for perf.\n!!isDisallowedContextReadInDEV?warning$1(false,'Context can only be read while React is rendering. '+'In classes, you can read it in the render method or getDerivedStateFromProps. '+'In function components, you can read it directly in the function body, but not '+'inside Hooks like useReducer() or useMemo().'):void 0;}if(lastContextWithAllBitsObserved===context){// Nothing to do. We already observe everything in this context.\n}else if(observedBits===false||observedBits===0){// Do not observe any updates.\n}else{var resolvedObservedBits=void 0;// Avoid deopting on observable arguments or heterogeneous types.\nif(typeof observedBits!=='number'||observedBits===MAX_SIGNED_31_BIT_INT){// Observe all updates.\nlastContextWithAllBitsObserved=context;resolvedObservedBits=MAX_SIGNED_31_BIT_INT;}else{resolvedObservedBits=observedBits;}var contextItem={context:context,observedBits:resolvedObservedBits,next:null};if(lastContextDependency===null){(function(){if(!(currentlyRenderingFiber!==null)){{throw ReactError(Error('Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().'));}}})();// This is the first dependency for this component. Create a new list.\nlastContextDependency=contextItem;currentlyRenderingFiber.dependencies={expirationTime:NoWork,firstContext:contextItem,responders:null};}else{// Append a new context item.\nlastContextDependency=lastContextDependency.next=contextItem;}}return isPrimaryRenderer?context._currentValue:context._currentValue2;}// UpdateQueue is a linked list of prioritized updates.\n//\n// Like fibers, update queues come in pairs: a current queue, which represents\n// the visible state of the screen, and a work-in-progress queue, which can be\n// mutated and processed asynchronously before it is committed \\u2014 a form of\n// double buffering. If a work-in-progress render is discarded before finishing,\n// we create a new work-in-progress by cloning the current queue.\n//\n// Both queues share a persistent, singly-linked list structure. To schedule an\n// update, we append it to the end of both queues. Each queue maintains a\n// pointer to first update in the persistent list that hasn't been processed.\n// The work-in-progress pointer always has a position equal to or greater than\n// the current queue, since we always work on that one. The current queue's\n// pointer is only updated during the commit phase, when we swap in the\n// work-in-progress.\n//\n// For example:\n//\n//   Current pointer:           A - B - C - D - E - F\n//   Work-in-progress pointer:              D - E - F\n//                                          ^\n//                                          The work-in-progress queue has\n//                                          processed more updates than current.\n//\n// The reason we append to both queues is because otherwise we might drop\n// updates without ever processing them. For example, if we only add updates to\n// the work-in-progress queue, some updates could be lost whenever a work-in\n// -progress render restarts by cloning from current. Similarly, if we only add\n// updates to the current queue, the updates will be lost whenever an already\n// in-progress queue commits and swaps with the current queue. However, by\n// adding to both queues, we guarantee that the update will be part of the next\n// work-in-progress. (And because the work-in-progress queue becomes the\n// current queue once it commits, there's no danger of applying the same\n// update twice.)\n//\n// Prioritization\n// --------------\n//\n// Updates are not sorted by priority, but by insertion; new updates are always\n// appended to the end of the list.\n//\n// The priority is still important, though. When processing the update queue\n// during the render phase, only the updates with sufficient priority are\n// included in the result. If we skip an update because it has insufficient\n// priority, it remains in the queue to be processed later, during a lower\n// priority render. Crucially, all updates subsequent to a skipped update also\n// remain in the queue *regardless of their priority*. That means high priority\n// updates are sometimes processed twice, at two separate priorities. We also\n// keep track of a base state, that represents the state before the first\n// update in the queue is applied.\n//\n// For example:\n//\n//   Given a base state of '', and the following queue of updates\n//\n//     A1 - B2 - C1 - D2\n//\n//   where the number indicates the priority, and the update is applied to the\n//   previous state by appending a letter, React will process these updates as\n//   two separate renders, one per distinct priority level:\n//\n//   First render, at priority 1:\n//     Base state: ''\n//     Updates: [A1, C1]\n//     Result state: 'AC'\n//\n//   Second render, at priority 2:\n//     Base state: 'A'            <-  The base state does not include C1,\n//                                    because B2 was skipped.\n//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2\n//     Result state: 'ABCD'\n//\n// Because we process updates in insertion order, and rebase high priority\n// updates when preceding updates are skipped, the final result is deterministic\n// regardless of priority. Intermediate state may vary according to system\n// resources, but the final state is always the same.\nvar UpdateState=0;var ReplaceState=1;var ForceUpdate=2;var CaptureUpdate=3;// Global state that is reset at the beginning of calling `processUpdateQueue`.\n// It should only be read right after calling `processUpdateQueue`, via\n// `checkHasForceUpdateAfterProcessing`.\nvar hasForceUpdate=false;var didWarnUpdateInsideUpdate=void 0;var currentlyProcessingQueue=void 0;{didWarnUpdateInsideUpdate=false;currentlyProcessingQueue=null;}function createUpdateQueue(baseState){var queue={baseState:baseState,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null};return queue;}function cloneUpdateQueue(currentQueue){var queue={baseState:currentQueue.baseState,firstUpdate:currentQueue.firstUpdate,lastUpdate:currentQueue.lastUpdate,// TODO: With resuming, if we bail out and resuse the child tree, we should\n// keep these effects.\nfirstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null};return queue;}function createUpdate(expirationTime,suspenseConfig){var update={expirationTime:expirationTime,suspenseConfig:suspenseConfig,tag:UpdateState,payload:null,callback:null,next:null,nextEffect:null};{update.priority=getCurrentPriorityLevel();}return update;}function appendUpdateToQueue(queue,update){// Append the update to the end of the list.\nif(queue.lastUpdate===null){// Queue is empty\nqueue.firstUpdate=queue.lastUpdate=update;}else{queue.lastUpdate.next=update;queue.lastUpdate=update;}}function enqueueUpdate(fiber,update){// Update queues are created lazily.\nvar alternate=fiber.alternate;var queue1=void 0;var queue2=void 0;if(alternate===null){// There's only one fiber.\nqueue1=fiber.updateQueue;queue2=null;if(queue1===null){queue1=fiber.updateQueue=createUpdateQueue(fiber.memoizedState);}}else{// There are two owners.\nqueue1=fiber.updateQueue;queue2=alternate.updateQueue;if(queue1===null){if(queue2===null){// Neither fiber has an update queue. Create new ones.\nqueue1=fiber.updateQueue=createUpdateQueue(fiber.memoizedState);queue2=alternate.updateQueue=createUpdateQueue(alternate.memoizedState);}else{// Only one fiber has an update queue. Clone to create a new one.\nqueue1=fiber.updateQueue=cloneUpdateQueue(queue2);}}else{if(queue2===null){// Only one fiber has an update queue. Clone to create a new one.\nqueue2=alternate.updateQueue=cloneUpdateQueue(queue1);}else{// Both owners have an update queue.\n}}}if(queue2===null||queue1===queue2){// There's only a single queue.\nappendUpdateToQueue(queue1,update);}else{// There are two queues. We need to append the update to both queues,\n// while accounting for the persistent structure of the list \\u2014 we don't\n// want the same update to be added multiple times.\nif(queue1.lastUpdate===null||queue2.lastUpdate===null){// One of the queues is not empty. We must add the update to both queues.\nappendUpdateToQueue(queue1,update);appendUpdateToQueue(queue2,update);}else{// Both queues are non-empty. The last update is the same in both lists,\n// because of structural sharing. So, only append to one of the lists.\nappendUpdateToQueue(queue1,update);// But we still need to update the `lastUpdate` pointer of queue2.\nqueue2.lastUpdate=update;}}{if(fiber.tag===ClassComponent&&(currentlyProcessingQueue===queue1||queue2!==null&&currentlyProcessingQueue===queue2)&&!didWarnUpdateInsideUpdate){warningWithoutStack$1(false,'An update (setState, replaceState, or forceUpdate) was scheduled '+'from inside an update function. Update functions should be pure, '+'with zero side-effects. Consider using componentDidUpdate or a '+'callback.');didWarnUpdateInsideUpdate=true;}}}function enqueueCapturedUpdate(workInProgress,update){// Captured updates go into a separate list, and only on the work-in-\n// progress queue.\nvar workInProgressQueue=workInProgress.updateQueue;if(workInProgressQueue===null){workInProgressQueue=workInProgress.updateQueue=createUpdateQueue(workInProgress.memoizedState);}else{// TODO: I put this here rather than createWorkInProgress so that we don't\n// clone the queue unnecessarily. There's probably a better way to\n// structure this.\nworkInProgressQueue=ensureWorkInProgressQueueIsAClone(workInProgress,workInProgressQueue);}// Append the update to the end of the list.\nif(workInProgressQueue.lastCapturedUpdate===null){// This is the first render phase update\nworkInProgressQueue.firstCapturedUpdate=workInProgressQueue.lastCapturedUpdate=update;}else{workInProgressQueue.lastCapturedUpdate.next=update;workInProgressQueue.lastCapturedUpdate=update;}}function ensureWorkInProgressQueueIsAClone(workInProgress,queue){var current=workInProgress.alternate;if(current!==null){// If the work-in-progress queue is equal to the current queue,\n// we need to clone it first.\nif(queue===current.updateQueue){queue=workInProgress.updateQueue=cloneUpdateQueue(queue);}}return queue;}function getStateFromUpdate(workInProgress,queue,update,prevState,nextProps,instance){switch(update.tag){case ReplaceState:{var _payload=update.payload;if(typeof _payload==='function'){// Updater function\n{enterDisallowedContextReadInDEV();if(debugRenderPhaseSideEffects||debugRenderPhaseSideEffectsForStrictMode&&workInProgress.mode&StrictMode){_payload.call(instance,prevState,nextProps);}}var nextState=_payload.call(instance,prevState,nextProps);{exitDisallowedContextReadInDEV();}return nextState;}// State object\nreturn _payload;}case CaptureUpdate:{workInProgress.effectTag=workInProgress.effectTag&~ShouldCapture|DidCapture;}// Intentional fallthrough\ncase UpdateState:{var _payload2=update.payload;var partialState=void 0;if(typeof _payload2==='function'){// Updater function\n{enterDisallowedContextReadInDEV();if(debugRenderPhaseSideEffects||debugRenderPhaseSideEffectsForStrictMode&&workInProgress.mode&StrictMode){_payload2.call(instance,prevState,nextProps);}}partialState=_payload2.call(instance,prevState,nextProps);{exitDisallowedContextReadInDEV();}}else{// Partial state object\npartialState=_payload2;}if(partialState===null||partialState===undefined){// Null and undefined are treated as no-ops.\nreturn prevState;}// Merge the partial state and the previous state.\nreturn _assign({},prevState,partialState);}case ForceUpdate:{hasForceUpdate=true;return prevState;}}return prevState;}function processUpdateQueue(workInProgress,queue,props,instance,renderExpirationTime){hasForceUpdate=false;queue=ensureWorkInProgressQueueIsAClone(workInProgress,queue);{currentlyProcessingQueue=queue;}// These values may change as we process the queue.\nvar newBaseState=queue.baseState;var newFirstUpdate=null;var newExpirationTime=NoWork;// Iterate through the list of updates to compute the result.\nvar update=queue.firstUpdate;var resultState=newBaseState;while(update!==null){var updateExpirationTime=update.expirationTime;if(updateExpirationTime<renderExpirationTime){// This update does not have sufficient priority. Skip it.\nif(newFirstUpdate===null){// This is the first skipped update. It will be the first update in\n// the new list.\nnewFirstUpdate=update;// Since this is the first update that was skipped, the current result\n// is the new base state.\nnewBaseState=resultState;}// Since this update will remain in the list, update the remaining\n// expiration time.\nif(newExpirationTime<updateExpirationTime){newExpirationTime=updateExpirationTime;}}else{// This update does have sufficient priority.\n// Mark the event time of this update as relevant to this render pass.\n// TODO: This should ideally use the true event time of this update rather than\n// its priority which is a derived and not reverseable value.\n// TODO: We should skip this update if it was already committed but currently\n// we have no way of detecting the difference between a committed and suspended\n// update here.\nmarkRenderEventTimeAndConfig(updateExpirationTime,update.suspenseConfig);// Process it and compute a new result.\nresultState=getStateFromUpdate(workInProgress,queue,update,resultState,props,instance);var _callback=update.callback;if(_callback!==null){workInProgress.effectTag|=Callback;// Set this to null, in case it was mutated during an aborted render.\nupdate.nextEffect=null;if(queue.lastEffect===null){queue.firstEffect=queue.lastEffect=update;}else{queue.lastEffect.nextEffect=update;queue.lastEffect=update;}}}// Continue to the next update.\nupdate=update.next;}// Separately, iterate though the list of captured updates.\nvar newFirstCapturedUpdate=null;update=queue.firstCapturedUpdate;while(update!==null){var _updateExpirationTime=update.expirationTime;if(_updateExpirationTime<renderExpirationTime){// This update does not have sufficient priority. Skip it.\nif(newFirstCapturedUpdate===null){// This is the first skipped captured update. It will be the first\n// update in the new list.\nnewFirstCapturedUpdate=update;// If this is the first update that was skipped, the current result is\n// the new base state.\nif(newFirstUpdate===null){newBaseState=resultState;}}// Since this update will remain in the list, update the remaining\n// expiration time.\nif(newExpirationTime<_updateExpirationTime){newExpirationTime=_updateExpirationTime;}}else{// This update does have sufficient priority. Process it and compute\n// a new result.\nresultState=getStateFromUpdate(workInProgress,queue,update,resultState,props,instance);var _callback2=update.callback;if(_callback2!==null){workInProgress.effectTag|=Callback;// Set this to null, in case it was mutated during an aborted render.\nupdate.nextEffect=null;if(queue.lastCapturedEffect===null){queue.firstCapturedEffect=queue.lastCapturedEffect=update;}else{queue.lastCapturedEffect.nextEffect=update;queue.lastCapturedEffect=update;}}}update=update.next;}if(newFirstUpdate===null){queue.lastUpdate=null;}if(newFirstCapturedUpdate===null){queue.lastCapturedUpdate=null;}else{workInProgress.effectTag|=Callback;}if(newFirstUpdate===null&&newFirstCapturedUpdate===null){// We processed every update, without skipping. That means the new base\n// state is the same as the result state.\nnewBaseState=resultState;}queue.baseState=newBaseState;queue.firstUpdate=newFirstUpdate;queue.firstCapturedUpdate=newFirstCapturedUpdate;// Set the remaining expiration time to be whatever is remaining in the queue.\n// This should be fine because the only two other things that contribute to\n// expiration time are props and context. We're already in the middle of the\n// begin phase by the time we start processing the queue, so we've already\n// dealt with the props. Context in components that specify\n// shouldComponentUpdate is tricky; but we'll have to account for\n// that regardless.\nworkInProgress.expirationTime=newExpirationTime;workInProgress.memoizedState=resultState;{currentlyProcessingQueue=null;}}function callCallback(callback,context){(function(){if(!(typeof callback==='function')){{throw ReactError(Error('Invalid argument passed as callback. Expected a function. Instead received: '+callback));}}})();callback.call(context);}function resetHasForceUpdateBeforeProcessing(){hasForceUpdate=false;}function checkHasForceUpdateAfterProcessing(){return hasForceUpdate;}function commitUpdateQueue(finishedWork,finishedQueue,instance,renderExpirationTime){// If the finished render included captured updates, and there are still\n// lower priority updates left over, we need to keep the captured updates\n// in the queue so that they are rebased and not dropped once we process the\n// queue again at the lower priority.\nif(finishedQueue.firstCapturedUpdate!==null){// Join the captured update list to the end of the normal list.\nif(finishedQueue.lastUpdate!==null){finishedQueue.lastUpdate.next=finishedQueue.firstCapturedUpdate;finishedQueue.lastUpdate=finishedQueue.lastCapturedUpdate;}// Clear the list of captured updates.\nfinishedQueue.firstCapturedUpdate=finishedQueue.lastCapturedUpdate=null;}// Commit the effects\ncommitUpdateEffects(finishedQueue.firstEffect,instance);finishedQueue.firstEffect=finishedQueue.lastEffect=null;commitUpdateEffects(finishedQueue.firstCapturedEffect,instance);finishedQueue.firstCapturedEffect=finishedQueue.lastCapturedEffect=null;}function commitUpdateEffects(effect,instance){while(effect!==null){var _callback3=effect.callback;if(_callback3!==null){effect.callback=null;callCallback(_callback3,instance);}effect=effect.nextEffect;}}var ReactCurrentBatchConfig=ReactSharedInternals.ReactCurrentBatchConfig;function requestCurrentSuspenseConfig(){return ReactCurrentBatchConfig.suspense;}var fakeInternalInstance={};var isArray$1=Array.isArray;// React.Component uses a shared frozen object by default.\n// We'll use it to determine whether we need to initialize legacy refs.\nvar emptyRefsObject=new React.Component().refs;var didWarnAboutStateAssignmentForComponent=void 0;var didWarnAboutUninitializedState=void 0;var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate=void 0;var didWarnAboutLegacyLifecyclesAndDerivedState=void 0;var didWarnAboutUndefinedDerivedState=void 0;var warnOnUndefinedDerivedState=void 0;var warnOnInvalidCallback=void 0;var didWarnAboutDirectlyAssigningPropsToState=void 0;var didWarnAboutContextTypeAndContextTypes=void 0;var didWarnAboutInvalidateContextType=void 0;{didWarnAboutStateAssignmentForComponent=new Set();didWarnAboutUninitializedState=new Set();didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate=new Set();didWarnAboutLegacyLifecyclesAndDerivedState=new Set();didWarnAboutDirectlyAssigningPropsToState=new Set();didWarnAboutUndefinedDerivedState=new Set();didWarnAboutContextTypeAndContextTypes=new Set();didWarnAboutInvalidateContextType=new Set();var didWarnOnInvalidCallback=new Set();warnOnInvalidCallback=function warnOnInvalidCallback(callback,callerName){if(callback===null||typeof callback==='function'){return;}var key=callerName+'_'+callback;if(!didWarnOnInvalidCallback.has(key)){didWarnOnInvalidCallback.add(key);warningWithoutStack$1(false,'%s(...): Expected the last optional `callback` argument to be a '+'function. Instead received: %s.',callerName,callback);}};warnOnUndefinedDerivedState=function warnOnUndefinedDerivedState(type,partialState){if(partialState===undefined){var componentName=getComponentName(type)||'Component';if(!didWarnAboutUndefinedDerivedState.has(componentName)){didWarnAboutUndefinedDerivedState.add(componentName);warningWithoutStack$1(false,'%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. '+'You have returned undefined.',componentName);}}};// This is so gross but it's at least non-critical and can be removed if\n// it causes problems. This is meant to give a nicer error message for\n// ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n// ...)) which otherwise throws a \"_processChildContext is not a function\"\n// exception.\nObject.defineProperty(fakeInternalInstance,'_processChildContext',{enumerable:false,value:function value(){(function(){{{throw ReactError(Error('_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).'));}}})();}});Object.freeze(fakeInternalInstance);}function applyDerivedStateFromProps(workInProgress,ctor,getDerivedStateFromProps,nextProps){var prevState=workInProgress.memoizedState;{if(debugRenderPhaseSideEffects||debugRenderPhaseSideEffectsForStrictMode&&workInProgress.mode&StrictMode){// Invoke the function an extra time to help detect side-effects.\ngetDerivedStateFromProps(nextProps,prevState);}}var partialState=getDerivedStateFromProps(nextProps,prevState);{warnOnUndefinedDerivedState(ctor,partialState);}// Merge the partial state and the previous state.\nvar memoizedState=partialState===null||partialState===undefined?prevState:_assign({},prevState,partialState);workInProgress.memoizedState=memoizedState;// Once the update queue is empty, persist the derived state onto the\n// base state.\nvar updateQueue=workInProgress.updateQueue;if(updateQueue!==null&&workInProgress.expirationTime===NoWork){updateQueue.baseState=memoizedState;}}var classComponentUpdater={isMounted:isMounted,enqueueSetState:function enqueueSetState(inst,payload,callback){var fiber=get(inst);var currentTime=requestCurrentTime();var suspenseConfig=requestCurrentSuspenseConfig();var expirationTime=computeExpirationForFiber(currentTime,fiber,suspenseConfig);var update=createUpdate(expirationTime,suspenseConfig);update.payload=payload;if(callback!==undefined&&callback!==null){{warnOnInvalidCallback(callback,'setState');}update.callback=callback;}if(revertPassiveEffectsChange){flushPassiveEffects();}enqueueUpdate(fiber,update);scheduleWork(fiber,expirationTime);},enqueueReplaceState:function enqueueReplaceState(inst,payload,callback){var fiber=get(inst);var currentTime=requestCurrentTime();var suspenseConfig=requestCurrentSuspenseConfig();var expirationTime=computeExpirationForFiber(currentTime,fiber,suspenseConfig);var update=createUpdate(expirationTime,suspenseConfig);update.tag=ReplaceState;update.payload=payload;if(callback!==undefined&&callback!==null){{warnOnInvalidCallback(callback,'replaceState');}update.callback=callback;}if(revertPassiveEffectsChange){flushPassiveEffects();}enqueueUpdate(fiber,update);scheduleWork(fiber,expirationTime);},enqueueForceUpdate:function enqueueForceUpdate(inst,callback){var fiber=get(inst);var currentTime=requestCurrentTime();var suspenseConfig=requestCurrentSuspenseConfig();var expirationTime=computeExpirationForFiber(currentTime,fiber,suspenseConfig);var update=createUpdate(expirationTime,suspenseConfig);update.tag=ForceUpdate;if(callback!==undefined&&callback!==null){{warnOnInvalidCallback(callback,'forceUpdate');}update.callback=callback;}if(revertPassiveEffectsChange){flushPassiveEffects();}enqueueUpdate(fiber,update);scheduleWork(fiber,expirationTime);}};function checkShouldComponentUpdate(workInProgress,ctor,oldProps,newProps,oldState,newState,nextContext){var instance=workInProgress.stateNode;if(typeof instance.shouldComponentUpdate==='function'){startPhaseTimer(workInProgress,'shouldComponentUpdate');var shouldUpdate=instance.shouldComponentUpdate(newProps,newState,nextContext);stopPhaseTimer();{!(shouldUpdate!==undefined)?warningWithoutStack$1(false,'%s.shouldComponentUpdate(): Returned undefined instead of a '+'boolean value. Make sure to return true or false.',getComponentName(ctor)||'Component'):void 0;}return shouldUpdate;}if(ctor.prototype&&ctor.prototype.isPureReactComponent){return!shallowEqual(oldProps,newProps)||!shallowEqual(oldState,newState);}return true;}function checkClassInstance(workInProgress,ctor,newProps){var instance=workInProgress.stateNode;{var name=getComponentName(ctor)||'Component';var renderPresent=instance.render;if(!renderPresent){if(ctor.prototype&&typeof ctor.prototype.render==='function'){warningWithoutStack$1(false,'%s(...): No `render` method found on the returned component '+'instance: did you accidentally return an object from the constructor?',name);}else{warningWithoutStack$1(false,'%s(...): No `render` method found on the returned component '+'instance: you may have forgotten to define `render`.',name);}}var noGetInitialStateOnES6=!instance.getInitialState||instance.getInitialState.isReactClassApproved||instance.state;!noGetInitialStateOnES6?warningWithoutStack$1(false,'getInitialState was defined on %s, a plain JavaScript class. '+'This is only supported for classes created using React.createClass. '+'Did you mean to define a state property instead?',name):void 0;var noGetDefaultPropsOnES6=!instance.getDefaultProps||instance.getDefaultProps.isReactClassApproved;!noGetDefaultPropsOnES6?warningWithoutStack$1(false,'getDefaultProps was defined on %s, a plain JavaScript class. '+'This is only supported for classes created using React.createClass. '+'Use a static property to define defaultProps instead.',name):void 0;var noInstancePropTypes=!instance.propTypes;!noInstancePropTypes?warningWithoutStack$1(false,'propTypes was defined as an instance property on %s. Use a static '+'property to define propTypes instead.',name):void 0;var noInstanceContextType=!instance.contextType;!noInstanceContextType?warningWithoutStack$1(false,'contextType was defined as an instance property on %s. Use a static '+'property to define contextType instead.',name):void 0;if(disableLegacyContext){if(ctor.childContextTypes){warningWithoutStack$1(false,'%s uses the legacy childContextTypes API which is no longer supported. '+'Use React.createContext() instead.',name);}if(ctor.contextTypes){warningWithoutStack$1(false,'%s uses the legacy contextTypes API which is no longer supported. '+'Use React.createContext() with static contextType instead.',name);}}else{var noInstanceContextTypes=!instance.contextTypes;!noInstanceContextTypes?warningWithoutStack$1(false,'contextTypes was defined as an instance property on %s. Use a static '+'property to define contextTypes instead.',name):void 0;if(ctor.contextType&&ctor.contextTypes&&!didWarnAboutContextTypeAndContextTypes.has(ctor)){didWarnAboutContextTypeAndContextTypes.add(ctor);warningWithoutStack$1(false,'%s declares both contextTypes and contextType static properties. '+'The legacy contextTypes property will be ignored.',name);}}var noComponentShouldUpdate=typeof instance.componentShouldUpdate!=='function';!noComponentShouldUpdate?warningWithoutStack$1(false,'%s has a method called '+'componentShouldUpdate(). Did you mean shouldComponentUpdate()? '+'The name is phrased as a question because the function is '+'expected to return a value.',name):void 0;if(ctor.prototype&&ctor.prototype.isPureReactComponent&&typeof instance.shouldComponentUpdate!=='undefined'){warningWithoutStack$1(false,'%s has a method called shouldComponentUpdate(). '+'shouldComponentUpdate should not be used when extending React.PureComponent. '+'Please extend React.Component if shouldComponentUpdate is used.',getComponentName(ctor)||'A pure component');}var noComponentDidUnmount=typeof instance.componentDidUnmount!=='function';!noComponentDidUnmount?warningWithoutStack$1(false,'%s has a method called '+'componentDidUnmount(). But there is no such lifecycle method. '+'Did you mean componentWillUnmount()?',name):void 0;var noComponentDidReceiveProps=typeof instance.componentDidReceiveProps!=='function';!noComponentDidReceiveProps?warningWithoutStack$1(false,'%s has a method called '+'componentDidReceiveProps(). But there is no such lifecycle method. '+'If you meant to update the state in response to changing props, '+'use componentWillReceiveProps(). If you meant to fetch data or '+'run side-effects or mutations after React has updated the UI, use componentDidUpdate().',name):void 0;var noComponentWillRecieveProps=typeof instance.componentWillRecieveProps!=='function';!noComponentWillRecieveProps?warningWithoutStack$1(false,'%s has a method called '+'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',name):void 0;var noUnsafeComponentWillRecieveProps=typeof instance.UNSAFE_componentWillRecieveProps!=='function';!noUnsafeComponentWillRecieveProps?warningWithoutStack$1(false,'%s has a method called '+'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',name):void 0;var hasMutatedProps=instance.props!==newProps;!(instance.props===undefined||!hasMutatedProps)?warningWithoutStack$1(false,'%s(...): When calling super() in `%s`, make sure to pass '+\"up the same props that your component's constructor was passed.\",name,name):void 0;var noInstanceDefaultProps=!instance.defaultProps;!noInstanceDefaultProps?warningWithoutStack$1(false,'Setting defaultProps as an instance property on %s is not supported and will be ignored.'+' Instead, define defaultProps as a static property on %s.',name,name):void 0;if(typeof instance.getSnapshotBeforeUpdate==='function'&&typeof instance.componentDidUpdate!=='function'&&!didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)){didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);warningWithoutStack$1(false,'%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). '+'This component defines getSnapshotBeforeUpdate() only.',getComponentName(ctor));}var noInstanceGetDerivedStateFromProps=typeof instance.getDerivedStateFromProps!=='function';!noInstanceGetDerivedStateFromProps?warningWithoutStack$1(false,'%s: getDerivedStateFromProps() is defined as an instance method '+'and will be ignored. Instead, declare it as a static method.',name):void 0;var noInstanceGetDerivedStateFromCatch=typeof instance.getDerivedStateFromError!=='function';!noInstanceGetDerivedStateFromCatch?warningWithoutStack$1(false,'%s: getDerivedStateFromError() is defined as an instance method '+'and will be ignored. Instead, declare it as a static method.',name):void 0;var noStaticGetSnapshotBeforeUpdate=typeof ctor.getSnapshotBeforeUpdate!=='function';!noStaticGetSnapshotBeforeUpdate?warningWithoutStack$1(false,'%s: getSnapshotBeforeUpdate() is defined as a static method '+'and will be ignored. Instead, declare it as an instance method.',name):void 0;var _state=instance.state;if(_state&&(typeof _state!=='object'||isArray$1(_state))){warningWithoutStack$1(false,'%s.state: must be set to an object or null',name);}if(typeof instance.getChildContext==='function'){!(typeof ctor.childContextTypes==='object')?warningWithoutStack$1(false,'%s.getChildContext(): childContextTypes must be defined in order to '+'use getChildContext().',name):void 0;}}}function adoptClassInstance(workInProgress,instance){instance.updater=classComponentUpdater;workInProgress.stateNode=instance;// The instance needs access to the fiber so that it can schedule updates\nset(instance,workInProgress);{instance._reactInternalInstance=fakeInternalInstance;}}function constructClassInstance(workInProgress,ctor,props,renderExpirationTime){var isLegacyContextConsumer=false;var unmaskedContext=emptyContextObject;var context=emptyContextObject;var contextType=ctor.contextType;{if('contextType'in ctor){var isValid=// Allow null for conditional declaration\ncontextType===null||contextType!==undefined&&contextType.$$typeof===REACT_CONTEXT_TYPE&&contextType._context===undefined;// Not a <Context.Consumer>\nif(!isValid&&!didWarnAboutInvalidateContextType.has(ctor)){didWarnAboutInvalidateContextType.add(ctor);var addendum='';if(contextType===undefined){addendum=' However, it is set to undefined. '+'This can be caused by a typo or by mixing up named and default imports. '+'This can also happen due to a circular dependency, so '+'try moving the createContext() call to a separate file.';}else if(typeof contextType!=='object'){addendum=' However, it is set to a '+typeof contextType+'.';}else if(contextType.$$typeof===REACT_PROVIDER_TYPE){addendum=' Did you accidentally pass the Context.Provider instead?';}else if(contextType._context!==undefined){// <Context.Consumer>\naddendum=' Did you accidentally pass the Context.Consumer instead?';}else{addendum=' However, it is set to an object with keys {'+Object.keys(contextType).join(', ')+'}.';}warningWithoutStack$1(false,'%s defines an invalid contextType. '+'contextType should point to the Context object returned by React.createContext().%s',getComponentName(ctor)||'Component',addendum);}}}if(typeof contextType==='object'&&contextType!==null){context=_readContext(contextType);}else if(!disableLegacyContext){unmaskedContext=getUnmaskedContext(workInProgress,ctor,true);var contextTypes=ctor.contextTypes;isLegacyContextConsumer=contextTypes!==null&&contextTypes!==undefined;context=isLegacyContextConsumer?getMaskedContext(workInProgress,unmaskedContext):emptyContextObject;}// Instantiate twice to help detect side-effects.\n{if(debugRenderPhaseSideEffects||debugRenderPhaseSideEffectsForStrictMode&&workInProgress.mode&StrictMode){new ctor(props,context);// eslint-disable-line no-new\n}}var instance=new ctor(props,context);var state=workInProgress.memoizedState=instance.state!==null&&instance.state!==undefined?instance.state:null;adoptClassInstance(workInProgress,instance);{if(typeof ctor.getDerivedStateFromProps==='function'&&state===null){var componentName=getComponentName(ctor)||'Component';if(!didWarnAboutUninitializedState.has(componentName)){didWarnAboutUninitializedState.add(componentName);warningWithoutStack$1(false,'`%s` uses `getDerivedStateFromProps` but its initial state is '+'%s. This is not recommended. Instead, define the initial state by '+'assigning an object to `this.state` in the constructor of `%s`. '+'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.',componentName,instance.state===null?'null':'undefined',componentName);}}// If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n// Warn about these lifecycles if they are present.\n// Don't warn about react-lifecycles-compat polyfilled methods though.\nif(typeof ctor.getDerivedStateFromProps==='function'||typeof instance.getSnapshotBeforeUpdate==='function'){var foundWillMountName=null;var foundWillReceivePropsName=null;var foundWillUpdateName=null;if(typeof instance.componentWillMount==='function'&&instance.componentWillMount.__suppressDeprecationWarning!==true){foundWillMountName='componentWillMount';}else if(typeof instance.UNSAFE_componentWillMount==='function'){foundWillMountName='UNSAFE_componentWillMount';}if(typeof instance.componentWillReceiveProps==='function'&&instance.componentWillReceiveProps.__suppressDeprecationWarning!==true){foundWillReceivePropsName='componentWillReceiveProps';}else if(typeof instance.UNSAFE_componentWillReceiveProps==='function'){foundWillReceivePropsName='UNSAFE_componentWillReceiveProps';}if(typeof instance.componentWillUpdate==='function'&&instance.componentWillUpdate.__suppressDeprecationWarning!==true){foundWillUpdateName='componentWillUpdate';}else if(typeof instance.UNSAFE_componentWillUpdate==='function'){foundWillUpdateName='UNSAFE_componentWillUpdate';}if(foundWillMountName!==null||foundWillReceivePropsName!==null||foundWillUpdateName!==null){var _componentName=getComponentName(ctor)||'Component';var newApiName=typeof ctor.getDerivedStateFromProps==='function'?'getDerivedStateFromProps()':'getSnapshotBeforeUpdate()';if(!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)){didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);warningWithoutStack$1(false,'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n'+'%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n'+'The above lifecycles should be removed. Learn more about this warning here:\\n'+'https://fb.me/react-async-component-lifecycle-hooks',_componentName,newApiName,foundWillMountName!==null?'\\n  '+foundWillMountName:'',foundWillReceivePropsName!==null?'\\n  '+foundWillReceivePropsName:'',foundWillUpdateName!==null?'\\n  '+foundWillUpdateName:'');}}}}// Cache unmasked context so we can avoid recreating masked context unless necessary.\n// ReactFiberContext usually updates this cache but can't for newly-created instances.\nif(isLegacyContextConsumer){cacheContext(workInProgress,unmaskedContext,context);}return instance;}function callComponentWillMount(workInProgress,instance){startPhaseTimer(workInProgress,'componentWillMount');var oldState=instance.state;if(typeof instance.componentWillMount==='function'){instance.componentWillMount();}if(typeof instance.UNSAFE_componentWillMount==='function'){instance.UNSAFE_componentWillMount();}stopPhaseTimer();if(oldState!==instance.state){{warningWithoutStack$1(false,'%s.componentWillMount(): Assigning directly to this.state is '+\"deprecated (except inside a component's \"+'constructor). Use setState instead.',getComponentName(workInProgress.type)||'Component');}classComponentUpdater.enqueueReplaceState(instance,instance.state,null);}}function callComponentWillReceiveProps(workInProgress,instance,newProps,nextContext){var oldState=instance.state;startPhaseTimer(workInProgress,'componentWillReceiveProps');if(typeof instance.componentWillReceiveProps==='function'){instance.componentWillReceiveProps(newProps,nextContext);}if(typeof instance.UNSAFE_componentWillReceiveProps==='function'){instance.UNSAFE_componentWillReceiveProps(newProps,nextContext);}stopPhaseTimer();if(instance.state!==oldState){{var componentName=getComponentName(workInProgress.type)||'Component';if(!didWarnAboutStateAssignmentForComponent.has(componentName)){didWarnAboutStateAssignmentForComponent.add(componentName);warningWithoutStack$1(false,'%s.componentWillReceiveProps(): Assigning directly to '+\"this.state is deprecated (except inside a component's \"+'constructor). Use setState instead.',componentName);}}classComponentUpdater.enqueueReplaceState(instance,instance.state,null);}}// Invokes the mount life-cycles on a previously never rendered instance.\nfunction mountClassInstance(workInProgress,ctor,newProps,renderExpirationTime){{checkClassInstance(workInProgress,ctor,newProps);}var instance=workInProgress.stateNode;instance.props=newProps;instance.state=workInProgress.memoizedState;instance.refs=emptyRefsObject;var contextType=ctor.contextType;if(typeof contextType==='object'&&contextType!==null){instance.context=_readContext(contextType);}else if(disableLegacyContext){instance.context=emptyContextObject;}else{var unmaskedContext=getUnmaskedContext(workInProgress,ctor,true);instance.context=getMaskedContext(workInProgress,unmaskedContext);}{if(instance.state===newProps){var componentName=getComponentName(ctor)||'Component';if(!didWarnAboutDirectlyAssigningPropsToState.has(componentName)){didWarnAboutDirectlyAssigningPropsToState.add(componentName);warningWithoutStack$1(false,'%s: It is not recommended to assign props directly to state '+\"because updates to props won't be reflected in state. \"+'In most cases, it is better to use props directly.',componentName);}}if(workInProgress.mode&StrictMode){ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress,instance);}if(warnAboutDeprecatedLifecycles){ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress,instance);}}var updateQueue=workInProgress.updateQueue;if(updateQueue!==null){processUpdateQueue(workInProgress,updateQueue,newProps,instance,renderExpirationTime);instance.state=workInProgress.memoizedState;}var getDerivedStateFromProps=ctor.getDerivedStateFromProps;if(typeof getDerivedStateFromProps==='function'){applyDerivedStateFromProps(workInProgress,ctor,getDerivedStateFromProps,newProps);instance.state=workInProgress.memoizedState;}// In order to support react-lifecycles-compat polyfilled components,\n// Unsafe lifecycles should not be invoked for components using the new APIs.\nif(typeof ctor.getDerivedStateFromProps!=='function'&&typeof instance.getSnapshotBeforeUpdate!=='function'&&(typeof instance.UNSAFE_componentWillMount==='function'||typeof instance.componentWillMount==='function')){callComponentWillMount(workInProgress,instance);// If we had additional state updates during this life-cycle, let's\n// process them now.\nupdateQueue=workInProgress.updateQueue;if(updateQueue!==null){processUpdateQueue(workInProgress,updateQueue,newProps,instance,renderExpirationTime);instance.state=workInProgress.memoizedState;}}if(typeof instance.componentDidMount==='function'){workInProgress.effectTag|=Update;}}function resumeMountClassInstance(workInProgress,ctor,newProps,renderExpirationTime){var instance=workInProgress.stateNode;var oldProps=workInProgress.memoizedProps;instance.props=oldProps;var oldContext=instance.context;var contextType=ctor.contextType;var nextContext=emptyContextObject;if(typeof contextType==='object'&&contextType!==null){nextContext=_readContext(contextType);}else if(!disableLegacyContext){var nextLegacyUnmaskedContext=getUnmaskedContext(workInProgress,ctor,true);nextContext=getMaskedContext(workInProgress,nextLegacyUnmaskedContext);}var getDerivedStateFromProps=ctor.getDerivedStateFromProps;var hasNewLifecycles=typeof getDerivedStateFromProps==='function'||typeof instance.getSnapshotBeforeUpdate==='function';// Note: During these life-cycles, instance.props/instance.state are what\n// ever the previously attempted to render - not the \"current\". However,\n// during componentDidUpdate we pass the \"current\" props.\n// In order to support react-lifecycles-compat polyfilled components,\n// Unsafe lifecycles should not be invoked for components using the new APIs.\nif(!hasNewLifecycles&&(typeof instance.UNSAFE_componentWillReceiveProps==='function'||typeof instance.componentWillReceiveProps==='function')){if(oldProps!==newProps||oldContext!==nextContext){callComponentWillReceiveProps(workInProgress,instance,newProps,nextContext);}}resetHasForceUpdateBeforeProcessing();var oldState=workInProgress.memoizedState;var newState=instance.state=oldState;var updateQueue=workInProgress.updateQueue;if(updateQueue!==null){processUpdateQueue(workInProgress,updateQueue,newProps,instance,renderExpirationTime);newState=workInProgress.memoizedState;}if(oldProps===newProps&&oldState===newState&&!hasContextChanged()&&!checkHasForceUpdateAfterProcessing()){// If an update was already in progress, we should schedule an Update\n// effect even though we're bailing out, so that cWU/cDU are called.\nif(typeof instance.componentDidMount==='function'){workInProgress.effectTag|=Update;}return false;}if(typeof getDerivedStateFromProps==='function'){applyDerivedStateFromProps(workInProgress,ctor,getDerivedStateFromProps,newProps);newState=workInProgress.memoizedState;}var shouldUpdate=checkHasForceUpdateAfterProcessing()||checkShouldComponentUpdate(workInProgress,ctor,oldProps,newProps,oldState,newState,nextContext);if(shouldUpdate){// In order to support react-lifecycles-compat polyfilled components,\n// Unsafe lifecycles should not be invoked for components using the new APIs.\nif(!hasNewLifecycles&&(typeof instance.UNSAFE_componentWillMount==='function'||typeof instance.componentWillMount==='function')){startPhaseTimer(workInProgress,'componentWillMount');if(typeof instance.componentWillMount==='function'){instance.componentWillMount();}if(typeof instance.UNSAFE_componentWillMount==='function'){instance.UNSAFE_componentWillMount();}stopPhaseTimer();}if(typeof instance.componentDidMount==='function'){workInProgress.effectTag|=Update;}}else{// If an update was already in progress, we should schedule an Update\n// effect even though we're bailing out, so that cWU/cDU are called.\nif(typeof instance.componentDidMount==='function'){workInProgress.effectTag|=Update;}// If shouldComponentUpdate returned false, we should still update the\n// memoized state to indicate that this work can be reused.\nworkInProgress.memoizedProps=newProps;workInProgress.memoizedState=newState;}// Update the existing instance's state, props, and context pointers even\n// if shouldComponentUpdate returns false.\ninstance.props=newProps;instance.state=newState;instance.context=nextContext;return shouldUpdate;}// Invokes the update life-cycles and returns false if it shouldn't rerender.\nfunction updateClassInstance(current,workInProgress,ctor,newProps,renderExpirationTime){var instance=workInProgress.stateNode;var oldProps=workInProgress.memoizedProps;instance.props=workInProgress.type===workInProgress.elementType?oldProps:resolveDefaultProps(workInProgress.type,oldProps);var oldContext=instance.context;var contextType=ctor.contextType;var nextContext=emptyContextObject;if(typeof contextType==='object'&&contextType!==null){nextContext=_readContext(contextType);}else if(!disableLegacyContext){var nextUnmaskedContext=getUnmaskedContext(workInProgress,ctor,true);nextContext=getMaskedContext(workInProgress,nextUnmaskedContext);}var getDerivedStateFromProps=ctor.getDerivedStateFromProps;var hasNewLifecycles=typeof getDerivedStateFromProps==='function'||typeof instance.getSnapshotBeforeUpdate==='function';// Note: During these life-cycles, instance.props/instance.state are what\n// ever the previously attempted to render - not the \"current\". However,\n// during componentDidUpdate we pass the \"current\" props.\n// In order to support react-lifecycles-compat polyfilled components,\n// Unsafe lifecycles should not be invoked for components using the new APIs.\nif(!hasNewLifecycles&&(typeof instance.UNSAFE_componentWillReceiveProps==='function'||typeof instance.componentWillReceiveProps==='function')){if(oldProps!==newProps||oldContext!==nextContext){callComponentWillReceiveProps(workInProgress,instance,newProps,nextContext);}}resetHasForceUpdateBeforeProcessing();var oldState=workInProgress.memoizedState;var newState=instance.state=oldState;var updateQueue=workInProgress.updateQueue;if(updateQueue!==null){processUpdateQueue(workInProgress,updateQueue,newProps,instance,renderExpirationTime);newState=workInProgress.memoizedState;}if(oldProps===newProps&&oldState===newState&&!hasContextChanged()&&!checkHasForceUpdateAfterProcessing()){// If an update was already in progress, we should schedule an Update\n// effect even though we're bailing out, so that cWU/cDU are called.\nif(typeof instance.componentDidUpdate==='function'){if(oldProps!==current.memoizedProps||oldState!==current.memoizedState){workInProgress.effectTag|=Update;}}if(typeof instance.getSnapshotBeforeUpdate==='function'){if(oldProps!==current.memoizedProps||oldState!==current.memoizedState){workInProgress.effectTag|=Snapshot;}}return false;}if(typeof getDerivedStateFromProps==='function'){applyDerivedStateFromProps(workInProgress,ctor,getDerivedStateFromProps,newProps);newState=workInProgress.memoizedState;}var shouldUpdate=checkHasForceUpdateAfterProcessing()||checkShouldComponentUpdate(workInProgress,ctor,oldProps,newProps,oldState,newState,nextContext);if(shouldUpdate){// In order to support react-lifecycles-compat polyfilled components,\n// Unsafe lifecycles should not be invoked for components using the new APIs.\nif(!hasNewLifecycles&&(typeof instance.UNSAFE_componentWillUpdate==='function'||typeof instance.componentWillUpdate==='function')){startPhaseTimer(workInProgress,'componentWillUpdate');if(typeof instance.componentWillUpdate==='function'){instance.componentWillUpdate(newProps,newState,nextContext);}if(typeof instance.UNSAFE_componentWillUpdate==='function'){instance.UNSAFE_componentWillUpdate(newProps,newState,nextContext);}stopPhaseTimer();}if(typeof instance.componentDidUpdate==='function'){workInProgress.effectTag|=Update;}if(typeof instance.getSnapshotBeforeUpdate==='function'){workInProgress.effectTag|=Snapshot;}}else{// If an update was already in progress, we should schedule an Update\n// effect even though we're bailing out, so that cWU/cDU are called.\nif(typeof instance.componentDidUpdate==='function'){if(oldProps!==current.memoizedProps||oldState!==current.memoizedState){workInProgress.effectTag|=Update;}}if(typeof instance.getSnapshotBeforeUpdate==='function'){if(oldProps!==current.memoizedProps||oldState!==current.memoizedState){workInProgress.effectTag|=Snapshot;}}// If shouldComponentUpdate returned false, we should still update the\n// memoized props/state to indicate that this work can be reused.\nworkInProgress.memoizedProps=newProps;workInProgress.memoizedState=newState;}// Update the existing instance's state, props, and context pointers even\n// if shouldComponentUpdate returns false.\ninstance.props=newProps;instance.state=newState;instance.context=nextContext;return shouldUpdate;}var didWarnAboutMaps=void 0;var didWarnAboutGenerators=void 0;var didWarnAboutStringRefInStrictMode=void 0;var ownerHasKeyUseWarning=void 0;var ownerHasFunctionTypeWarning=void 0;var warnForMissingKey=function warnForMissingKey(child){};{didWarnAboutMaps=false;didWarnAboutGenerators=false;didWarnAboutStringRefInStrictMode={};/**\n   * Warn if there's no key explicitly set on dynamic arrays of children or\n   * object keys are not valid. This allows us to keep track of children between\n   * updates.\n   */ownerHasKeyUseWarning={};ownerHasFunctionTypeWarning={};warnForMissingKey=function warnForMissingKey(child){if(child===null||typeof child!=='object'){return;}if(!child._store||child._store.validated||child.key!=null){return;}(function(){if(!(typeof child._store==='object')){{throw ReactError(Error('React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.'));}}})();child._store.validated=true;var currentComponentErrorInfo='Each child in a list should have a unique '+'\"key\" prop. See https://fb.me/react-warning-keys for '+'more information.'+getCurrentFiberStackInDev();if(ownerHasKeyUseWarning[currentComponentErrorInfo]){return;}ownerHasKeyUseWarning[currentComponentErrorInfo]=true;warning$1(false,'Each child in a list should have a unique '+'\"key\" prop. See https://fb.me/react-warning-keys for '+'more information.');};}var isArray=Array.isArray;function coerceRef(returnFiber,current$$1,element){var mixedRef=element.ref;if(mixedRef!==null&&typeof mixedRef!=='function'&&typeof mixedRef!=='object'){{if(returnFiber.mode&StrictMode){var componentName=getComponentName(returnFiber.type)||'Component';if(!didWarnAboutStringRefInStrictMode[componentName]){warningWithoutStack$1(false,'A string ref, \"%s\", has been found within a strict mode tree. '+'String refs are a source of potential bugs and should be avoided. '+'We recommend using createRef() instead.'+'\\n%s'+'\\n\\nLearn more about using refs safely here:'+'\\nhttps://fb.me/react-strict-mode-string-ref',mixedRef,getStackByFiberInDevAndProd(returnFiber));didWarnAboutStringRefInStrictMode[componentName]=true;}}}if(element._owner){var owner=element._owner;var inst=void 0;if(owner){var ownerFiber=owner;(function(){if(!(ownerFiber.tag===ClassComponent)){{throw ReactError(Error('Function components cannot have refs. Did you mean to use React.forwardRef()?'));}}})();inst=ownerFiber.stateNode;}(function(){if(!inst){{throw ReactError(Error('Missing owner for string ref '+mixedRef+'. This error is likely caused by a bug in React. Please file an issue.'));}}})();var stringRef=''+mixedRef;// Check if previous string ref matches new string ref\nif(current$$1!==null&&current$$1.ref!==null&&typeof current$$1.ref==='function'&&current$$1.ref._stringRef===stringRef){return current$$1.ref;}var ref=function ref(value){var refs=inst.refs;if(refs===emptyRefsObject){// This is a lazy pooled frozen object, so we need to initialize.\nrefs=inst.refs={};}if(value===null){delete refs[stringRef];}else{refs[stringRef]=value;}};ref._stringRef=stringRef;return ref;}else{(function(){if(!(typeof mixedRef==='string')){{throw ReactError(Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.'));}}})();(function(){if(!element._owner){{throw ReactError(Error('Element ref was specified as a string ('+mixedRef+') but no owner was set. This could happen for one of the following reasons:\\n1. You may be adding a ref to a function component\\n2. You may be adding a ref to a component that was not created inside a component\\'s render method\\n3. You have multiple copies of React loaded\\nSee https://fb.me/react-refs-must-have-owner for more information.'));}}})();}}return mixedRef;}function throwOnInvalidObjectType(returnFiber,newChild){if(returnFiber.type!=='textarea'){var addendum='';{addendum=' If you meant to render a collection of children, use an array '+'instead.'+getCurrentFiberStackInDev();}(function(){{{throw ReactError(Error('Objects are not valid as a React child (found: '+(Object.prototype.toString.call(newChild)==='[object Object]'?'object with keys {'+Object.keys(newChild).join(', ')+'}':newChild)+').'+addendum));}}})();}}function warnOnFunctionType(){var currentComponentErrorInfo='Functions are not valid as a React child. This may happen if '+'you return a Component instead of <Component /> from render. '+'Or maybe you meant to call this function rather than return it.'+getCurrentFiberStackInDev();if(ownerHasFunctionTypeWarning[currentComponentErrorInfo]){return;}ownerHasFunctionTypeWarning[currentComponentErrorInfo]=true;warning$1(false,'Functions are not valid as a React child. This may happen if '+'you return a Component instead of <Component /> from render. '+'Or maybe you meant to call this function rather than return it.');}// This wrapper function exists because I expect to clone the code in each path\n// to be able to optimize each path individually by branching early. This needs\n// a compiler or we can do it manually. Helpers that don't need this branching\n// live outside of this function.\nfunction ChildReconciler(shouldTrackSideEffects){function deleteChild(returnFiber,childToDelete){if(!shouldTrackSideEffects){// Noop.\nreturn;}// Deletions are added in reversed order so we add it to the front.\n// At this point, the return fiber's effect list is empty except for\n// deletions, so we can just append the deletion to the list. The remaining\n// effects aren't added until the complete phase. Once we implement\n// resuming, this may not be true.\nvar last=returnFiber.lastEffect;if(last!==null){last.nextEffect=childToDelete;returnFiber.lastEffect=childToDelete;}else{returnFiber.firstEffect=returnFiber.lastEffect=childToDelete;}childToDelete.nextEffect=null;childToDelete.effectTag=Deletion;}function deleteRemainingChildren(returnFiber,currentFirstChild){if(!shouldTrackSideEffects){// Noop.\nreturn null;}// TODO: For the shouldClone case, this could be micro-optimized a bit by\n// assuming that after the first child we've already added everything.\nvar childToDelete=currentFirstChild;while(childToDelete!==null){deleteChild(returnFiber,childToDelete);childToDelete=childToDelete.sibling;}return null;}function mapRemainingChildren(returnFiber,currentFirstChild){// Add the remaining children to a temporary map so that we can find them by\n// keys quickly. Implicit (null) keys get added to this set with their index\nvar existingChildren=new Map();var existingChild=currentFirstChild;while(existingChild!==null){if(existingChild.key!==null){existingChildren.set(existingChild.key,existingChild);}else{existingChildren.set(existingChild.index,existingChild);}existingChild=existingChild.sibling;}return existingChildren;}function useFiber(fiber,pendingProps,expirationTime){// We currently set sibling to null and index to 0 here because it is easy\n// to forget to do before returning it. E.g. for the single child case.\nvar clone=createWorkInProgress(fiber,pendingProps,expirationTime);clone.index=0;clone.sibling=null;return clone;}function placeChild(newFiber,lastPlacedIndex,newIndex){newFiber.index=newIndex;if(!shouldTrackSideEffects){// Noop.\nreturn lastPlacedIndex;}var current$$1=newFiber.alternate;if(current$$1!==null){var oldIndex=current$$1.index;if(oldIndex<lastPlacedIndex){// This is a move.\nnewFiber.effectTag=Placement;return lastPlacedIndex;}else{// This item can stay in place.\nreturn oldIndex;}}else{// This is an insertion.\nnewFiber.effectTag=Placement;return lastPlacedIndex;}}function placeSingleChild(newFiber){// This is simpler for the single child case. We only need to do a\n// placement for inserting new children.\nif(shouldTrackSideEffects&&newFiber.alternate===null){newFiber.effectTag=Placement;}return newFiber;}function updateTextNode(returnFiber,current$$1,textContent,expirationTime){if(current$$1===null||current$$1.tag!==HostText){// Insert\nvar created=createFiberFromText(textContent,returnFiber.mode,expirationTime);created.return=returnFiber;return created;}else{// Update\nvar existing=useFiber(current$$1,textContent,expirationTime);existing.return=returnFiber;return existing;}}function updateElement(returnFiber,current$$1,element,expirationTime){if(current$$1!==null&&(current$$1.elementType===element.type||// Keep this check inline so it only runs on the false path:\nisCompatibleFamilyForHotReloading(current$$1,element))){// Move based on index\nvar existing=useFiber(current$$1,element.props,expirationTime);existing.ref=coerceRef(returnFiber,current$$1,element);existing.return=returnFiber;{existing._debugSource=element._source;existing._debugOwner=element._owner;}return existing;}else{// Insert\nvar created=createFiberFromElement(element,returnFiber.mode,expirationTime);created.ref=coerceRef(returnFiber,current$$1,element);created.return=returnFiber;return created;}}function updatePortal(returnFiber,current$$1,portal,expirationTime){if(current$$1===null||current$$1.tag!==HostPortal||current$$1.stateNode.containerInfo!==portal.containerInfo||current$$1.stateNode.implementation!==portal.implementation){// Insert\nvar created=createFiberFromPortal(portal,returnFiber.mode,expirationTime);created.return=returnFiber;return created;}else{// Update\nvar existing=useFiber(current$$1,portal.children||[],expirationTime);existing.return=returnFiber;return existing;}}function updateFragment(returnFiber,current$$1,fragment,expirationTime,key){if(current$$1===null||current$$1.tag!==Fragment){// Insert\nvar created=createFiberFromFragment(fragment,returnFiber.mode,expirationTime,key);created.return=returnFiber;return created;}else{// Update\nvar existing=useFiber(current$$1,fragment,expirationTime);existing.return=returnFiber;return existing;}}function createChild(returnFiber,newChild,expirationTime){if(typeof newChild==='string'||typeof newChild==='number'){// Text nodes don't have keys. If the previous node is implicitly keyed\n// we can continue to replace it without aborting even if it is not a text\n// node.\nvar created=createFiberFromText(''+newChild,returnFiber.mode,expirationTime);created.return=returnFiber;return created;}if(typeof newChild==='object'&&newChild!==null){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:{var _created=createFiberFromElement(newChild,returnFiber.mode,expirationTime);_created.ref=coerceRef(returnFiber,null,newChild);_created.return=returnFiber;return _created;}case REACT_PORTAL_TYPE:{var _created2=createFiberFromPortal(newChild,returnFiber.mode,expirationTime);_created2.return=returnFiber;return _created2;}}if(isArray(newChild)||getIteratorFn(newChild)){var _created3=createFiberFromFragment(newChild,returnFiber.mode,expirationTime,null);_created3.return=returnFiber;return _created3;}throwOnInvalidObjectType(returnFiber,newChild);}{if(typeof newChild==='function'){warnOnFunctionType();}}return null;}function updateSlot(returnFiber,oldFiber,newChild,expirationTime){// Update the fiber if the keys match, otherwise return null.\nvar key=oldFiber!==null?oldFiber.key:null;if(typeof newChild==='string'||typeof newChild==='number'){// Text nodes don't have keys. If the previous node is implicitly keyed\n// we can continue to replace it without aborting even if it is not a text\n// node.\nif(key!==null){return null;}return updateTextNode(returnFiber,oldFiber,''+newChild,expirationTime);}if(typeof newChild==='object'&&newChild!==null){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:{if(newChild.key===key){if(newChild.type===REACT_FRAGMENT_TYPE){return updateFragment(returnFiber,oldFiber,newChild.props.children,expirationTime,key);}return updateElement(returnFiber,oldFiber,newChild,expirationTime);}else{return null;}}case REACT_PORTAL_TYPE:{if(newChild.key===key){return updatePortal(returnFiber,oldFiber,newChild,expirationTime);}else{return null;}}}if(isArray(newChild)||getIteratorFn(newChild)){if(key!==null){return null;}return updateFragment(returnFiber,oldFiber,newChild,expirationTime,null);}throwOnInvalidObjectType(returnFiber,newChild);}{if(typeof newChild==='function'){warnOnFunctionType();}}return null;}function updateFromMap(existingChildren,returnFiber,newIdx,newChild,expirationTime){if(typeof newChild==='string'||typeof newChild==='number'){// Text nodes don't have keys, so we neither have to check the old nor\n// new node for the key. If both are text nodes, they match.\nvar matchedFiber=existingChildren.get(newIdx)||null;return updateTextNode(returnFiber,matchedFiber,''+newChild,expirationTime);}if(typeof newChild==='object'&&newChild!==null){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:{var _matchedFiber=existingChildren.get(newChild.key===null?newIdx:newChild.key)||null;if(newChild.type===REACT_FRAGMENT_TYPE){return updateFragment(returnFiber,_matchedFiber,newChild.props.children,expirationTime,newChild.key);}return updateElement(returnFiber,_matchedFiber,newChild,expirationTime);}case REACT_PORTAL_TYPE:{var _matchedFiber2=existingChildren.get(newChild.key===null?newIdx:newChild.key)||null;return updatePortal(returnFiber,_matchedFiber2,newChild,expirationTime);}}if(isArray(newChild)||getIteratorFn(newChild)){var _matchedFiber3=existingChildren.get(newIdx)||null;return updateFragment(returnFiber,_matchedFiber3,newChild,expirationTime,null);}throwOnInvalidObjectType(returnFiber,newChild);}{if(typeof newChild==='function'){warnOnFunctionType();}}return null;}/**\n   * Warns if there is a duplicate or missing key\n   */function warnOnInvalidKey(child,knownKeys){{if(typeof child!=='object'||child===null){return knownKeys;}switch(child.$$typeof){case REACT_ELEMENT_TYPE:case REACT_PORTAL_TYPE:warnForMissingKey(child);var key=child.key;if(typeof key!=='string'){break;}if(knownKeys===null){knownKeys=new Set();knownKeys.add(key);break;}if(!knownKeys.has(key)){knownKeys.add(key);break;}warning$1(false,'Encountered two children with the same key, `%s`. '+'Keys should be unique so that components maintain their identity '+'across updates. Non-unique keys may cause children to be '+'duplicated and/or omitted \\u2014 the behavior is unsupported and '+'could change in a future version.',key);break;default:break;}}return knownKeys;}function reconcileChildrenArray(returnFiber,currentFirstChild,newChildren,expirationTime){// This algorithm can't optimize by searching from both ends since we\n// don't have backpointers on fibers. I'm trying to see how far we can get\n// with that model. If it ends up not being worth the tradeoffs, we can\n// add it later.\n// Even with a two ended optimization, we'd want to optimize for the case\n// where there are few changes and brute force the comparison instead of\n// going for the Map. It'd like to explore hitting that path first in\n// forward-only mode and only go for the Map once we notice that we need\n// lots of look ahead. This doesn't handle reversal as well as two ended\n// search but that's unusual. Besides, for the two ended optimization to\n// work on Iterables, we'd need to copy the whole set.\n// In this first iteration, we'll just live with hitting the bad case\n// (adding everything to a Map) in for every insert/move.\n// If you change this code, also update reconcileChildrenIterator() which\n// uses the same algorithm.\n{// First, validate keys.\nvar knownKeys=null;for(var i=0;i<newChildren.length;i++){var child=newChildren[i];knownKeys=warnOnInvalidKey(child,knownKeys);}}var resultingFirstChild=null;var previousNewFiber=null;var oldFiber=currentFirstChild;var lastPlacedIndex=0;var newIdx=0;var nextOldFiber=null;for(;oldFiber!==null&&newIdx<newChildren.length;newIdx++){if(oldFiber.index>newIdx){nextOldFiber=oldFiber;oldFiber=null;}else{nextOldFiber=oldFiber.sibling;}var newFiber=updateSlot(returnFiber,oldFiber,newChildren[newIdx],expirationTime);if(newFiber===null){// TODO: This breaks on empty slots like null children. That's\n// unfortunate because it triggers the slow path all the time. We need\n// a better way to communicate whether this was a miss or null,\n// boolean, undefined, etc.\nif(oldFiber===null){oldFiber=nextOldFiber;}break;}if(shouldTrackSideEffects){if(oldFiber&&newFiber.alternate===null){// We matched the slot, but we didn't reuse the existing fiber, so we\n// need to delete the existing child.\ndeleteChild(returnFiber,oldFiber);}}lastPlacedIndex=placeChild(newFiber,lastPlacedIndex,newIdx);if(previousNewFiber===null){// TODO: Move out of the loop. This only happens for the first run.\nresultingFirstChild=newFiber;}else{// TODO: Defer siblings if we're not at the right index for this slot.\n// I.e. if we had null values before, then we want to defer this\n// for each null value. However, we also don't want to call updateSlot\n// with the previous one.\npreviousNewFiber.sibling=newFiber;}previousNewFiber=newFiber;oldFiber=nextOldFiber;}if(newIdx===newChildren.length){// We've reached the end of the new children. We can delete the rest.\ndeleteRemainingChildren(returnFiber,oldFiber);return resultingFirstChild;}if(oldFiber===null){// If we don't have any more existing children we can choose a fast path\n// since the rest will all be insertions.\nfor(;newIdx<newChildren.length;newIdx++){var _newFiber=createChild(returnFiber,newChildren[newIdx],expirationTime);if(_newFiber===null){continue;}lastPlacedIndex=placeChild(_newFiber,lastPlacedIndex,newIdx);if(previousNewFiber===null){// TODO: Move out of the loop. This only happens for the first run.\nresultingFirstChild=_newFiber;}else{previousNewFiber.sibling=_newFiber;}previousNewFiber=_newFiber;}return resultingFirstChild;}// Add all children to a key map for quick lookups.\nvar existingChildren=mapRemainingChildren(returnFiber,oldFiber);// Keep scanning and use the map to restore deleted items as moves.\nfor(;newIdx<newChildren.length;newIdx++){var _newFiber2=updateFromMap(existingChildren,returnFiber,newIdx,newChildren[newIdx],expirationTime);if(_newFiber2!==null){if(shouldTrackSideEffects){if(_newFiber2.alternate!==null){// The new fiber is a work in progress, but if there exists a\n// current, that means that we reused the fiber. We need to delete\n// it from the child list so that we don't add it to the deletion\n// list.\nexistingChildren.delete(_newFiber2.key===null?newIdx:_newFiber2.key);}}lastPlacedIndex=placeChild(_newFiber2,lastPlacedIndex,newIdx);if(previousNewFiber===null){resultingFirstChild=_newFiber2;}else{previousNewFiber.sibling=_newFiber2;}previousNewFiber=_newFiber2;}}if(shouldTrackSideEffects){// Any existing children that weren't consumed above were deleted. We need\n// to add them to the deletion list.\nexistingChildren.forEach(function(child){return deleteChild(returnFiber,child);});}return resultingFirstChild;}function reconcileChildrenIterator(returnFiber,currentFirstChild,newChildrenIterable,expirationTime){// This is the same implementation as reconcileChildrenArray(),\n// but using the iterator instead.\nvar iteratorFn=getIteratorFn(newChildrenIterable);(function(){if(!(typeof iteratorFn==='function')){{throw ReactError(Error('An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.'));}}})();{// We don't support rendering Generators because it's a mutation.\n// See https://github.com/facebook/react/issues/12995\nif(typeof Symbol==='function'&&// $FlowFixMe Flow doesn't know about toStringTag\nnewChildrenIterable[Symbol.toStringTag]==='Generator'){!didWarnAboutGenerators?warning$1(false,'Using Generators as children is unsupported and will likely yield '+'unexpected results because enumerating a generator mutates it. '+'You may convert it to an array with `Array.from()` or the '+'`[...spread]` operator before rendering. Keep in mind '+'you might need to polyfill these features for older browsers.'):void 0;didWarnAboutGenerators=true;}// Warn about using Maps as children\nif(newChildrenIterable.entries===iteratorFn){!didWarnAboutMaps?warning$1(false,'Using Maps as children is unsupported and will likely yield '+'unexpected results. Convert it to a sequence/iterable of keyed '+'ReactElements instead.'):void 0;didWarnAboutMaps=true;}// First, validate keys.\n// We'll get a different iterator later for the main pass.\nvar _newChildren=iteratorFn.call(newChildrenIterable);if(_newChildren){var knownKeys=null;var _step=_newChildren.next();for(;!_step.done;_step=_newChildren.next()){var child=_step.value;knownKeys=warnOnInvalidKey(child,knownKeys);}}}var newChildren=iteratorFn.call(newChildrenIterable);(function(){if(!(newChildren!=null)){{throw ReactError(Error('An iterable object provided no iterator.'));}}})();var resultingFirstChild=null;var previousNewFiber=null;var oldFiber=currentFirstChild;var lastPlacedIndex=0;var newIdx=0;var nextOldFiber=null;var step=newChildren.next();for(;oldFiber!==null&&!step.done;newIdx++,step=newChildren.next()){if(oldFiber.index>newIdx){nextOldFiber=oldFiber;oldFiber=null;}else{nextOldFiber=oldFiber.sibling;}var newFiber=updateSlot(returnFiber,oldFiber,step.value,expirationTime);if(newFiber===null){// TODO: This breaks on empty slots like null children. That's\n// unfortunate because it triggers the slow path all the time. We need\n// a better way to communicate whether this was a miss or null,\n// boolean, undefined, etc.\nif(oldFiber===null){oldFiber=nextOldFiber;}break;}if(shouldTrackSideEffects){if(oldFiber&&newFiber.alternate===null){// We matched the slot, but we didn't reuse the existing fiber, so we\n// need to delete the existing child.\ndeleteChild(returnFiber,oldFiber);}}lastPlacedIndex=placeChild(newFiber,lastPlacedIndex,newIdx);if(previousNewFiber===null){// TODO: Move out of the loop. This only happens for the first run.\nresultingFirstChild=newFiber;}else{// TODO: Defer siblings if we're not at the right index for this slot.\n// I.e. if we had null values before, then we want to defer this\n// for each null value. However, we also don't want to call updateSlot\n// with the previous one.\npreviousNewFiber.sibling=newFiber;}previousNewFiber=newFiber;oldFiber=nextOldFiber;}if(step.done){// We've reached the end of the new children. We can delete the rest.\ndeleteRemainingChildren(returnFiber,oldFiber);return resultingFirstChild;}if(oldFiber===null){// If we don't have any more existing children we can choose a fast path\n// since the rest will all be insertions.\nfor(;!step.done;newIdx++,step=newChildren.next()){var _newFiber3=createChild(returnFiber,step.value,expirationTime);if(_newFiber3===null){continue;}lastPlacedIndex=placeChild(_newFiber3,lastPlacedIndex,newIdx);if(previousNewFiber===null){// TODO: Move out of the loop. This only happens for the first run.\nresultingFirstChild=_newFiber3;}else{previousNewFiber.sibling=_newFiber3;}previousNewFiber=_newFiber3;}return resultingFirstChild;}// Add all children to a key map for quick lookups.\nvar existingChildren=mapRemainingChildren(returnFiber,oldFiber);// Keep scanning and use the map to restore deleted items as moves.\nfor(;!step.done;newIdx++,step=newChildren.next()){var _newFiber4=updateFromMap(existingChildren,returnFiber,newIdx,step.value,expirationTime);if(_newFiber4!==null){if(shouldTrackSideEffects){if(_newFiber4.alternate!==null){// The new fiber is a work in progress, but if there exists a\n// current, that means that we reused the fiber. We need to delete\n// it from the child list so that we don't add it to the deletion\n// list.\nexistingChildren.delete(_newFiber4.key===null?newIdx:_newFiber4.key);}}lastPlacedIndex=placeChild(_newFiber4,lastPlacedIndex,newIdx);if(previousNewFiber===null){resultingFirstChild=_newFiber4;}else{previousNewFiber.sibling=_newFiber4;}previousNewFiber=_newFiber4;}}if(shouldTrackSideEffects){// Any existing children that weren't consumed above were deleted. We need\n// to add them to the deletion list.\nexistingChildren.forEach(function(child){return deleteChild(returnFiber,child);});}return resultingFirstChild;}function reconcileSingleTextNode(returnFiber,currentFirstChild,textContent,expirationTime){// There's no need to check for keys on text nodes since we don't have a\n// way to define them.\nif(currentFirstChild!==null&&currentFirstChild.tag===HostText){// We already have an existing node so let's just update it and delete\n// the rest.\ndeleteRemainingChildren(returnFiber,currentFirstChild.sibling);var existing=useFiber(currentFirstChild,textContent,expirationTime);existing.return=returnFiber;return existing;}// The existing first child is not a text node so we need to create one\n// and delete the existing ones.\ndeleteRemainingChildren(returnFiber,currentFirstChild);var created=createFiberFromText(textContent,returnFiber.mode,expirationTime);created.return=returnFiber;return created;}function reconcileSingleElement(returnFiber,currentFirstChild,element,expirationTime){var key=element.key;var child=currentFirstChild;while(child!==null){// TODO: If key === null and child.key === null, then this only applies to\n// the first item in the list.\nif(child.key===key){if(child.tag===Fragment?element.type===REACT_FRAGMENT_TYPE:child.elementType===element.type||// Keep this check inline so it only runs on the false path:\nisCompatibleFamilyForHotReloading(child,element)){deleteRemainingChildren(returnFiber,child.sibling);var existing=useFiber(child,element.type===REACT_FRAGMENT_TYPE?element.props.children:element.props,expirationTime);existing.ref=coerceRef(returnFiber,child,element);existing.return=returnFiber;{existing._debugSource=element._source;existing._debugOwner=element._owner;}return existing;}else{deleteRemainingChildren(returnFiber,child);break;}}else{deleteChild(returnFiber,child);}child=child.sibling;}if(element.type===REACT_FRAGMENT_TYPE){var created=createFiberFromFragment(element.props.children,returnFiber.mode,expirationTime,element.key);created.return=returnFiber;return created;}else{var _created4=createFiberFromElement(element,returnFiber.mode,expirationTime);_created4.ref=coerceRef(returnFiber,currentFirstChild,element);_created4.return=returnFiber;return _created4;}}function reconcileSinglePortal(returnFiber,currentFirstChild,portal,expirationTime){var key=portal.key;var child=currentFirstChild;while(child!==null){// TODO: If key === null and child.key === null, then this only applies to\n// the first item in the list.\nif(child.key===key){if(child.tag===HostPortal&&child.stateNode.containerInfo===portal.containerInfo&&child.stateNode.implementation===portal.implementation){deleteRemainingChildren(returnFiber,child.sibling);var existing=useFiber(child,portal.children||[],expirationTime);existing.return=returnFiber;return existing;}else{deleteRemainingChildren(returnFiber,child);break;}}else{deleteChild(returnFiber,child);}child=child.sibling;}var created=createFiberFromPortal(portal,returnFiber.mode,expirationTime);created.return=returnFiber;return created;}// This API will tag the children with the side-effect of the reconciliation\n// itself. They will be added to the side-effect list as we pass through the\n// children and the parent.\nfunction reconcileChildFibers(returnFiber,currentFirstChild,newChild,expirationTime){// This function is not recursive.\n// If the top level item is an array, we treat it as a set of children,\n// not as a fragment. Nested arrays on the other hand will be treated as\n// fragment nodes. Recursion happens at the normal flow.\n// Handle top level unkeyed fragments as if they were arrays.\n// This leads to an ambiguity between <>{[...]}</> and <>...</>.\n// We treat the ambiguous cases above the same.\nvar isUnkeyedTopLevelFragment=typeof newChild==='object'&&newChild!==null&&newChild.type===REACT_FRAGMENT_TYPE&&newChild.key===null;if(isUnkeyedTopLevelFragment){newChild=newChild.props.children;}// Handle object types\nvar isObject=typeof newChild==='object'&&newChild!==null;if(isObject){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:return placeSingleChild(reconcileSingleElement(returnFiber,currentFirstChild,newChild,expirationTime));case REACT_PORTAL_TYPE:return placeSingleChild(reconcileSinglePortal(returnFiber,currentFirstChild,newChild,expirationTime));}}if(typeof newChild==='string'||typeof newChild==='number'){return placeSingleChild(reconcileSingleTextNode(returnFiber,currentFirstChild,''+newChild,expirationTime));}if(isArray(newChild)){return reconcileChildrenArray(returnFiber,currentFirstChild,newChild,expirationTime);}if(getIteratorFn(newChild)){return reconcileChildrenIterator(returnFiber,currentFirstChild,newChild,expirationTime);}if(isObject){throwOnInvalidObjectType(returnFiber,newChild);}{if(typeof newChild==='function'){warnOnFunctionType();}}if(typeof newChild==='undefined'&&!isUnkeyedTopLevelFragment){// If the new child is undefined, and the return fiber is a composite\n// component, throw an error. If Fiber return types are disabled,\n// we already threw above.\nswitch(returnFiber.tag){case ClassComponent:{{var instance=returnFiber.stateNode;if(instance.render._isMockFunction){// We allow auto-mocks to proceed as if they're returning null.\nbreak;}}}// Intentionally fall through to the next case, which handles both\n// functions and classes\n// eslint-disable-next-lined no-fallthrough\ncase FunctionComponent:{var Component=returnFiber.type;(function(){{{throw ReactError(Error((Component.displayName||Component.name||'Component')+'(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.'));}}})();}}}// Remaining cases are all treated as empty.\nreturn deleteRemainingChildren(returnFiber,currentFirstChild);}return reconcileChildFibers;}var reconcileChildFibers=ChildReconciler(true);var mountChildFibers=ChildReconciler(false);function cloneChildFibers(current$$1,workInProgress){(function(){if(!(current$$1===null||workInProgress.child===current$$1.child)){{throw ReactError(Error('Resuming work not yet implemented.'));}}})();if(workInProgress.child===null){return;}var currentChild=workInProgress.child;var newChild=createWorkInProgress(currentChild,currentChild.pendingProps,currentChild.expirationTime);workInProgress.child=newChild;newChild.return=workInProgress;while(currentChild.sibling!==null){currentChild=currentChild.sibling;newChild=newChild.sibling=createWorkInProgress(currentChild,currentChild.pendingProps,currentChild.expirationTime);newChild.return=workInProgress;}newChild.sibling=null;}// Reset a workInProgress child set to prepare it for a second pass.\nfunction resetChildFibers(workInProgress,renderExpirationTime){var child=workInProgress.child;while(child!==null){resetWorkInProgress(child,renderExpirationTime);child=child.sibling;}}var NO_CONTEXT={};var contextStackCursor$1=createCursor(NO_CONTEXT);var contextFiberStackCursor=createCursor(NO_CONTEXT);var rootInstanceStackCursor=createCursor(NO_CONTEXT);function requiredContext(c){(function(){if(!(c!==NO_CONTEXT)){{throw ReactError(Error('Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.'));}}})();return c;}function getRootHostContainer(){var rootInstance=requiredContext(rootInstanceStackCursor.current);return rootInstance;}function pushHostContainer(fiber,nextRootInstance){// Push current root instance onto the stack;\n// This allows us to reset root when portals are popped.\npush(rootInstanceStackCursor,nextRootInstance,fiber);// Track the context and the Fiber that provided it.\n// This enables us to pop only Fibers that provide unique contexts.\npush(contextFiberStackCursor,fiber,fiber);// Finally, we need to push the host context to the stack.\n// However, we can't just call getRootHostContext() and push it because\n// we'd have a different number of entries on the stack depending on\n// whether getRootHostContext() throws somewhere in renderer code or not.\n// So we push an empty value first. This lets us safely unwind on errors.\npush(contextStackCursor$1,NO_CONTEXT,fiber);var nextRootContext=getRootHostContext(nextRootInstance);// Now that we know this function doesn't throw, replace it.\npop(contextStackCursor$1,fiber);push(contextStackCursor$1,nextRootContext,fiber);}function popHostContainer(fiber){pop(contextStackCursor$1,fiber);pop(contextFiberStackCursor,fiber);pop(rootInstanceStackCursor,fiber);}function getHostContext(){var context=requiredContext(contextStackCursor$1.current);return context;}function pushHostContext(fiber){var rootInstance=requiredContext(rootInstanceStackCursor.current);var context=requiredContext(contextStackCursor$1.current);var nextContext=getChildHostContext(context,fiber.type,rootInstance);// Don't push this Fiber's context unless it's unique.\nif(context===nextContext){return;}// Track the context and the Fiber that provided it.\n// This enables us to pop only Fibers that provide unique contexts.\npush(contextFiberStackCursor,fiber,fiber);push(contextStackCursor$1,nextContext,fiber);}function popHostContext(fiber){// Do not pop unless this Fiber provided the current context.\n// pushHostContext() only pushes Fibers that provide unique contexts.\nif(contextFiberStackCursor.current!==fiber){return;}pop(contextStackCursor$1,fiber);pop(contextFiberStackCursor,fiber);}var DefaultSuspenseContext=0;// The Suspense Context is split into two parts. The lower bits is\n// inherited deeply down the subtree. The upper bits only affect\n// this immediate suspense boundary and gets reset each new\n// boundary or suspense list.\nvar SubtreeSuspenseContextMask=1;// Subtree Flags:\n// InvisibleParentSuspenseContext indicates that one of our parent Suspense\n// boundaries is not currently showing visible main content.\n// Either because it is already showing a fallback or is not mounted at all.\n// We can use this to determine if it is desirable to trigger a fallback at\n// the parent. If not, then we might need to trigger undesirable boundaries\n// and/or suspend the commit to avoid hiding the parent content.\nvar InvisibleParentSuspenseContext=1;// Shallow Flags:\n// ForceSuspenseFallback can be used by SuspenseList to force newly added\n// items into their fallback state during one of the render passes.\nvar ForceSuspenseFallback=2;var suspenseStackCursor=createCursor(DefaultSuspenseContext);function hasSuspenseContext(parentContext,flag){return(parentContext&flag)!==0;}function setDefaultShallowSuspenseContext(parentContext){return parentContext&SubtreeSuspenseContextMask;}function setShallowSuspenseContext(parentContext,shallowContext){return parentContext&SubtreeSuspenseContextMask|shallowContext;}function addSubtreeSuspenseContext(parentContext,subtreeContext){return parentContext|subtreeContext;}function pushSuspenseContext(fiber,newContext){push(suspenseStackCursor,newContext,fiber);}function popSuspenseContext(fiber){pop(suspenseStackCursor,fiber);}// TODO: This is now an empty object. Should we switch this to a boolean?\n// Alternatively we can make this use an effect tag similar to SuspenseList.\nfunction shouldCaptureSuspense(workInProgress,hasInvisibleParent){// If it was the primary children that just suspended, capture and render the\nvar nextState=workInProgress.memoizedState;if(nextState!==null){return false;}var props=workInProgress.memoizedProps;// In order to capture, the Suspense component must have a fallback prop.\nif(props.fallback===undefined){return false;}// Regular boundaries always capture.\nif(props.unstable_avoidThisFallback!==true){return true;}// If it's a boundary we should avoid, then we prefer to bubble up to the\n// parent boundary if it is currently invisible.\nif(hasInvisibleParent){return false;}// If the parent is not able to handle it, we must handle it.\nreturn true;}function findFirstSuspended(row){var node=row;while(node!==null){if(node.tag===SuspenseComponent){var state=node.memoizedState;if(state!==null){return node;}}else if(node.tag===SuspenseListComponent&&// revealOrder undefined can't be trusted because it don't\n// keep track of whether it suspended or not.\nnode.memoizedProps.revealOrder!==undefined){var didSuspend=(node.effectTag&DidCapture)!==NoEffect;if(didSuspend){return node;}}else if(node.child!==null){node.child.return=node;node=node.child;continue;}if(node===row){return null;}while(node.sibling===null){if(node.return===null||node.return===row){return null;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}return null;}function createResponderListener(responder,props){var eventResponderListener={responder:responder,props:props};{Object.freeze(eventResponderListener);}return eventResponderListener;}function createResponderInstance(responder,responderProps,responderState,target,fiber){return{fiber:fiber,props:responderProps,responder:responder,rootEventTypes:null,state:responderState,target:target};}var NoEffect$1=/*             */0;var UnmountSnapshot=/*      */2;var UnmountMutation=/*      */4;var MountMutation=/*        */8;var UnmountLayout=/*        */16;var MountLayout=/*          */32;var MountPassive=/*         */64;var UnmountPassive=/*       */128;var ReactCurrentDispatcher$1=ReactSharedInternals.ReactCurrentDispatcher;var didWarnAboutMismatchedHooksForComponent=void 0;{didWarnAboutMismatchedHooksForComponent=new Set();}// These are set right before calling the component.\nvar renderExpirationTime$1=NoWork;// The work-in-progress fiber. I've named it differently to distinguish it from\n// the work-in-progress hook.\nvar currentlyRenderingFiber$1=null;// Hooks are stored as a linked list on the fiber's memoizedState field. The\n// current hook list is the list that belongs to the current fiber. The\n// work-in-progress hook list is a new list that will be added to the\n// work-in-progress fiber.\nvar currentHook=null;var nextCurrentHook=null;var firstWorkInProgressHook=null;var workInProgressHook=null;var nextWorkInProgressHook=null;var remainingExpirationTime=NoWork;var componentUpdateQueue=null;var sideEffectTag=0;// Updates scheduled during render will trigger an immediate re-render at the\n// end of the current pass. We can't store these updates on the normal queue,\n// because if the work is aborted, they should be discarded. Because this is\n// a relatively rare case, we also don't want to add an additional field to\n// either the hook or queue object types. So we store them in a lazily create\n// map of queue -> render-phase updates, which are discarded once the component\n// completes without re-rendering.\n// Whether an update was scheduled during the currently executing render pass.\nvar didScheduleRenderPhaseUpdate=false;// Lazily created map of render-phase updates\nvar renderPhaseUpdates=null;// Counter to prevent infinite loops.\nvar numberOfReRenders=0;var RE_RENDER_LIMIT=25;// In DEV, this is the name of the currently executing primitive hook\nvar currentHookNameInDev=null;// In DEV, this list ensures that hooks are called in the same order between renders.\n// The list stores the order of hooks used during the initial render (mount).\n// Subsequent renders (updates) reference this list.\nvar hookTypesDev=null;var hookTypesUpdateIndexDev=-1;// In DEV, this tracks whether currently rendering component needs to ignore\n// the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n// When true, such Hooks will always be \"remounted\". Only used during hot reload.\nvar ignorePreviousDependencies=false;function mountHookTypesDev(){{var hookName=currentHookNameInDev;if(hookTypesDev===null){hookTypesDev=[hookName];}else{hookTypesDev.push(hookName);}}}function updateHookTypesDev(){{var hookName=currentHookNameInDev;if(hookTypesDev!==null){hookTypesUpdateIndexDev++;if(hookTypesDev[hookTypesUpdateIndexDev]!==hookName){warnOnHookMismatchInDev(hookName);}}}}function checkDepsAreArrayDev(deps){{if(deps!==undefined&&deps!==null&&!Array.isArray(deps)){// Verify deps, but only on mount to avoid extra checks.\n// It's unlikely their type would change as usually you define them inline.\nwarning$1(false,'%s received a final argument that is not an array (instead, received `%s`). When '+'specified, the final argument must be an array.',currentHookNameInDev,typeof deps);}}}function warnOnHookMismatchInDev(currentHookName){{var componentName=getComponentName(currentlyRenderingFiber$1.type);if(!didWarnAboutMismatchedHooksForComponent.has(componentName)){didWarnAboutMismatchedHooksForComponent.add(componentName);if(hookTypesDev!==null){var table='';var secondColumnStart=30;for(var i=0;i<=hookTypesUpdateIndexDev;i++){var oldHookName=hookTypesDev[i];var newHookName=i===hookTypesUpdateIndexDev?currentHookName:oldHookName;var row=i+1+'. '+oldHookName;// Extra space so second column lines up\n// lol @ IE not supporting String#repeat\nwhile(row.length<secondColumnStart){row+=' ';}row+=newHookName+'\\n';table+=row;}warning$1(false,'React has detected a change in the order of Hooks called by %s. '+'This will lead to bugs and errors if not fixed. '+'For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\\n\\n'+'   Previous render            Next render\\n'+'   ------------------------------------------------------\\n'+'%s'+'   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n',componentName,table);}}}}function throwInvalidHookError(){(function(){{{throw ReactError(Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\n2. You might be breaking the Rules of Hooks\\n3. You might have more than one copy of React in the same app\\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.'));}}})();}function areHookInputsEqual(nextDeps,prevDeps){{if(ignorePreviousDependencies){// Only true when this component is being hot reloaded.\nreturn false;}}if(prevDeps===null){{warning$1(false,'%s received a final argument during this render, but not during '+'the previous render. Even though the final argument is optional, '+'its type cannot change between renders.',currentHookNameInDev);}return false;}{// Don't bother comparing lengths in prod because these arrays should be\n// passed inline.\nif(nextDeps.length!==prevDeps.length){warning$1(false,'The final argument passed to %s changed size between renders. The '+'order and size of this array must remain constant.\\n\\n'+'Previous: %s\\n'+'Incoming: %s',currentHookNameInDev,'['+prevDeps.join(', ')+']','['+nextDeps.join(', ')+']');}}for(var i=0;i<prevDeps.length&&i<nextDeps.length;i++){if(is(nextDeps[i],prevDeps[i])){continue;}return false;}return true;}function renderWithHooks(current,workInProgress,Component,props,refOrContext,nextRenderExpirationTime){renderExpirationTime$1=nextRenderExpirationTime;currentlyRenderingFiber$1=workInProgress;nextCurrentHook=current!==null?current.memoizedState:null;{hookTypesDev=current!==null?current._debugHookTypes:null;hookTypesUpdateIndexDev=-1;// Used for hot reloading:\nignorePreviousDependencies=current!==null&&current.type!==workInProgress.type;}// The following should have already been reset\n// currentHook = null;\n// workInProgressHook = null;\n// remainingExpirationTime = NoWork;\n// componentUpdateQueue = null;\n// didScheduleRenderPhaseUpdate = false;\n// renderPhaseUpdates = null;\n// numberOfReRenders = 0;\n// sideEffectTag = 0;\n// TODO Warn if no hooks are used at all during mount, then some are used during update.\n// Currently we will identify the update render as a mount because nextCurrentHook === null.\n// This is tricky because it's valid for certain types of components (e.g. React.lazy)\n// Using nextCurrentHook to differentiate between mount/update only works if at least one stateful hook is used.\n// Non-stateful hooks (e.g. context) don't get added to memoizedState,\n// so nextCurrentHook would be null during updates and mounts.\n{if(nextCurrentHook!==null){ReactCurrentDispatcher$1.current=HooksDispatcherOnUpdateInDEV;}else if(hookTypesDev!==null){// This dispatcher handles an edge case where a component is updating,\n// but no stateful hooks have been used.\n// We want to match the production code behavior (which will use HooksDispatcherOnMount),\n// but with the extra DEV validation to ensure hooks ordering hasn't changed.\n// This dispatcher does that.\nReactCurrentDispatcher$1.current=HooksDispatcherOnMountWithHookTypesInDEV;}else{ReactCurrentDispatcher$1.current=HooksDispatcherOnMountInDEV;}}var children=Component(props,refOrContext);if(didScheduleRenderPhaseUpdate){do{didScheduleRenderPhaseUpdate=false;numberOfReRenders+=1;// Start over from the beginning of the list\nnextCurrentHook=current!==null?current.memoizedState:null;nextWorkInProgressHook=firstWorkInProgressHook;currentHook=null;workInProgressHook=null;componentUpdateQueue=null;{// Also validate hook order for cascading updates.\nhookTypesUpdateIndexDev=-1;}ReactCurrentDispatcher$1.current=HooksDispatcherOnUpdateInDEV;children=Component(props,refOrContext);}while(didScheduleRenderPhaseUpdate);renderPhaseUpdates=null;numberOfReRenders=0;}// We can assume the previous dispatcher is always this one, since we set it\n// at the beginning of the render phase and there's no re-entrancy.\nReactCurrentDispatcher$1.current=ContextOnlyDispatcher;var renderedWork=currentlyRenderingFiber$1;renderedWork.memoizedState=firstWorkInProgressHook;renderedWork.expirationTime=remainingExpirationTime;renderedWork.updateQueue=componentUpdateQueue;renderedWork.effectTag|=sideEffectTag;{renderedWork._debugHookTypes=hookTypesDev;}// This check uses currentHook so that it works the same in DEV and prod bundles.\n// hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\nvar didRenderTooFewHooks=currentHook!==null&&currentHook.next!==null;renderExpirationTime$1=NoWork;currentlyRenderingFiber$1=null;currentHook=null;nextCurrentHook=null;firstWorkInProgressHook=null;workInProgressHook=null;nextWorkInProgressHook=null;{currentHookNameInDev=null;hookTypesDev=null;hookTypesUpdateIndexDev=-1;}remainingExpirationTime=NoWork;componentUpdateQueue=null;sideEffectTag=0;// These were reset above\n// didScheduleRenderPhaseUpdate = false;\n// renderPhaseUpdates = null;\n// numberOfReRenders = 0;\n(function(){if(!!didRenderTooFewHooks){{throw ReactError(Error('Rendered fewer hooks than expected. This may be caused by an accidental early return statement.'));}}})();return children;}function bailoutHooks(current,workInProgress,expirationTime){workInProgress.updateQueue=current.updateQueue;workInProgress.effectTag&=~(Passive|Update);if(current.expirationTime<=expirationTime){current.expirationTime=NoWork;}}function resetHooks(){// We can assume the previous dispatcher is always this one, since we set it\n// at the beginning of the render phase and there's no re-entrancy.\nReactCurrentDispatcher$1.current=ContextOnlyDispatcher;// This is used to reset the state of this module when a component throws.\n// It's also called inside mountIndeterminateComponent if we determine the\n// component is a module-style component.\nrenderExpirationTime$1=NoWork;currentlyRenderingFiber$1=null;currentHook=null;nextCurrentHook=null;firstWorkInProgressHook=null;workInProgressHook=null;nextWorkInProgressHook=null;{hookTypesDev=null;hookTypesUpdateIndexDev=-1;currentHookNameInDev=null;}remainingExpirationTime=NoWork;componentUpdateQueue=null;sideEffectTag=0;didScheduleRenderPhaseUpdate=false;renderPhaseUpdates=null;numberOfReRenders=0;}function mountWorkInProgressHook(){var hook={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};if(workInProgressHook===null){// This is the first hook in the list\nfirstWorkInProgressHook=workInProgressHook=hook;}else{// Append to the end of the list\nworkInProgressHook=workInProgressHook.next=hook;}return workInProgressHook;}function updateWorkInProgressHook(){// This function is used both for updates and for re-renders triggered by a\n// render phase update. It assumes there is either a current hook we can\n// clone, or a work-in-progress hook from a previous render pass that we can\n// use as a base. When we reach the end of the base list, we must switch to\n// the dispatcher used for mounts.\nif(nextWorkInProgressHook!==null){// There's already a work-in-progress. Reuse it.\nworkInProgressHook=nextWorkInProgressHook;nextWorkInProgressHook=workInProgressHook.next;currentHook=nextCurrentHook;nextCurrentHook=currentHook!==null?currentHook.next:null;}else{// Clone from the current hook.\n(function(){if(!(nextCurrentHook!==null)){{throw ReactError(Error('Rendered more hooks than during the previous render.'));}}})();currentHook=nextCurrentHook;var newHook={memoizedState:currentHook.memoizedState,baseState:currentHook.baseState,queue:currentHook.queue,baseUpdate:currentHook.baseUpdate,next:null};if(workInProgressHook===null){// This is the first hook in the list.\nworkInProgressHook=firstWorkInProgressHook=newHook;}else{// Append to the end of the list.\nworkInProgressHook=workInProgressHook.next=newHook;}nextCurrentHook=currentHook.next;}return workInProgressHook;}function createFunctionComponentUpdateQueue(){return{lastEffect:null};}function basicStateReducer(state,action){return typeof action==='function'?action(state):action;}function mountReducer(reducer,initialArg,init){var hook=mountWorkInProgressHook();var initialState=void 0;if(init!==undefined){initialState=init(initialArg);}else{initialState=initialArg;}hook.memoizedState=hook.baseState=initialState;var queue=hook.queue={last:null,dispatch:null,lastRenderedReducer:reducer,lastRenderedState:initialState};var dispatch=queue.dispatch=dispatchAction.bind(null,// Flow doesn't know this is non-null, but we do.\ncurrentlyRenderingFiber$1,queue);return[hook.memoizedState,dispatch];}function updateReducer(reducer,initialArg,init){var hook=updateWorkInProgressHook();var queue=hook.queue;(function(){if(!(queue!==null)){{throw ReactError(Error('Should have a queue. This is likely a bug in React. Please file an issue.'));}}})();queue.lastRenderedReducer=reducer;if(numberOfReRenders>0){// This is a re-render. Apply the new render phase updates to the previous\nvar _dispatch=queue.dispatch;if(renderPhaseUpdates!==null){// Render phase updates are stored in a map of queue -> linked list\nvar firstRenderPhaseUpdate=renderPhaseUpdates.get(queue);if(firstRenderPhaseUpdate!==undefined){renderPhaseUpdates.delete(queue);var newState=hook.memoizedState;var update=firstRenderPhaseUpdate;do{// Process this render phase update. We don't have to check the\n// priority because it will always be the same as the current\n// render's.\nvar _action=update.action;newState=reducer(newState,_action);update=update.next;}while(update!==null);// Mark that the fiber performed work, but only if the new state is\n// different from the current state.\nif(!is(newState,hook.memoizedState)){markWorkInProgressReceivedUpdate();}hook.memoizedState=newState;// Don't persist the state accumulated from the render phase updates to\n// the base state unless the queue is empty.\n// TODO: Not sure if this is the desired semantics, but it's what we\n// do for gDSFP. I can't remember why.\nif(hook.baseUpdate===queue.last){hook.baseState=newState;}queue.lastRenderedState=newState;return[newState,_dispatch];}}return[hook.memoizedState,_dispatch];}// The last update in the entire queue\nvar last=queue.last;// The last update that is part of the base state.\nvar baseUpdate=hook.baseUpdate;var baseState=hook.baseState;// Find the first unprocessed update.\nvar first=void 0;if(baseUpdate!==null){if(last!==null){// For the first update, the queue is a circular linked list where\n// `queue.last.next = queue.first`. Once the first update commits, and\n// the `baseUpdate` is no longer empty, we can unravel the list.\nlast.next=null;}first=baseUpdate.next;}else{first=last!==null?last.next:null;}if(first!==null){var _newState=baseState;var newBaseState=null;var newBaseUpdate=null;var prevUpdate=baseUpdate;var _update=first;var didSkip=false;do{var updateExpirationTime=_update.expirationTime;if(updateExpirationTime<renderExpirationTime$1){// Priority is insufficient. Skip this update. If this is the first\n// skipped update, the previous update/state is the new base\n// update/state.\nif(!didSkip){didSkip=true;newBaseUpdate=prevUpdate;newBaseState=_newState;}// Update the remaining priority in the queue.\nif(updateExpirationTime>remainingExpirationTime){remainingExpirationTime=updateExpirationTime;}}else{// This update does have sufficient priority.\n// Mark the event time of this update as relevant to this render pass.\n// TODO: This should ideally use the true event time of this update rather than\n// its priority which is a derived and not reverseable value.\n// TODO: We should skip this update if it was already committed but currently\n// we have no way of detecting the difference between a committed and suspended\n// update here.\nmarkRenderEventTimeAndConfig(updateExpirationTime,_update.suspenseConfig);// Process this update.\nif(_update.eagerReducer===reducer){// If this update was processed eagerly, and its reducer matches the\n// current reducer, we can use the eagerly computed state.\n_newState=_update.eagerState;}else{var _action2=_update.action;_newState=reducer(_newState,_action2);}}prevUpdate=_update;_update=_update.next;}while(_update!==null&&_update!==first);if(!didSkip){newBaseUpdate=prevUpdate;newBaseState=_newState;}// Mark that the fiber performed work, but only if the new state is\n// different from the current state.\nif(!is(_newState,hook.memoizedState)){markWorkInProgressReceivedUpdate();}hook.memoizedState=_newState;hook.baseUpdate=newBaseUpdate;hook.baseState=newBaseState;queue.lastRenderedState=_newState;}var dispatch=queue.dispatch;return[hook.memoizedState,dispatch];}function mountState(initialState){var hook=mountWorkInProgressHook();if(typeof initialState==='function'){initialState=initialState();}hook.memoizedState=hook.baseState=initialState;var queue=hook.queue={last:null,dispatch:null,lastRenderedReducer:basicStateReducer,lastRenderedState:initialState};var dispatch=queue.dispatch=dispatchAction.bind(null,// Flow doesn't know this is non-null, but we do.\ncurrentlyRenderingFiber$1,queue);return[hook.memoizedState,dispatch];}function updateState(initialState){return updateReducer(basicStateReducer,initialState);}function pushEffect(tag,create,destroy,deps){var effect={tag:tag,create:create,destroy:destroy,deps:deps,// Circular\nnext:null};if(componentUpdateQueue===null){componentUpdateQueue=createFunctionComponentUpdateQueue();componentUpdateQueue.lastEffect=effect.next=effect;}else{var _lastEffect=componentUpdateQueue.lastEffect;if(_lastEffect===null){componentUpdateQueue.lastEffect=effect.next=effect;}else{var firstEffect=_lastEffect.next;_lastEffect.next=effect;effect.next=firstEffect;componentUpdateQueue.lastEffect=effect;}}return effect;}function mountRef(initialValue){var hook=mountWorkInProgressHook();var ref={current:initialValue};{Object.seal(ref);}hook.memoizedState=ref;return ref;}function updateRef(initialValue){var hook=updateWorkInProgressHook();return hook.memoizedState;}function mountEffectImpl(fiberEffectTag,hookEffectTag,create,deps){var hook=mountWorkInProgressHook();var nextDeps=deps===undefined?null:deps;sideEffectTag|=fiberEffectTag;hook.memoizedState=pushEffect(hookEffectTag,create,undefined,nextDeps);}function updateEffectImpl(fiberEffectTag,hookEffectTag,create,deps){var hook=updateWorkInProgressHook();var nextDeps=deps===undefined?null:deps;var destroy=undefined;if(currentHook!==null){var prevEffect=currentHook.memoizedState;destroy=prevEffect.destroy;if(nextDeps!==null){var prevDeps=prevEffect.deps;if(areHookInputsEqual(nextDeps,prevDeps)){pushEffect(NoEffect$1,create,destroy,nextDeps);return;}}}sideEffectTag|=fiberEffectTag;hook.memoizedState=pushEffect(hookEffectTag,create,destroy,nextDeps);}function mountEffect(create,deps){{// $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\nif('undefined'!==typeof jest){warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);}}return mountEffectImpl(Update|Passive,UnmountPassive|MountPassive,create,deps);}function updateEffect(create,deps){{// $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\nif('undefined'!==typeof jest){warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);}}return updateEffectImpl(Update|Passive,UnmountPassive|MountPassive,create,deps);}function mountLayoutEffect(create,deps){return mountEffectImpl(Update,UnmountMutation|MountLayout,create,deps);}function updateLayoutEffect(create,deps){return updateEffectImpl(Update,UnmountMutation|MountLayout,create,deps);}function imperativeHandleEffect(create,ref){if(typeof ref==='function'){var refCallback=ref;var _inst=create();refCallback(_inst);return function(){refCallback(null);};}else if(ref!==null&&ref!==undefined){var refObject=ref;{!refObject.hasOwnProperty('current')?warning$1(false,'Expected useImperativeHandle() first argument to either be a '+'ref callback or React.createRef() object. Instead received: %s.','an object with keys {'+Object.keys(refObject).join(', ')+'}'):void 0;}var _inst2=create();refObject.current=_inst2;return function(){refObject.current=null;};}}function mountImperativeHandle(ref,create,deps){{!(typeof create==='function')?warning$1(false,'Expected useImperativeHandle() second argument to be a function '+'that creates a handle. Instead received: %s.',create!==null?typeof create:'null'):void 0;}// TODO: If deps are provided, should we skip comparing the ref itself?\nvar effectDeps=deps!==null&&deps!==undefined?deps.concat([ref]):null;return mountEffectImpl(Update,UnmountMutation|MountLayout,imperativeHandleEffect.bind(null,create,ref),effectDeps);}function updateImperativeHandle(ref,create,deps){{!(typeof create==='function')?warning$1(false,'Expected useImperativeHandle() second argument to be a function '+'that creates a handle. Instead received: %s.',create!==null?typeof create:'null'):void 0;}// TODO: If deps are provided, should we skip comparing the ref itself?\nvar effectDeps=deps!==null&&deps!==undefined?deps.concat([ref]):null;return updateEffectImpl(Update,UnmountMutation|MountLayout,imperativeHandleEffect.bind(null,create,ref),effectDeps);}function mountDebugValue(value,formatterFn){// This hook is normally a no-op.\n// The react-debug-hooks package injects its own implementation\n// so that e.g. DevTools can display custom hook values.\n}var updateDebugValue=mountDebugValue;function mountCallback(callback,deps){var hook=mountWorkInProgressHook();var nextDeps=deps===undefined?null:deps;hook.memoizedState=[callback,nextDeps];return callback;}function updateCallback(callback,deps){var hook=updateWorkInProgressHook();var nextDeps=deps===undefined?null:deps;var prevState=hook.memoizedState;if(prevState!==null){if(nextDeps!==null){var prevDeps=prevState[1];if(areHookInputsEqual(nextDeps,prevDeps)){return prevState[0];}}}hook.memoizedState=[callback,nextDeps];return callback;}function mountMemo(nextCreate,deps){var hook=mountWorkInProgressHook();var nextDeps=deps===undefined?null:deps;var nextValue=nextCreate();hook.memoizedState=[nextValue,nextDeps];return nextValue;}function updateMemo(nextCreate,deps){var hook=updateWorkInProgressHook();var nextDeps=deps===undefined?null:deps;var prevState=hook.memoizedState;if(prevState!==null){// Assume these are defined. If they're not, areHookInputsEqual will warn.\nif(nextDeps!==null){var prevDeps=prevState[1];if(areHookInputsEqual(nextDeps,prevDeps)){return prevState[0];}}}var nextValue=nextCreate();hook.memoizedState=[nextValue,nextDeps];return nextValue;}function dispatchAction(fiber,queue,action){(function(){if(!(numberOfReRenders<RE_RENDER_LIMIT)){{throw ReactError(Error('Too many re-renders. React limits the number of renders to prevent an infinite loop.'));}}})();{!(arguments.length<=3)?warning$1(false,\"State updates from the useState() and useReducer() Hooks don't support the \"+'second callback argument. To execute a side effect after '+'rendering, declare it in the component body with useEffect().'):void 0;}var alternate=fiber.alternate;if(fiber===currentlyRenderingFiber$1||alternate!==null&&alternate===currentlyRenderingFiber$1){// This is a render phase update. Stash it in a lazily-created map of\n// queue -> linked list of updates. After this render pass, we'll restart\n// and apply the stashed updates on top of the work-in-progress hook.\ndidScheduleRenderPhaseUpdate=true;var update={expirationTime:renderExpirationTime$1,suspenseConfig:null,action:action,eagerReducer:null,eagerState:null,next:null};{update.priority=getCurrentPriorityLevel();}if(renderPhaseUpdates===null){renderPhaseUpdates=new Map();}var firstRenderPhaseUpdate=renderPhaseUpdates.get(queue);if(firstRenderPhaseUpdate===undefined){renderPhaseUpdates.set(queue,update);}else{// Append the update to the end of the list.\nvar lastRenderPhaseUpdate=firstRenderPhaseUpdate;while(lastRenderPhaseUpdate.next!==null){lastRenderPhaseUpdate=lastRenderPhaseUpdate.next;}lastRenderPhaseUpdate.next=update;}}else{if(revertPassiveEffectsChange){flushPassiveEffects();}var currentTime=requestCurrentTime();var _suspenseConfig=requestCurrentSuspenseConfig();var _expirationTime=computeExpirationForFiber(currentTime,fiber,_suspenseConfig);var _update2={expirationTime:_expirationTime,suspenseConfig:_suspenseConfig,action:action,eagerReducer:null,eagerState:null,next:null};{_update2.priority=getCurrentPriorityLevel();}// Append the update to the end of the list.\nvar _last=queue.last;if(_last===null){// This is the first update. Create a circular list.\n_update2.next=_update2;}else{var first=_last.next;if(first!==null){// Still circular.\n_update2.next=first;}_last.next=_update2;}queue.last=_update2;if(fiber.expirationTime===NoWork&&(alternate===null||alternate.expirationTime===NoWork)){// The queue is currently empty, which means we can eagerly compute the\n// next state before entering the render phase. If the new state is the\n// same as the current state, we may be able to bail out entirely.\nvar _lastRenderedReducer=queue.lastRenderedReducer;if(_lastRenderedReducer!==null){var prevDispatcher=void 0;{prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;}try{var currentState=queue.lastRenderedState;var _eagerState=_lastRenderedReducer(currentState,action);// Stash the eagerly computed state, and the reducer used to compute\n// it, on the update object. If the reducer hasn't changed by the\n// time we enter the render phase, then the eager state can be used\n// without calling the reducer again.\n_update2.eagerReducer=_lastRenderedReducer;_update2.eagerState=_eagerState;if(is(_eagerState,currentState)){// Fast path. We can bail out without scheduling React to re-render.\n// It's still possible that we'll need to rebase this update later,\n// if the component re-renders for a different reason and by that\n// time the reducer has changed.\nreturn;}}catch(error){// Suppress the error. It will throw again in the render phase.\n}finally{{ReactCurrentDispatcher$1.current=prevDispatcher;}}}}{// $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\nif('undefined'!==typeof jest){warnIfNotScopedWithMatchingAct(fiber);warnIfNotCurrentlyActingUpdatesInDev(fiber);}}scheduleWork(fiber,_expirationTime);}}var ContextOnlyDispatcher={readContext:_readContext,useCallback:throwInvalidHookError,useContext:throwInvalidHookError,useEffect:throwInvalidHookError,useImperativeHandle:throwInvalidHookError,useLayoutEffect:throwInvalidHookError,useMemo:throwInvalidHookError,useReducer:throwInvalidHookError,useRef:throwInvalidHookError,useState:throwInvalidHookError,useDebugValue:throwInvalidHookError,useResponder:throwInvalidHookError};var HooksDispatcherOnMountInDEV=null;var HooksDispatcherOnMountWithHookTypesInDEV=null;var HooksDispatcherOnUpdateInDEV=null;var InvalidNestedHooksDispatcherOnMountInDEV=null;var InvalidNestedHooksDispatcherOnUpdateInDEV=null;{var warnInvalidContextAccess=function warnInvalidContextAccess(){warning$1(false,'Context can only be read while React is rendering. '+'In classes, you can read it in the render method or getDerivedStateFromProps. '+'In function components, you can read it directly in the function body, but not '+'inside Hooks like useReducer() or useMemo().');};var warnInvalidHookAccess=function warnInvalidHookAccess(){warning$1(false,'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. '+'You can only call Hooks at the top level of your React function. '+'For more information, see '+'https://fb.me/rules-of-hooks');};HooksDispatcherOnMountInDEV={readContext:function readContext(context,observedBits){return _readContext(context,observedBits);},useCallback:function useCallback(callback,deps){currentHookNameInDev='useCallback';mountHookTypesDev();checkDepsAreArrayDev(deps);return mountCallback(callback,deps);},useContext:function useContext(context,observedBits){currentHookNameInDev='useContext';mountHookTypesDev();return _readContext(context,observedBits);},useEffect:function useEffect(create,deps){currentHookNameInDev='useEffect';mountHookTypesDev();checkDepsAreArrayDev(deps);return mountEffect(create,deps);},useImperativeHandle:function useImperativeHandle(ref,create,deps){currentHookNameInDev='useImperativeHandle';mountHookTypesDev();checkDepsAreArrayDev(deps);return mountImperativeHandle(ref,create,deps);},useLayoutEffect:function useLayoutEffect(create,deps){currentHookNameInDev='useLayoutEffect';mountHookTypesDev();checkDepsAreArrayDev(deps);return mountLayoutEffect(create,deps);},useMemo:function useMemo(create,deps){currentHookNameInDev='useMemo';mountHookTypesDev();checkDepsAreArrayDev(deps);var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountMemo(create,deps);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useReducer:function useReducer(reducer,initialArg,init){currentHookNameInDev='useReducer';mountHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountReducer(reducer,initialArg,init);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useRef:function useRef(initialValue){currentHookNameInDev='useRef';mountHookTypesDev();return mountRef(initialValue);},useState:function useState(initialState){currentHookNameInDev='useState';mountHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountState(initialState);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useDebugValue:function useDebugValue(value,formatterFn){currentHookNameInDev='useDebugValue';mountHookTypesDev();return mountDebugValue(value,formatterFn);},useResponder:function useResponder(responder,props){currentHookNameInDev='useResponder';mountHookTypesDev();return createResponderListener(responder,props);}};HooksDispatcherOnMountWithHookTypesInDEV={readContext:function readContext(context,observedBits){return _readContext(context,observedBits);},useCallback:function useCallback(callback,deps){currentHookNameInDev='useCallback';updateHookTypesDev();return mountCallback(callback,deps);},useContext:function useContext(context,observedBits){currentHookNameInDev='useContext';updateHookTypesDev();return _readContext(context,observedBits);},useEffect:function useEffect(create,deps){currentHookNameInDev='useEffect';updateHookTypesDev();return mountEffect(create,deps);},useImperativeHandle:function useImperativeHandle(ref,create,deps){currentHookNameInDev='useImperativeHandle';updateHookTypesDev();return mountImperativeHandle(ref,create,deps);},useLayoutEffect:function useLayoutEffect(create,deps){currentHookNameInDev='useLayoutEffect';updateHookTypesDev();return mountLayoutEffect(create,deps);},useMemo:function useMemo(create,deps){currentHookNameInDev='useMemo';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountMemo(create,deps);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useReducer:function useReducer(reducer,initialArg,init){currentHookNameInDev='useReducer';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountReducer(reducer,initialArg,init);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useRef:function useRef(initialValue){currentHookNameInDev='useRef';updateHookTypesDev();return mountRef(initialValue);},useState:function useState(initialState){currentHookNameInDev='useState';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountState(initialState);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useDebugValue:function useDebugValue(value,formatterFn){currentHookNameInDev='useDebugValue';updateHookTypesDev();return mountDebugValue(value,formatterFn);},useResponder:function useResponder(responder,props){currentHookNameInDev='useResponder';updateHookTypesDev();return createResponderListener(responder,props);}};HooksDispatcherOnUpdateInDEV={readContext:function readContext(context,observedBits){return _readContext(context,observedBits);},useCallback:function useCallback(callback,deps){currentHookNameInDev='useCallback';updateHookTypesDev();return updateCallback(callback,deps);},useContext:function useContext(context,observedBits){currentHookNameInDev='useContext';updateHookTypesDev();return _readContext(context,observedBits);},useEffect:function useEffect(create,deps){currentHookNameInDev='useEffect';updateHookTypesDev();return updateEffect(create,deps);},useImperativeHandle:function useImperativeHandle(ref,create,deps){currentHookNameInDev='useImperativeHandle';updateHookTypesDev();return updateImperativeHandle(ref,create,deps);},useLayoutEffect:function useLayoutEffect(create,deps){currentHookNameInDev='useLayoutEffect';updateHookTypesDev();return updateLayoutEffect(create,deps);},useMemo:function useMemo(create,deps){currentHookNameInDev='useMemo';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return updateMemo(create,deps);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useReducer:function useReducer(reducer,initialArg,init){currentHookNameInDev='useReducer';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return updateReducer(reducer,initialArg,init);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useRef:function useRef(initialValue){currentHookNameInDev='useRef';updateHookTypesDev();return updateRef(initialValue);},useState:function useState(initialState){currentHookNameInDev='useState';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return updateState(initialState);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useDebugValue:function useDebugValue(value,formatterFn){currentHookNameInDev='useDebugValue';updateHookTypesDev();return updateDebugValue(value,formatterFn);},useResponder:function useResponder(responder,props){currentHookNameInDev='useResponder';updateHookTypesDev();return createResponderListener(responder,props);}};InvalidNestedHooksDispatcherOnMountInDEV={readContext:function readContext(context,observedBits){warnInvalidContextAccess();return _readContext(context,observedBits);},useCallback:function useCallback(callback,deps){currentHookNameInDev='useCallback';warnInvalidHookAccess();mountHookTypesDev();return mountCallback(callback,deps);},useContext:function useContext(context,observedBits){currentHookNameInDev='useContext';warnInvalidHookAccess();mountHookTypesDev();return _readContext(context,observedBits);},useEffect:function useEffect(create,deps){currentHookNameInDev='useEffect';warnInvalidHookAccess();mountHookTypesDev();return mountEffect(create,deps);},useImperativeHandle:function useImperativeHandle(ref,create,deps){currentHookNameInDev='useImperativeHandle';warnInvalidHookAccess();mountHookTypesDev();return mountImperativeHandle(ref,create,deps);},useLayoutEffect:function useLayoutEffect(create,deps){currentHookNameInDev='useLayoutEffect';warnInvalidHookAccess();mountHookTypesDev();return mountLayoutEffect(create,deps);},useMemo:function useMemo(create,deps){currentHookNameInDev='useMemo';warnInvalidHookAccess();mountHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountMemo(create,deps);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useReducer:function useReducer(reducer,initialArg,init){currentHookNameInDev='useReducer';warnInvalidHookAccess();mountHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountReducer(reducer,initialArg,init);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useRef:function useRef(initialValue){currentHookNameInDev='useRef';warnInvalidHookAccess();mountHookTypesDev();return mountRef(initialValue);},useState:function useState(initialState){currentHookNameInDev='useState';warnInvalidHookAccess();mountHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountState(initialState);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useDebugValue:function useDebugValue(value,formatterFn){currentHookNameInDev='useDebugValue';warnInvalidHookAccess();mountHookTypesDev();return mountDebugValue(value,formatterFn);},useResponder:function useResponder(responder,props){currentHookNameInDev='useResponder';warnInvalidHookAccess();mountHookTypesDev();return createResponderListener(responder,props);}};InvalidNestedHooksDispatcherOnUpdateInDEV={readContext:function readContext(context,observedBits){warnInvalidContextAccess();return _readContext(context,observedBits);},useCallback:function useCallback(callback,deps){currentHookNameInDev='useCallback';warnInvalidHookAccess();updateHookTypesDev();return updateCallback(callback,deps);},useContext:function useContext(context,observedBits){currentHookNameInDev='useContext';warnInvalidHookAccess();updateHookTypesDev();return _readContext(context,observedBits);},useEffect:function useEffect(create,deps){currentHookNameInDev='useEffect';warnInvalidHookAccess();updateHookTypesDev();return updateEffect(create,deps);},useImperativeHandle:function useImperativeHandle(ref,create,deps){currentHookNameInDev='useImperativeHandle';warnInvalidHookAccess();updateHookTypesDev();return updateImperativeHandle(ref,create,deps);},useLayoutEffect:function useLayoutEffect(create,deps){currentHookNameInDev='useLayoutEffect';warnInvalidHookAccess();updateHookTypesDev();return updateLayoutEffect(create,deps);},useMemo:function useMemo(create,deps){currentHookNameInDev='useMemo';warnInvalidHookAccess();updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return updateMemo(create,deps);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useReducer:function useReducer(reducer,initialArg,init){currentHookNameInDev='useReducer';warnInvalidHookAccess();updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return updateReducer(reducer,initialArg,init);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useRef:function useRef(initialValue){currentHookNameInDev='useRef';warnInvalidHookAccess();updateHookTypesDev();return updateRef(initialValue);},useState:function useState(initialState){currentHookNameInDev='useState';warnInvalidHookAccess();updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return updateState(initialState);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useDebugValue:function useDebugValue(value,formatterFn){currentHookNameInDev='useDebugValue';warnInvalidHookAccess();updateHookTypesDev();return updateDebugValue(value,formatterFn);},useResponder:function useResponder(responder,props){currentHookNameInDev='useResponder';warnInvalidHookAccess();updateHookTypesDev();return createResponderListener(responder,props);}};}// Intentionally not named imports because Rollup would use dynamic dispatch for\n// CommonJS interop named imports.\nvar now$2=Scheduler.unstable_now;var commitTime=0;var profilerStartTime=-1;function getCommitTime(){return commitTime;}function recordCommitTime(){if(!enableProfilerTimer){return;}commitTime=now$2();}function startProfilerTimer(fiber){if(!enableProfilerTimer){return;}profilerStartTime=now$2();if(fiber.actualStartTime<0){fiber.actualStartTime=now$2();}}function stopProfilerTimerIfRunning(fiber){if(!enableProfilerTimer){return;}profilerStartTime=-1;}function stopProfilerTimerIfRunningAndRecordDelta(fiber,overrideBaseTime){if(!enableProfilerTimer){return;}if(profilerStartTime>=0){var elapsedTime=now$2()-profilerStartTime;fiber.actualDuration+=elapsedTime;if(overrideBaseTime){fiber.selfBaseDuration=elapsedTime;}profilerStartTime=-1;}}// The deepest Fiber on the stack involved in a hydration context.\n// This may have been an insertion or a hydration.\nvar hydrationParentFiber=null;var nextHydratableInstance=null;var isHydrating=false;function enterHydrationState(fiber){if(!supportsHydration){return false;}var parentInstance=fiber.stateNode.containerInfo;nextHydratableInstance=getFirstHydratableChild(parentInstance);hydrationParentFiber=fiber;isHydrating=true;return true;}function reenterHydrationStateFromDehydratedSuspenseInstance(fiber){if(!supportsHydration){return false;}var suspenseInstance=fiber.stateNode;nextHydratableInstance=getNextHydratableSibling(suspenseInstance);popToNextHostParent(fiber);isHydrating=true;return true;}function deleteHydratableInstance(returnFiber,instance){{switch(returnFiber.tag){case HostRoot:didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo,instance);break;case HostComponent:didNotHydrateInstance(returnFiber.type,returnFiber.memoizedProps,returnFiber.stateNode,instance);break;}}var childToDelete=createFiberFromHostInstanceForDeletion();childToDelete.stateNode=instance;childToDelete.return=returnFiber;childToDelete.effectTag=Deletion;// This might seem like it belongs on progressedFirstDeletion. However,\n// these children are not part of the reconciliation list of children.\n// Even if we abort and rereconcile the children, that will try to hydrate\n// again and the nodes are still in the host tree so these will be\n// recreated.\nif(returnFiber.lastEffect!==null){returnFiber.lastEffect.nextEffect=childToDelete;returnFiber.lastEffect=childToDelete;}else{returnFiber.firstEffect=returnFiber.lastEffect=childToDelete;}}function insertNonHydratedInstance(returnFiber,fiber){fiber.effectTag|=Placement;{switch(returnFiber.tag){case HostRoot:{var parentContainer=returnFiber.stateNode.containerInfo;switch(fiber.tag){case HostComponent:var type=fiber.type;var props=fiber.pendingProps;didNotFindHydratableContainerInstance(parentContainer,type,props);break;case HostText:var text=fiber.pendingProps;didNotFindHydratableContainerTextInstance(parentContainer,text);break;case SuspenseComponent:didNotFindHydratableContainerSuspenseInstance(parentContainer);break;}break;}case HostComponent:{var parentType=returnFiber.type;var parentProps=returnFiber.memoizedProps;var parentInstance=returnFiber.stateNode;switch(fiber.tag){case HostComponent:var _type=fiber.type;var _props=fiber.pendingProps;didNotFindHydratableInstance(parentType,parentProps,parentInstance,_type,_props);break;case HostText:var _text=fiber.pendingProps;didNotFindHydratableTextInstance(parentType,parentProps,parentInstance,_text);break;case SuspenseComponent:didNotFindHydratableSuspenseInstance(parentType,parentProps,parentInstance);break;}break;}default:return;}}}function tryHydrate(fiber,nextInstance){switch(fiber.tag){case HostComponent:{var type=fiber.type;var props=fiber.pendingProps;var instance=canHydrateInstance(nextInstance,type,props);if(instance!==null){fiber.stateNode=instance;return true;}return false;}case HostText:{var text=fiber.pendingProps;var textInstance=canHydrateTextInstance(nextInstance,text);if(textInstance!==null){fiber.stateNode=textInstance;return true;}return false;}case SuspenseComponent:{if(enableSuspenseServerRenderer){var suspenseInstance=canHydrateSuspenseInstance(nextInstance);if(suspenseInstance!==null){// Downgrade the tag to a dehydrated component until we've hydrated it.\nfiber.tag=DehydratedSuspenseComponent;fiber.stateNode=suspenseInstance;return true;}}return false;}default:return false;}}function tryToClaimNextHydratableInstance(fiber){if(!isHydrating){return;}var nextInstance=nextHydratableInstance;if(!nextInstance){// Nothing to hydrate. Make it an insertion.\ninsertNonHydratedInstance(hydrationParentFiber,fiber);isHydrating=false;hydrationParentFiber=fiber;return;}var firstAttemptedInstance=nextInstance;if(!tryHydrate(fiber,nextInstance)){// If we can't hydrate this instance let's try the next one.\n// We use this as a heuristic. It's based on intuition and not data so it\n// might be flawed or unnecessary.\nnextInstance=getNextHydratableSibling(firstAttemptedInstance);if(!nextInstance||!tryHydrate(fiber,nextInstance)){// Nothing to hydrate. Make it an insertion.\ninsertNonHydratedInstance(hydrationParentFiber,fiber);isHydrating=false;hydrationParentFiber=fiber;return;}// We matched the next one, we'll now assume that the first one was\n// superfluous and we'll delete it. Since we can't eagerly delete it\n// we'll have to schedule a deletion. To do that, this node needs a dummy\n// fiber associated with it.\ndeleteHydratableInstance(hydrationParentFiber,firstAttemptedInstance);}hydrationParentFiber=fiber;nextHydratableInstance=getFirstHydratableChild(nextInstance);}function prepareToHydrateHostInstance(fiber,rootContainerInstance,hostContext){if(!supportsHydration){(function(){{{throw ReactError(Error('Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.'));}}})();}var instance=fiber.stateNode;var updatePayload=hydrateInstance(instance,fiber.type,fiber.memoizedProps,rootContainerInstance,hostContext,fiber);// TODO: Type this specific to this type of component.\nfiber.updateQueue=updatePayload;// If the update payload indicates that there is a change or if there\n// is a new ref we mark this as an update.\nif(updatePayload!==null){return true;}return false;}function prepareToHydrateHostTextInstance(fiber){if(!supportsHydration){(function(){{{throw ReactError(Error('Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.'));}}})();}var textInstance=fiber.stateNode;var textContent=fiber.memoizedProps;var shouldUpdate=hydrateTextInstance(textInstance,textContent,fiber);{if(shouldUpdate){// We assume that prepareToHydrateHostTextInstance is called in a context where the\n// hydration parent is the parent host component of this host text.\nvar returnFiber=hydrationParentFiber;if(returnFiber!==null){switch(returnFiber.tag){case HostRoot:{var parentContainer=returnFiber.stateNode.containerInfo;didNotMatchHydratedContainerTextInstance(parentContainer,textInstance,textContent);break;}case HostComponent:{var parentType=returnFiber.type;var parentProps=returnFiber.memoizedProps;var parentInstance=returnFiber.stateNode;didNotMatchHydratedTextInstance(parentType,parentProps,parentInstance,textInstance,textContent);break;}}}}}return shouldUpdate;}function skipPastDehydratedSuspenseInstance(fiber){if(!supportsHydration){(function(){{{throw ReactError(Error('Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.'));}}})();}var suspenseInstance=fiber.stateNode;(function(){if(!suspenseInstance){{throw ReactError(Error('Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.'));}}})();nextHydratableInstance=getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);}function popToNextHostParent(fiber){var parent=fiber.return;while(parent!==null&&parent.tag!==HostComponent&&parent.tag!==HostRoot&&parent.tag!==DehydratedSuspenseComponent){parent=parent.return;}hydrationParentFiber=parent;}function popHydrationState(fiber){if(!supportsHydration){return false;}if(fiber!==hydrationParentFiber){// We're deeper than the current hydration context, inside an inserted\n// tree.\nreturn false;}if(!isHydrating){// If we're not currently hydrating but we're in a hydration context, then\n// we were an insertion and now need to pop up reenter hydration of our\n// siblings.\npopToNextHostParent(fiber);isHydrating=true;return false;}var type=fiber.type;// If we have any remaining hydratable nodes, we need to delete them now.\n// We only do this deeper than head and body since they tend to have random\n// other nodes in them. We also ignore components with pure text content in\n// side of them.\n// TODO: Better heuristic.\nif(fiber.tag!==HostComponent||type!=='head'&&type!=='body'&&!shouldSetTextContent(type,fiber.memoizedProps)){var nextInstance=nextHydratableInstance;while(nextInstance){deleteHydratableInstance(fiber,nextInstance);nextInstance=getNextHydratableSibling(nextInstance);}}popToNextHostParent(fiber);nextHydratableInstance=hydrationParentFiber?getNextHydratableSibling(fiber.stateNode):null;return true;}function resetHydrationState(){if(!supportsHydration){return;}hydrationParentFiber=null;nextHydratableInstance=null;isHydrating=false;}var ReactCurrentOwner$2=ReactSharedInternals.ReactCurrentOwner;var didReceiveUpdate=false;var didWarnAboutBadClass=void 0;var didWarnAboutModulePatternComponent=void 0;var didWarnAboutContextTypeOnFunctionComponent=void 0;var didWarnAboutGetDerivedStateOnFunctionComponent=void 0;var didWarnAboutFunctionRefs=void 0;var didWarnAboutReassigningProps=void 0;var didWarnAboutMaxDuration=void 0;var didWarnAboutRevealOrder=void 0;var didWarnAboutTailOptions=void 0;var didWarnAboutDefaultPropsOnFunctionComponent=void 0;{didWarnAboutBadClass={};didWarnAboutModulePatternComponent={};didWarnAboutContextTypeOnFunctionComponent={};didWarnAboutGetDerivedStateOnFunctionComponent={};didWarnAboutFunctionRefs={};didWarnAboutReassigningProps=false;didWarnAboutMaxDuration=false;didWarnAboutRevealOrder={};didWarnAboutTailOptions={};didWarnAboutDefaultPropsOnFunctionComponent={};}function reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime){if(current$$1===null){// If this is a fresh new component that hasn't been rendered yet, we\n// won't update its child set by applying minimal side-effects. Instead,\n// we will add them all to the child before it gets rendered. That means\n// we can optimize this reconciliation pass by not tracking side-effects.\nworkInProgress.child=mountChildFibers(workInProgress,null,nextChildren,renderExpirationTime);}else{// If the current child is the same as the work in progress, it means that\n// we haven't yet started any work on these children. Therefore, we use\n// the clone algorithm to create a copy of all the current children.\n// If we had any progressed work already, that is invalid at this point so\n// let's throw it out.\nworkInProgress.child=reconcileChildFibers(workInProgress,current$$1.child,nextChildren,renderExpirationTime);}}function forceUnmountCurrentAndReconcile(current$$1,workInProgress,nextChildren,renderExpirationTime){// This function is fork of reconcileChildren. It's used in cases where we\n// want to reconcile without matching against the existing set. This has the\n// effect of all current children being unmounted; even if the type and key\n// are the same, the old child is unmounted and a new child is created.\n//\n// To do this, we're going to go through the reconcile algorithm twice. In\n// the first pass, we schedule a deletion for all the current children by\n// passing null.\nworkInProgress.child=reconcileChildFibers(workInProgress,current$$1.child,null,renderExpirationTime);// In the second pass, we mount the new children. The trick here is that we\n// pass null in place of where we usually pass the current child set. This has\n// the effect of remounting all children regardless of whether their their\n// identity matches.\nworkInProgress.child=reconcileChildFibers(workInProgress,null,nextChildren,renderExpirationTime);}function updateForwardRef(current$$1,workInProgress,Component,nextProps,renderExpirationTime){// TODO: current can be non-null here even if the component\n// hasn't yet mounted. This happens after the first render suspends.\n// We'll need to figure out if this is fine or can cause issues.\n{if(workInProgress.type!==workInProgress.elementType){// Lazy component props can't be validated in createElement\n// because they're only guaranteed to be resolved here.\nvar innerPropTypes=Component.propTypes;if(innerPropTypes){checkPropTypes(innerPropTypes,nextProps,// Resolved props\n'prop',getComponentName(Component),getCurrentFiberStackInDev);}}}var render=Component.render;var ref=workInProgress.ref;// The rest is a fork of updateFunctionComponent\nvar nextChildren=void 0;prepareToReadContext(workInProgress,renderExpirationTime);{ReactCurrentOwner$2.current=workInProgress;setCurrentPhase('render');nextChildren=renderWithHooks(current$$1,workInProgress,render,nextProps,ref,renderExpirationTime);if(debugRenderPhaseSideEffects||debugRenderPhaseSideEffectsForStrictMode&&workInProgress.mode&StrictMode){// Only double-render components with Hooks\nif(workInProgress.memoizedState!==null){nextChildren=renderWithHooks(current$$1,workInProgress,render,nextProps,ref,renderExpirationTime);}}setCurrentPhase(null);}if(current$$1!==null&&!didReceiveUpdate){bailoutHooks(current$$1,workInProgress,renderExpirationTime);return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}// React DevTools reads this flag.\nworkInProgress.effectTag|=PerformedWork;reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);return workInProgress.child;}function updateMemoComponent(current$$1,workInProgress,Component,nextProps,updateExpirationTime,renderExpirationTime){if(current$$1===null){var type=Component.type;if(isSimpleFunctionComponent(type)&&Component.compare===null&&// SimpleMemoComponent codepath doesn't resolve outer props either.\nComponent.defaultProps===undefined){var resolvedType=type;{resolvedType=resolveFunctionForHotReloading(type);}// If this is a plain function component without default props,\n// and with only the default shallow comparison, we upgrade it\n// to a SimpleMemoComponent to allow fast path updates.\nworkInProgress.tag=SimpleMemoComponent;workInProgress.type=resolvedType;{validateFunctionComponentInDev(workInProgress,type);}return updateSimpleMemoComponent(current$$1,workInProgress,resolvedType,nextProps,updateExpirationTime,renderExpirationTime);}{var innerPropTypes=type.propTypes;if(innerPropTypes){// Inner memo component props aren't currently validated in createElement.\n// We could move it there, but we'd still need this for lazy code path.\ncheckPropTypes(innerPropTypes,nextProps,// Resolved props\n'prop',getComponentName(type),getCurrentFiberStackInDev);}}var child=createFiberFromTypeAndProps(Component.type,null,nextProps,null,workInProgress.mode,renderExpirationTime);child.ref=workInProgress.ref;child.return=workInProgress;workInProgress.child=child;return child;}{var _type=Component.type;var _innerPropTypes=_type.propTypes;if(_innerPropTypes){// Inner memo component props aren't currently validated in createElement.\n// We could move it there, but we'd still need this for lazy code path.\ncheckPropTypes(_innerPropTypes,nextProps,// Resolved props\n'prop',getComponentName(_type),getCurrentFiberStackInDev);}}var currentChild=current$$1.child;// This is always exactly one child\nif(updateExpirationTime<renderExpirationTime){// This will be the props with resolved defaultProps,\n// unlike current.memoizedProps which will be the unresolved ones.\nvar prevProps=currentChild.memoizedProps;// Default to shallow comparison\nvar compare=Component.compare;compare=compare!==null?compare:shallowEqual;if(compare(prevProps,nextProps)&&current$$1.ref===workInProgress.ref){return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}}// React DevTools reads this flag.\nworkInProgress.effectTag|=PerformedWork;var newChild=createWorkInProgress(currentChild,nextProps,renderExpirationTime);newChild.ref=workInProgress.ref;newChild.return=workInProgress;workInProgress.child=newChild;return newChild;}function updateSimpleMemoComponent(current$$1,workInProgress,Component,nextProps,updateExpirationTime,renderExpirationTime){// TODO: current can be non-null here even if the component\n// hasn't yet mounted. This happens when the inner render suspends.\n// We'll need to figure out if this is fine or can cause issues.\n{if(workInProgress.type!==workInProgress.elementType){// Lazy component props can't be validated in createElement\n// because they're only guaranteed to be resolved here.\nvar outerMemoType=workInProgress.elementType;if(outerMemoType.$$typeof===REACT_LAZY_TYPE){// We warn when you define propTypes on lazy()\n// so let's just skip over it to find memo() outer wrapper.\n// Inner props for memo are validated later.\nouterMemoType=refineResolvedLazyComponent(outerMemoType);}var outerPropTypes=outerMemoType&&outerMemoType.propTypes;if(outerPropTypes){checkPropTypes(outerPropTypes,nextProps,// Resolved (SimpleMemoComponent has no defaultProps)\n'prop',getComponentName(outerMemoType),getCurrentFiberStackInDev);}// Inner propTypes will be validated in the function component path.\n}}if(current$$1!==null){var prevProps=current$$1.memoizedProps;if(shallowEqual(prevProps,nextProps)&&current$$1.ref===workInProgress.ref&&// Prevent bailout if the implementation changed due to hot reload:\nworkInProgress.type===current$$1.type){didReceiveUpdate=false;if(updateExpirationTime<renderExpirationTime){return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}}}return updateFunctionComponent(current$$1,workInProgress,Component,nextProps,renderExpirationTime);}function updateFragment(current$$1,workInProgress,renderExpirationTime){var nextChildren=workInProgress.pendingProps;reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);return workInProgress.child;}function updateMode(current$$1,workInProgress,renderExpirationTime){var nextChildren=workInProgress.pendingProps.children;reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);return workInProgress.child;}function updateProfiler(current$$1,workInProgress,renderExpirationTime){if(enableProfilerTimer){workInProgress.effectTag|=Update;}var nextProps=workInProgress.pendingProps;var nextChildren=nextProps.children;reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);return workInProgress.child;}function markRef(current$$1,workInProgress){var ref=workInProgress.ref;if(current$$1===null&&ref!==null||current$$1!==null&&current$$1.ref!==ref){// Schedule a Ref effect\nworkInProgress.effectTag|=Ref;}}function updateFunctionComponent(current$$1,workInProgress,Component,nextProps,renderExpirationTime){{if(workInProgress.type!==workInProgress.elementType){// Lazy component props can't be validated in createElement\n// because they're only guaranteed to be resolved here.\nvar innerPropTypes=Component.propTypes;if(innerPropTypes){checkPropTypes(innerPropTypes,nextProps,// Resolved props\n'prop',getComponentName(Component),getCurrentFiberStackInDev);}}}var context=void 0;if(!disableLegacyContext){var unmaskedContext=getUnmaskedContext(workInProgress,Component,true);context=getMaskedContext(workInProgress,unmaskedContext);}var nextChildren=void 0;prepareToReadContext(workInProgress,renderExpirationTime);{ReactCurrentOwner$2.current=workInProgress;setCurrentPhase('render');nextChildren=renderWithHooks(current$$1,workInProgress,Component,nextProps,context,renderExpirationTime);if(debugRenderPhaseSideEffects||debugRenderPhaseSideEffectsForStrictMode&&workInProgress.mode&StrictMode){// Only double-render components with Hooks\nif(workInProgress.memoizedState!==null){nextChildren=renderWithHooks(current$$1,workInProgress,Component,nextProps,context,renderExpirationTime);}}setCurrentPhase(null);}if(current$$1!==null&&!didReceiveUpdate){bailoutHooks(current$$1,workInProgress,renderExpirationTime);return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}// React DevTools reads this flag.\nworkInProgress.effectTag|=PerformedWork;reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);return workInProgress.child;}function updateClassComponent(current$$1,workInProgress,Component,nextProps,renderExpirationTime){{if(workInProgress.type!==workInProgress.elementType){// Lazy component props can't be validated in createElement\n// because they're only guaranteed to be resolved here.\nvar innerPropTypes=Component.propTypes;if(innerPropTypes){checkPropTypes(innerPropTypes,nextProps,// Resolved props\n'prop',getComponentName(Component),getCurrentFiberStackInDev);}}}// Push context providers early to prevent context stack mismatches.\n// During mounting we don't know the child context yet as the instance doesn't exist.\n// We will invalidate the child context in finishClassComponent() right after rendering.\nvar hasContext=void 0;if(isContextProvider(Component)){hasContext=true;pushContextProvider(workInProgress);}else{hasContext=false;}prepareToReadContext(workInProgress,renderExpirationTime);var instance=workInProgress.stateNode;var shouldUpdate=void 0;if(instance===null){if(current$$1!==null){// An class component without an instance only mounts if it suspended\n// inside a non- concurrent tree, in an inconsistent state. We want to\n// tree it like a new mount, even though an empty version of it already\n// committed. Disconnect the alternate pointers.\ncurrent$$1.alternate=null;workInProgress.alternate=null;// Since this is conceptually a new fiber, schedule a Placement effect\nworkInProgress.effectTag|=Placement;}// In the initial pass we might need to construct the instance.\nconstructClassInstance(workInProgress,Component,nextProps,renderExpirationTime);mountClassInstance(workInProgress,Component,nextProps,renderExpirationTime);shouldUpdate=true;}else if(current$$1===null){// In a resume, we'll already have an instance we can reuse.\nshouldUpdate=resumeMountClassInstance(workInProgress,Component,nextProps,renderExpirationTime);}else{shouldUpdate=updateClassInstance(current$$1,workInProgress,Component,nextProps,renderExpirationTime);}var nextUnitOfWork=finishClassComponent(current$$1,workInProgress,Component,shouldUpdate,hasContext,renderExpirationTime);{var inst=workInProgress.stateNode;if(inst.props!==nextProps){!didWarnAboutReassigningProps?warning$1(false,'It looks like %s is reassigning its own `this.props` while rendering. '+'This is not supported and can lead to confusing bugs.',getComponentName(workInProgress.type)||'a component'):void 0;didWarnAboutReassigningProps=true;}}return nextUnitOfWork;}function finishClassComponent(current$$1,workInProgress,Component,shouldUpdate,hasContext,renderExpirationTime){// Refs should update even if shouldComponentUpdate returns false\nmarkRef(current$$1,workInProgress);var didCaptureError=(workInProgress.effectTag&DidCapture)!==NoEffect;if(!shouldUpdate&&!didCaptureError){// Context providers should defer to sCU for rendering\nif(hasContext){invalidateContextProvider(workInProgress,Component,false);}return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}var instance=workInProgress.stateNode;// Rerender\nReactCurrentOwner$2.current=workInProgress;var nextChildren=void 0;if(didCaptureError&&typeof Component.getDerivedStateFromError!=='function'){// If we captured an error, but getDerivedStateFrom catch is not defined,\n// unmount all the children. componentDidCatch will schedule an update to\n// re-render a fallback. This is temporary until we migrate everyone to\n// the new API.\n// TODO: Warn in a future release.\nnextChildren=null;if(enableProfilerTimer){stopProfilerTimerIfRunning(workInProgress);}}else{{setCurrentPhase('render');nextChildren=instance.render();if(debugRenderPhaseSideEffects||debugRenderPhaseSideEffectsForStrictMode&&workInProgress.mode&StrictMode){instance.render();}setCurrentPhase(null);}}// React DevTools reads this flag.\nworkInProgress.effectTag|=PerformedWork;if(current$$1!==null&&didCaptureError){// If we're recovering from an error, reconcile without reusing any of\n// the existing children. Conceptually, the normal children and the children\n// that are shown on error are two different sets, so we shouldn't reuse\n// normal children even if their identities match.\nforceUnmountCurrentAndReconcile(current$$1,workInProgress,nextChildren,renderExpirationTime);}else{reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);}// Memoize state using the values we just used to render.\n// TODO: Restructure so we never read values from the instance.\nworkInProgress.memoizedState=instance.state;// The context might have changed so we need to recalculate it.\nif(hasContext){invalidateContextProvider(workInProgress,Component,true);}return workInProgress.child;}function pushHostRootContext(workInProgress){var root=workInProgress.stateNode;if(root.pendingContext){pushTopLevelContextObject(workInProgress,root.pendingContext,root.pendingContext!==root.context);}else if(root.context){// Should always be set\npushTopLevelContextObject(workInProgress,root.context,false);}pushHostContainer(workInProgress,root.containerInfo);}function updateHostRoot(current$$1,workInProgress,renderExpirationTime){pushHostRootContext(workInProgress);var updateQueue=workInProgress.updateQueue;(function(){if(!(updateQueue!==null)){{throw ReactError(Error('If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.'));}}})();var nextProps=workInProgress.pendingProps;var prevState=workInProgress.memoizedState;var prevChildren=prevState!==null?prevState.element:null;processUpdateQueue(workInProgress,updateQueue,nextProps,null,renderExpirationTime);var nextState=workInProgress.memoizedState;// Caution: React DevTools currently depends on this property\n// being called \"element\".\nvar nextChildren=nextState.element;if(nextChildren===prevChildren){// If the state is the same as before, that's a bailout because we had\n// no work that expires at this time.\nresetHydrationState();return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}var root=workInProgress.stateNode;if((current$$1===null||current$$1.child===null)&&root.hydrate&&enterHydrationState(workInProgress)){// If we don't have any current children this might be the first pass.\n// We always try to hydrate. If this isn't a hydration pass there won't\n// be any children to hydrate which is effectively the same thing as\n// not hydrating.\n// This is a bit of a hack. We track the host root as a placement to\n// know that we're currently in a mounting state. That way isMounted\n// works as expected. We must reset this before committing.\n// TODO: Delete this when we delete isMounted and findDOMNode.\nworkInProgress.effectTag|=Placement;// Ensure that children mount into this root without tracking\n// side-effects. This ensures that we don't store Placement effects on\n// nodes that will be hydrated.\nworkInProgress.child=mountChildFibers(workInProgress,null,nextChildren,renderExpirationTime);}else{// Otherwise reset hydration state in case we aborted and resumed another\n// root.\nreconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);resetHydrationState();}return workInProgress.child;}function updateHostComponent(current$$1,workInProgress,renderExpirationTime){pushHostContext(workInProgress);if(current$$1===null){tryToClaimNextHydratableInstance(workInProgress);}var type=workInProgress.type;var nextProps=workInProgress.pendingProps;var prevProps=current$$1!==null?current$$1.memoizedProps:null;var nextChildren=nextProps.children;var isDirectTextChild=shouldSetTextContent(type,nextProps);if(isDirectTextChild){// We special case a direct text child of a host node. This is a common\n// case. We won't handle it as a reified child. We will instead handle\n// this in the host environment that also have access to this prop. That\n// avoids allocating another HostText fiber and traversing it.\nnextChildren=null;}else if(prevProps!==null&&shouldSetTextContent(type,prevProps)){// If we're switching from a direct text child to a normal child, or to\n// empty, we need to schedule the text content to be reset.\nworkInProgress.effectTag|=ContentReset;}markRef(current$$1,workInProgress);// Check the host config to see if the children are offscreen/hidden.\nif(workInProgress.mode&ConcurrentMode&&renderExpirationTime!==Never&&shouldDeprioritizeSubtree(type,nextProps)){if(enableSchedulerTracing){markSpawnedWork(Never);}// Schedule this fiber to re-render at offscreen priority. Then bailout.\nworkInProgress.expirationTime=workInProgress.childExpirationTime=Never;return null;}reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);return workInProgress.child;}function updateHostText(current$$1,workInProgress){if(current$$1===null){tryToClaimNextHydratableInstance(workInProgress);}// Nothing to do here. This is terminal. We'll do the completion step\n// immediately after.\nreturn null;}function mountLazyComponent(_current,workInProgress,elementType,updateExpirationTime,renderExpirationTime){if(_current!==null){// An lazy component only mounts if it suspended inside a non-\n// concurrent tree, in an inconsistent state. We want to treat it like\n// a new mount, even though an empty version of it already committed.\n// Disconnect the alternate pointers.\n_current.alternate=null;workInProgress.alternate=null;// Since this is conceptually a new fiber, schedule a Placement effect\nworkInProgress.effectTag|=Placement;}var props=workInProgress.pendingProps;// We can't start a User Timing measurement with correct label yet.\n// Cancel and resume right after we know the tag.\ncancelWorkTimer(workInProgress);var Component=readLazyComponentType(elementType);// Store the unwrapped component in the type.\nworkInProgress.type=Component;var resolvedTag=workInProgress.tag=resolveLazyComponentTag(Component);startWorkTimer(workInProgress);var resolvedProps=resolveDefaultProps(Component,props);var child=void 0;switch(resolvedTag){case FunctionComponent:{{validateFunctionComponentInDev(workInProgress,Component);workInProgress.type=Component=resolveFunctionForHotReloading(Component);}child=updateFunctionComponent(null,workInProgress,Component,resolvedProps,renderExpirationTime);break;}case ClassComponent:{{workInProgress.type=Component=resolveClassForHotReloading(Component);}child=updateClassComponent(null,workInProgress,Component,resolvedProps,renderExpirationTime);break;}case ForwardRef:{{workInProgress.type=Component=resolveForwardRefForHotReloading(Component);}child=updateForwardRef(null,workInProgress,Component,resolvedProps,renderExpirationTime);break;}case MemoComponent:{{if(workInProgress.type!==workInProgress.elementType){var outerPropTypes=Component.propTypes;if(outerPropTypes){checkPropTypes(outerPropTypes,resolvedProps,// Resolved for outer only\n'prop',getComponentName(Component),getCurrentFiberStackInDev);}}}child=updateMemoComponent(null,workInProgress,Component,resolveDefaultProps(Component.type,resolvedProps),// The inner type can have defaults too\nupdateExpirationTime,renderExpirationTime);break;}default:{var hint='';{if(Component!==null&&typeof Component==='object'&&Component.$$typeof===REACT_LAZY_TYPE){hint=' Did you wrap a component in React.lazy() more than once?';}}// This message intentionally doesn't mention ForwardRef or MemoComponent\n// because the fact that it's a separate type of work is an\n// implementation detail.\n(function(){{{throw ReactError(Error('Element type is invalid. Received a promise that resolves to: '+Component+'. Lazy element type must resolve to a class or function.'+hint));}}})();}}return child;}function mountIncompleteClassComponent(_current,workInProgress,Component,nextProps,renderExpirationTime){if(_current!==null){// An incomplete component only mounts if it suspended inside a non-\n// concurrent tree, in an inconsistent state. We want to treat it like\n// a new mount, even though an empty version of it already committed.\n// Disconnect the alternate pointers.\n_current.alternate=null;workInProgress.alternate=null;// Since this is conceptually a new fiber, schedule a Placement effect\nworkInProgress.effectTag|=Placement;}// Promote the fiber to a class and try rendering again.\nworkInProgress.tag=ClassComponent;// The rest of this function is a fork of `updateClassComponent`\n// Push context providers early to prevent context stack mismatches.\n// During mounting we don't know the child context yet as the instance doesn't exist.\n// We will invalidate the child context in finishClassComponent() right after rendering.\nvar hasContext=void 0;if(isContextProvider(Component)){hasContext=true;pushContextProvider(workInProgress);}else{hasContext=false;}prepareToReadContext(workInProgress,renderExpirationTime);constructClassInstance(workInProgress,Component,nextProps,renderExpirationTime);mountClassInstance(workInProgress,Component,nextProps,renderExpirationTime);return finishClassComponent(null,workInProgress,Component,true,hasContext,renderExpirationTime);}function mountIndeterminateComponent(_current,workInProgress,Component,renderExpirationTime){if(_current!==null){// An indeterminate component only mounts if it suspended inside a non-\n// concurrent tree, in an inconsistent state. We want to treat it like\n// a new mount, even though an empty version of it already committed.\n// Disconnect the alternate pointers.\n_current.alternate=null;workInProgress.alternate=null;// Since this is conceptually a new fiber, schedule a Placement effect\nworkInProgress.effectTag|=Placement;}var props=workInProgress.pendingProps;var context=void 0;if(!disableLegacyContext){var unmaskedContext=getUnmaskedContext(workInProgress,Component,false);context=getMaskedContext(workInProgress,unmaskedContext);}prepareToReadContext(workInProgress,renderExpirationTime);var value=void 0;{if(Component.prototype&&typeof Component.prototype.render==='function'){var componentName=getComponentName(Component)||'Unknown';if(!didWarnAboutBadClass[componentName]){warningWithoutStack$1(false,\"The <%s /> component appears to have a render method, but doesn't extend React.Component. \"+'This is likely to cause errors. Change %s to extend React.Component instead.',componentName,componentName);didWarnAboutBadClass[componentName]=true;}}if(workInProgress.mode&StrictMode){ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress,null);}ReactCurrentOwner$2.current=workInProgress;value=renderWithHooks(null,workInProgress,Component,props,context,renderExpirationTime);}// React DevTools reads this flag.\nworkInProgress.effectTag|=PerformedWork;if(typeof value==='object'&&value!==null&&typeof value.render==='function'&&value.$$typeof===undefined){{var _componentName=getComponentName(Component)||'Unknown';if(!didWarnAboutModulePatternComponent[_componentName]){warningWithoutStack$1(false,'The <%s /> component appears to be a function component that returns a class instance. '+'Change %s to a class that extends React.Component instead. '+\"If you can't use a class try assigning the prototype on the function as a workaround. \"+\"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \"+'cannot be called with `new` by React.',_componentName,_componentName,_componentName);didWarnAboutModulePatternComponent[_componentName]=true;}}// Proceed under the assumption that this is a class instance\nworkInProgress.tag=ClassComponent;// Throw out any hooks that were used.\nresetHooks();// Push context providers early to prevent context stack mismatches.\n// During mounting we don't know the child context yet as the instance doesn't exist.\n// We will invalidate the child context in finishClassComponent() right after rendering.\nvar hasContext=false;if(isContextProvider(Component)){hasContext=true;pushContextProvider(workInProgress);}else{hasContext=false;}workInProgress.memoizedState=value.state!==null&&value.state!==undefined?value.state:null;var getDerivedStateFromProps=Component.getDerivedStateFromProps;if(typeof getDerivedStateFromProps==='function'){applyDerivedStateFromProps(workInProgress,Component,getDerivedStateFromProps,props);}adoptClassInstance(workInProgress,value);mountClassInstance(workInProgress,Component,props,renderExpirationTime);return finishClassComponent(null,workInProgress,Component,true,hasContext,renderExpirationTime);}else{// Proceed under the assumption that this is a function component\nworkInProgress.tag=FunctionComponent;{if(disableLegacyContext&&Component.contextTypes){warningWithoutStack$1(false,'%s uses the legacy contextTypes API which is no longer supported. '+'Use React.createContext() with React.useContext() instead.',getComponentName(Component)||'Unknown');}if(debugRenderPhaseSideEffects||debugRenderPhaseSideEffectsForStrictMode&&workInProgress.mode&StrictMode){// Only double-render components with Hooks\nif(workInProgress.memoizedState!==null){value=renderWithHooks(null,workInProgress,Component,props,context,renderExpirationTime);}}}reconcileChildren(null,workInProgress,value,renderExpirationTime);{validateFunctionComponentInDev(workInProgress,Component);}return workInProgress.child;}}function validateFunctionComponentInDev(workInProgress,Component){if(Component){!!Component.childContextTypes?warningWithoutStack$1(false,'%s(...): childContextTypes cannot be defined on a function component.',Component.displayName||Component.name||'Component'):void 0;}if(workInProgress.ref!==null){var info='';var ownerName=getCurrentFiberOwnerNameInDevOrNull();if(ownerName){info+='\\n\\nCheck the render method of `'+ownerName+'`.';}var warningKey=ownerName||workInProgress._debugID||'';var debugSource=workInProgress._debugSource;if(debugSource){warningKey=debugSource.fileName+':'+debugSource.lineNumber;}if(!didWarnAboutFunctionRefs[warningKey]){didWarnAboutFunctionRefs[warningKey]=true;warning$1(false,'Function components cannot be given refs. '+'Attempts to access this ref will fail. '+'Did you mean to use React.forwardRef()?%s',info);}}if(warnAboutDefaultPropsOnFunctionComponents&&Component.defaultProps!==undefined){var componentName=getComponentName(Component)||'Unknown';if(!didWarnAboutDefaultPropsOnFunctionComponent[componentName]){warningWithoutStack$1(false,'%s: Support for defaultProps will be removed from function components '+'in a future major release. Use JavaScript default parameters instead.',componentName);didWarnAboutDefaultPropsOnFunctionComponent[componentName]=true;}}if(typeof Component.getDerivedStateFromProps==='function'){var _componentName2=getComponentName(Component)||'Unknown';if(!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]){warningWithoutStack$1(false,'%s: Function components do not support getDerivedStateFromProps.',_componentName2);didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]=true;}}if(typeof Component.contextType==='object'&&Component.contextType!==null){var _componentName3=getComponentName(Component)||'Unknown';if(!didWarnAboutContextTypeOnFunctionComponent[_componentName3]){warningWithoutStack$1(false,'%s: Function components do not support contextType.',_componentName3);didWarnAboutContextTypeOnFunctionComponent[_componentName3]=true;}}}// TODO: This is now an empty object. Should we just make it a boolean?\nvar SUSPENDED_MARKER={};function shouldRemainOnFallback(suspenseContext,current$$1,workInProgress){// If the context is telling us that we should show a fallback, and we're not\n// already showing content, then we should show the fallback instead.\nreturn hasSuspenseContext(suspenseContext,ForceSuspenseFallback)&&(current$$1===null||current$$1.memoizedState!==null);}function updateSuspenseComponent(current$$1,workInProgress,renderExpirationTime){var mode=workInProgress.mode;var nextProps=workInProgress.pendingProps;// This is used by DevTools to force a boundary to suspend.\n{if(shouldSuspend(workInProgress)){workInProgress.effectTag|=DidCapture;}}var suspenseContext=suspenseStackCursor.current;var nextState=null;var nextDidTimeout=false;if((workInProgress.effectTag&DidCapture)!==NoEffect||shouldRemainOnFallback(suspenseContext,current$$1,workInProgress)){// Something in this boundary's subtree already suspended. Switch to\n// rendering the fallback children.\nnextState=SUSPENDED_MARKER;nextDidTimeout=true;workInProgress.effectTag&=~DidCapture;}else{// Attempting the main content\nif(current$$1===null||current$$1.memoizedState!==null){// This is a new mount or this boundary is already showing a fallback state.\n// Mark this subtree context as having at least one invisible parent that could\n// handle the fallback state.\n// Boundaries without fallbacks or should be avoided are not considered since\n// they cannot handle preferred fallback states.\nif(nextProps.fallback!==undefined&&nextProps.unstable_avoidThisFallback!==true){suspenseContext=addSubtreeSuspenseContext(suspenseContext,InvisibleParentSuspenseContext);}}}suspenseContext=setDefaultShallowSuspenseContext(suspenseContext);pushSuspenseContext(workInProgress,suspenseContext);{if('maxDuration'in nextProps){if(!didWarnAboutMaxDuration){didWarnAboutMaxDuration=true;warning$1(false,'maxDuration has been removed from React. '+'Remove the maxDuration prop.');}}}// This next part is a bit confusing. If the children timeout, we switch to\n// showing the fallback children in place of the \"primary\" children.\n// However, we don't want to delete the primary children because then their\n// state will be lost (both the React state and the host state, e.g.\n// uncontrolled form inputs). Instead we keep them mounted and hide them.\n// Both the fallback children AND the primary children are rendered at the\n// same time. Once the primary children are un-suspended, we can delete\n// the fallback children \\u2014 don't need to preserve their state.\n//\n// The two sets of children are siblings in the host environment, but\n// semantically, for purposes of reconciliation, they are two separate sets.\n// So we store them using two fragment fibers.\n//\n// However, we want to avoid allocating extra fibers for every placeholder.\n// They're only necessary when the children time out, because that's the\n// only time when both sets are mounted.\n//\n// So, the extra fragment fibers are only used if the children time out.\n// Otherwise, we render the primary children directly. This requires some\n// custom reconciliation logic to preserve the state of the primary\n// children. It's essentially a very basic form of re-parenting.\n// `child` points to the child fiber. In the normal case, this is the first\n// fiber of the primary children set. In the timed-out case, it's a\n// a fragment fiber containing the primary children.\nvar child=void 0;// `next` points to the next fiber React should render. In the normal case,\n// it's the same as `child`: the first fiber of the primary children set.\n// In the timed-out case, it's a fragment fiber containing the *fallback*\n// children -- we skip over the primary children entirely.\nvar next=void 0;if(current$$1===null){if(enableSuspenseServerRenderer){// If we're currently hydrating, try to hydrate this boundary.\n// But only if this has a fallback.\nif(nextProps.fallback!==undefined){tryToClaimNextHydratableInstance(workInProgress);// This could've changed the tag if this was a dehydrated suspense component.\nif(workInProgress.tag===DehydratedSuspenseComponent){popSuspenseContext(workInProgress);return updateDehydratedSuspenseComponent(null,workInProgress,renderExpirationTime);}}}// This is the initial mount. This branch is pretty simple because there's\n// no previous state that needs to be preserved.\nif(nextDidTimeout){// Mount separate fragments for primary and fallback children.\nvar nextFallbackChildren=nextProps.fallback;var primaryChildFragment=createFiberFromFragment(null,mode,NoWork,null);primaryChildFragment.return=workInProgress;if((workInProgress.mode&BatchedMode)===NoMode){// Outside of batched mode, we commit the effects from the\nvar progressedState=workInProgress.memoizedState;var progressedPrimaryChild=progressedState!==null?workInProgress.child.child:workInProgress.child;primaryChildFragment.child=progressedPrimaryChild;var progressedChild=progressedPrimaryChild;while(progressedChild!==null){progressedChild.return=primaryChildFragment;progressedChild=progressedChild.sibling;}}var fallbackChildFragment=createFiberFromFragment(nextFallbackChildren,mode,renderExpirationTime,null);fallbackChildFragment.return=workInProgress;primaryChildFragment.sibling=fallbackChildFragment;child=primaryChildFragment;// Skip the primary children, and continue working on the\n// fallback children.\nnext=fallbackChildFragment;}else{// Mount the primary children without an intermediate fragment fiber.\nvar nextPrimaryChildren=nextProps.children;child=next=mountChildFibers(workInProgress,null,nextPrimaryChildren,renderExpirationTime);}}else{// This is an update. This branch is more complicated because we need to\n// ensure the state of the primary children is preserved.\nvar prevState=current$$1.memoizedState;var prevDidTimeout=prevState!==null;if(prevDidTimeout){// The current tree already timed out. That means each child set is\nvar currentPrimaryChildFragment=current$$1.child;var currentFallbackChildFragment=currentPrimaryChildFragment.sibling;if(nextDidTimeout){// Still timed out. Reuse the current primary children by cloning\n// its fragment. We're going to skip over these entirely.\nvar _nextFallbackChildren=nextProps.fallback;var _primaryChildFragment=createWorkInProgress(currentPrimaryChildFragment,currentPrimaryChildFragment.pendingProps,NoWork);_primaryChildFragment.return=workInProgress;if((workInProgress.mode&BatchedMode)===NoMode){// Outside of batched mode, we commit the effects from the\nvar _progressedState=workInProgress.memoizedState;var _progressedPrimaryChild=_progressedState!==null?workInProgress.child.child:workInProgress.child;if(_progressedPrimaryChild!==currentPrimaryChildFragment.child){_primaryChildFragment.child=_progressedPrimaryChild;var _progressedChild=_progressedPrimaryChild;while(_progressedChild!==null){_progressedChild.return=_primaryChildFragment;_progressedChild=_progressedChild.sibling;}}}// Because primaryChildFragment is a new fiber that we're inserting as the\n// parent of a new tree, we need to set its treeBaseDuration.\nif(enableProfilerTimer&&workInProgress.mode&ProfileMode){// treeBaseDuration is the sum of all the child tree base durations.\nvar treeBaseDuration=0;var hiddenChild=_primaryChildFragment.child;while(hiddenChild!==null){treeBaseDuration+=hiddenChild.treeBaseDuration;hiddenChild=hiddenChild.sibling;}_primaryChildFragment.treeBaseDuration=treeBaseDuration;}// Clone the fallback child fragment, too. These we'll continue\n// working on.\nvar _fallbackChildFragment=createWorkInProgress(currentFallbackChildFragment,_nextFallbackChildren,currentFallbackChildFragment.expirationTime);_fallbackChildFragment.return=workInProgress;_primaryChildFragment.sibling=_fallbackChildFragment;child=_primaryChildFragment;_primaryChildFragment.childExpirationTime=NoWork;// Skip the primary children, and continue working on the\n// fallback children.\nnext=_fallbackChildFragment;}else{// No longer suspended. Switch back to showing the primary children,\n// and remove the intermediate fragment fiber.\nvar _nextPrimaryChildren=nextProps.children;var currentPrimaryChild=currentPrimaryChildFragment.child;var primaryChild=reconcileChildFibers(workInProgress,currentPrimaryChild,_nextPrimaryChildren,renderExpirationTime);// If this render doesn't suspend, we need to delete the fallback\n// children. Wait until the complete phase, after we've confirmed the\n// fallback is no longer needed.\n// TODO: Would it be better to store the fallback fragment on\n// the stateNode?\n// Continue rendering the children, like we normally do.\nchild=next=primaryChild;}}else{// The current tree has not already timed out. That means the primary\n// children are not wrapped in a fragment fiber.\nvar _currentPrimaryChild=current$$1.child;if(nextDidTimeout){// Timed out. Wrap the children in a fragment fiber to keep them\n// separate from the fallback children.\nvar _nextFallbackChildren2=nextProps.fallback;var _primaryChildFragment2=createFiberFromFragment(// It shouldn't matter what the pending props are because we aren't\n// going to render this fragment.\nnull,mode,NoWork,null);_primaryChildFragment2.return=workInProgress;_primaryChildFragment2.child=_currentPrimaryChild;if(_currentPrimaryChild!==null){_currentPrimaryChild.return=_primaryChildFragment2;}// Even though we're creating a new fiber, there are no new children,\n// because we're reusing an already mounted tree. So we don't need to\n// schedule a placement.\n// primaryChildFragment.effectTag |= Placement;\nif((workInProgress.mode&BatchedMode)===NoMode){// Outside of batched mode, we commit the effects from the\nvar _progressedState2=workInProgress.memoizedState;var _progressedPrimaryChild2=_progressedState2!==null?workInProgress.child.child:workInProgress.child;_primaryChildFragment2.child=_progressedPrimaryChild2;var _progressedChild2=_progressedPrimaryChild2;while(_progressedChild2!==null){_progressedChild2.return=_primaryChildFragment2;_progressedChild2=_progressedChild2.sibling;}}// Because primaryChildFragment is a new fiber that we're inserting as the\n// parent of a new tree, we need to set its treeBaseDuration.\nif(enableProfilerTimer&&workInProgress.mode&ProfileMode){// treeBaseDuration is the sum of all the child tree base durations.\nvar _treeBaseDuration=0;var _hiddenChild=_primaryChildFragment2.child;while(_hiddenChild!==null){_treeBaseDuration+=_hiddenChild.treeBaseDuration;_hiddenChild=_hiddenChild.sibling;}_primaryChildFragment2.treeBaseDuration=_treeBaseDuration;}// Create a fragment from the fallback children, too.\nvar _fallbackChildFragment2=createFiberFromFragment(_nextFallbackChildren2,mode,renderExpirationTime,null);_fallbackChildFragment2.return=workInProgress;_primaryChildFragment2.sibling=_fallbackChildFragment2;_fallbackChildFragment2.effectTag|=Placement;child=_primaryChildFragment2;_primaryChildFragment2.childExpirationTime=NoWork;// Skip the primary children, and continue working on the\n// fallback children.\nnext=_fallbackChildFragment2;}else{// Still haven't timed out.  Continue rendering the children, like we\n// normally do.\nvar _nextPrimaryChildren2=nextProps.children;next=child=reconcileChildFibers(workInProgress,_currentPrimaryChild,_nextPrimaryChildren2,renderExpirationTime);}}workInProgress.stateNode=current$$1.stateNode;}workInProgress.memoizedState=nextState;workInProgress.child=child;return next;}function retrySuspenseComponentWithoutHydrating(current$$1,workInProgress,renderExpirationTime){// Detach from the current dehydrated boundary.\ncurrent$$1.alternate=null;workInProgress.alternate=null;// Insert a deletion in the effect list.\nvar returnFiber=workInProgress.return;(function(){if(!(returnFiber!==null)){{throw ReactError(Error('Suspense boundaries are never on the root. This is probably a bug in React.'));}}})();var last=returnFiber.lastEffect;if(last!==null){last.nextEffect=current$$1;returnFiber.lastEffect=current$$1;}else{returnFiber.firstEffect=returnFiber.lastEffect=current$$1;}current$$1.nextEffect=null;current$$1.effectTag=Deletion;popSuspenseContext(workInProgress);// Upgrade this work in progress to a real Suspense component.\nworkInProgress.tag=SuspenseComponent;workInProgress.stateNode=null;workInProgress.memoizedState=null;// This is now an insertion.\nworkInProgress.effectTag|=Placement;// Retry as a real Suspense component.\nreturn updateSuspenseComponent(null,workInProgress,renderExpirationTime);}function updateDehydratedSuspenseComponent(current$$1,workInProgress,renderExpirationTime){pushSuspenseContext(workInProgress,setDefaultShallowSuspenseContext(suspenseStackCursor.current));var suspenseInstance=workInProgress.stateNode;if(current$$1===null){// During the first pass, we'll bail out and not drill into the children.\n// Instead, we'll leave the content in place and try to hydrate it later.\nif(isSuspenseInstanceFallback(suspenseInstance)){// This is a client-only boundary. Since we won't get any content from the server\n// for this, we need to schedule that at a higher priority based on when it would\n// have timed out. In theory we could render it in this pass but it would have the\n// wrong priority associated with it and will prevent hydration of parent path.\n// Instead, we'll leave work left on it to render it in a separate commit.\n// TODO This time should be the time at which the server rendered response that is\n// a parent to this boundary was displayed. However, since we currently don't have\n// a protocol to transfer that time, we'll just estimate it by using the current\n// time. This will mean that Suspense timeouts are slightly shifted to later than\n// they should be.\nvar serverDisplayTime=requestCurrentTime();// Schedule a normal pri update to render this content.\nworkInProgress.expirationTime=computeAsyncExpiration(serverDisplayTime);}else{// We'll continue hydrating the rest at offscreen priority since we'll already\n// be showing the right content coming from the server, it is no rush.\nworkInProgress.expirationTime=Never;}return null;}if((workInProgress.effectTag&DidCapture)!==NoEffect){// Something suspended. Leave the existing children in place.\n// TODO: In non-concurrent mode, should we commit the nodes we have hydrated so far?\nworkInProgress.child=null;return null;}if(isSuspenseInstanceFallback(suspenseInstance)){// This boundary is in a permanent fallback state. In this case, we'll never\n// get an update and we'll never be able to hydrate the final content. Let's just try the\n// client side render instead.\nreturn retrySuspenseComponentWithoutHydrating(current$$1,workInProgress,renderExpirationTime);}// We use childExpirationTime to indicate that a child might depend on context, so if\n// any context has changed, we need to treat is as if the input might have changed.\nvar hasContextChanged$$1=current$$1.childExpirationTime>=renderExpirationTime;if(didReceiveUpdate||hasContextChanged$$1){// This boundary has changed since the first render. This means that we are now unable to\n// hydrate it. We might still be able to hydrate it using an earlier expiration time but\n// during this render we can't. Instead, we're going to delete the whole subtree and\n// instead inject a new real Suspense boundary to take its place, which may render content\n// or fallback. The real Suspense boundary will suspend for a while so we have some time\n// to ensure it can produce real content, but all state and pending events will be lost.\nreturn retrySuspenseComponentWithoutHydrating(current$$1,workInProgress,renderExpirationTime);}else if(isSuspenseInstancePending(suspenseInstance)){// This component is still pending more data from the server, so we can't hydrate its\n// content. We treat it as if this component suspended itself. It might seem as if\n// we could just try to render it client-side instead. However, this will perform a\n// lot of unnecessary work and is unlikely to complete since it often will suspend\n// on missing data anyway. Additionally, the server might be able to render more\n// than we can on the client yet. In that case we'd end up with more fallback states\n// on the client than if we just leave it alone. If the server times out or errors\n// these should update this boundary to the permanent Fallback state instead.\n// Mark it as having captured (i.e. suspended).\nworkInProgress.effectTag|=DidCapture;// Leave the children in place. I.e. empty.\nworkInProgress.child=null;// Register a callback to retry this boundary once the server has sent the result.\nregisterSuspenseInstanceRetry(suspenseInstance,retryTimedOutBoundary.bind(null,current$$1));return null;}else{// This is the first attempt.\nreenterHydrationStateFromDehydratedSuspenseInstance(workInProgress);var nextProps=workInProgress.pendingProps;var nextChildren=nextProps.children;workInProgress.child=mountChildFibers(workInProgress,null,nextChildren,renderExpirationTime);return workInProgress.child;}}function propagateSuspenseContextChange(workInProgress,firstChild,renderExpirationTime){// Mark any Suspense boundaries with fallbacks as having work to do.\n// If they were previously forced into fallbacks, they may now be able\n// to unblock.\nvar node=firstChild;while(node!==null){if(node.tag===SuspenseComponent){var state=node.memoizedState;if(state!==null){if(node.expirationTime<renderExpirationTime){node.expirationTime=renderExpirationTime;}var alternate=node.alternate;if(alternate!==null&&alternate.expirationTime<renderExpirationTime){alternate.expirationTime=renderExpirationTime;}scheduleWorkOnParentPath(node.return,renderExpirationTime);}}else if(node.child!==null){node.child.return=node;node=node.child;continue;}if(node===workInProgress){return;}while(node.sibling===null){if(node.return===null||node.return===workInProgress){return;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}}function findLastContentRow(firstChild){// This is going to find the last row among these children that is already\n// showing content on the screen, as opposed to being in fallback state or\n// new. If a row has multiple Suspense boundaries, any of them being in the\n// fallback state, counts as the whole row being in a fallback state.\n// Note that the \"rows\" will be workInProgress, but any nested children\n// will still be current since we haven't rendered them yet. The mounted\n// order may not be the same as the new order. We use the new order.\nvar row=firstChild;var lastContentRow=null;while(row!==null){var currentRow=row.alternate;// New rows can't be content rows.\nif(currentRow!==null&&findFirstSuspended(currentRow)===null){lastContentRow=row;}row=row.sibling;}return lastContentRow;}function validateRevealOrder(revealOrder){{if(revealOrder!==undefined&&revealOrder!=='forwards'&&revealOrder!=='backwards'&&revealOrder!=='together'&&!didWarnAboutRevealOrder[revealOrder]){didWarnAboutRevealOrder[revealOrder]=true;if(typeof revealOrder==='string'){switch(revealOrder.toLowerCase()){case'together':case'forwards':case'backwards':{warning$1(false,'\"%s\" is not a valid value for revealOrder on <SuspenseList />. '+'Use lowercase \"%s\" instead.',revealOrder,revealOrder.toLowerCase());break;}case'forward':case'backward':{warning$1(false,'\"%s\" is not a valid value for revealOrder on <SuspenseList />. '+'React uses the -s suffix in the spelling. Use \"%ss\" instead.',revealOrder,revealOrder.toLowerCase());break;}default:warning$1(false,'\"%s\" is not a supported revealOrder on <SuspenseList />. '+'Did you mean \"together\", \"forwards\" or \"backwards\"?',revealOrder);break;}}else{warning$1(false,'%s is not a supported value for revealOrder on <SuspenseList />. '+'Did you mean \"together\", \"forwards\" or \"backwards\"?',revealOrder);}}}}function validateTailOptions(tailMode,revealOrder){{if(tailMode!==undefined&&!didWarnAboutTailOptions[tailMode]){if(tailMode!=='collapsed'&&tailMode!=='hidden'){didWarnAboutTailOptions[tailMode]=true;warning$1(false,'\"%s\" is not a supported value for tail on <SuspenseList />. '+'Did you mean \"collapsed\" or \"hidden\"?',tailMode);}else if(revealOrder!=='forwards'&&revealOrder!=='backwards'){didWarnAboutTailOptions[tailMode]=true;warning$1(false,'<SuspenseList tail=\"%s\" /> is only valid if revealOrder is '+'\"forwards\" or \"backwards\". '+'Did you mean to specify revealOrder=\"forwards\"?',tailMode);}}}}function validateSuspenseListNestedChild(childSlot,index){{var isArray=Array.isArray(childSlot);var isIterable=!isArray&&typeof getIteratorFn(childSlot)==='function';if(isArray||isIterable){var type=isArray?'array':'iterable';warning$1(false,'A nested %s was passed to row #%s in <SuspenseList />. Wrap it in '+'an additional SuspenseList to configure its revealOrder: '+'<SuspenseList revealOrder=...> ... '+'<SuspenseList revealOrder=...>{%s}</SuspenseList> ... '+'</SuspenseList>',type,index,type);return false;}}return true;}function validateSuspenseListChildren(children,revealOrder){{if((revealOrder==='forwards'||revealOrder==='backwards')&&children!==undefined&&children!==null&&children!==false){if(Array.isArray(children)){for(var i=0;i<children.length;i++){if(!validateSuspenseListNestedChild(children[i],i)){return;}}}else{var iteratorFn=getIteratorFn(children);if(typeof iteratorFn==='function'){var childrenIterator=iteratorFn.call(children);if(childrenIterator){var step=childrenIterator.next();var _i=0;for(;!step.done;step=childrenIterator.next()){if(!validateSuspenseListNestedChild(step.value,_i)){return;}_i++;}}}else{warning$1(false,'A single row was passed to a <SuspenseList revealOrder=\"%s\" />. '+'This is not useful since it needs multiple rows. '+'Did you mean to pass multiple children or an array?',revealOrder);}}}}}function initSuspenseListRenderState(workInProgress,isBackwards,tail,lastContentRow,tailMode){var renderState=workInProgress.memoizedState;if(renderState===null){workInProgress.memoizedState={isBackwards:isBackwards,rendering:null,last:lastContentRow,tail:tail,tailExpiration:0,tailMode:tailMode};}else{// We can reuse the existing object from previous renders.\nrenderState.isBackwards=isBackwards;renderState.rendering=null;renderState.last=lastContentRow;renderState.tail=tail;renderState.tailExpiration=0;renderState.tailMode=tailMode;}}// This can end up rendering this component multiple passes.\n// The first pass splits the children fibers into two sets. A head and tail.\n// We first render the head. If anything is in fallback state, we do another\n// pass through beginWork to rerender all children (including the tail) with\n// the force suspend context. If the first render didn't have anything in\n// in fallback state. Then we render each row in the tail one-by-one.\n// That happens in the completeWork phase without going back to beginWork.\nfunction updateSuspenseListComponent(current$$1,workInProgress,renderExpirationTime){var nextProps=workInProgress.pendingProps;var revealOrder=nextProps.revealOrder;var tailMode=nextProps.tail;var newChildren=nextProps.children;validateRevealOrder(revealOrder);validateTailOptions(tailMode,revealOrder);validateSuspenseListChildren(newChildren,revealOrder);reconcileChildren(current$$1,workInProgress,newChildren,renderExpirationTime);var suspenseContext=suspenseStackCursor.current;var shouldForceFallback=hasSuspenseContext(suspenseContext,ForceSuspenseFallback);if(shouldForceFallback){suspenseContext=setShallowSuspenseContext(suspenseContext,ForceSuspenseFallback);workInProgress.effectTag|=DidCapture;}else{var didSuspendBefore=current$$1!==null&&(current$$1.effectTag&DidCapture)!==NoEffect;if(didSuspendBefore){// If we previously forced a fallback, we need to schedule work\n// on any nested boundaries to let them know to try to render\n// again. This is the same as context updating.\npropagateSuspenseContextChange(workInProgress,workInProgress.child,renderExpirationTime);}suspenseContext=setDefaultShallowSuspenseContext(suspenseContext);}pushSuspenseContext(workInProgress,suspenseContext);if((workInProgress.mode&BatchedMode)===NoMode){// Outside of batched mode, SuspenseList doesn't work so we just\n// use make it a noop by treating it as the default revealOrder.\nworkInProgress.memoizedState=null;}else{switch(revealOrder){case'forwards':{var lastContentRow=findLastContentRow(workInProgress.child);var tail=void 0;if(lastContentRow===null){// The whole list is part of the tail.\n// TODO: We could fast path by just rendering the tail now.\ntail=workInProgress.child;workInProgress.child=null;}else{// Disconnect the tail rows after the content row.\n// We're going to render them separately later.\ntail=lastContentRow.sibling;lastContentRow.sibling=null;}initSuspenseListRenderState(workInProgress,false,// isBackwards\ntail,lastContentRow,tailMode);break;}case'backwards':{// We're going to find the first row that has existing content.\n// At the same time we're going to reverse the list of everything\n// we pass in the meantime. That's going to be our tail in reverse\n// order.\nvar _tail=null;var row=workInProgress.child;workInProgress.child=null;while(row!==null){var currentRow=row.alternate;// New rows can't be content rows.\nif(currentRow!==null&&findFirstSuspended(currentRow)===null){// This is the beginning of the main content.\nworkInProgress.child=row;break;}var nextRow=row.sibling;row.sibling=_tail;_tail=row;row=nextRow;}// TODO: If workInProgress.child is null, we can continue on the tail immediately.\ninitSuspenseListRenderState(workInProgress,true,// isBackwards\n_tail,null,// last\ntailMode);break;}case'together':{initSuspenseListRenderState(workInProgress,false,// isBackwards\nnull,// tail\nnull,// last\nundefined);break;}default:{// The default reveal order is the same as not having\n// a boundary.\nworkInProgress.memoizedState=null;}}}return workInProgress.child;}function updatePortalComponent(current$$1,workInProgress,renderExpirationTime){pushHostContainer(workInProgress,workInProgress.stateNode.containerInfo);var nextChildren=workInProgress.pendingProps;if(current$$1===null){// Portals are special because we don't append the children during mount\n// but at commit. Therefore we need to track insertions which the normal\n// flow doesn't do during mount. This doesn't happen at the root because\n// the root always starts with a \"current\" with a null child.\n// TODO: Consider unifying this with how the root works.\nworkInProgress.child=reconcileChildFibers(workInProgress,null,nextChildren,renderExpirationTime);}else{reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);}return workInProgress.child;}function updateContextProvider(current$$1,workInProgress,renderExpirationTime){var providerType=workInProgress.type;var context=providerType._context;var newProps=workInProgress.pendingProps;var oldProps=workInProgress.memoizedProps;var newValue=newProps.value;{var providerPropTypes=workInProgress.type.propTypes;if(providerPropTypes){checkPropTypes(providerPropTypes,newProps,'prop','Context.Provider',getCurrentFiberStackInDev);}}pushProvider(workInProgress,newValue);if(oldProps!==null){var oldValue=oldProps.value;var changedBits=calculateChangedBits(context,newValue,oldValue);if(changedBits===0){// No change. Bailout early if children are the same.\nif(oldProps.children===newProps.children&&!hasContextChanged()){return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}}else{// The context value changed. Search for matching consumers and schedule\n// them to update.\npropagateContextChange(workInProgress,context,changedBits,renderExpirationTime);}}var newChildren=newProps.children;reconcileChildren(current$$1,workInProgress,newChildren,renderExpirationTime);return workInProgress.child;}var hasWarnedAboutUsingContextAsConsumer=false;function updateContextConsumer(current$$1,workInProgress,renderExpirationTime){var context=workInProgress.type;// The logic below for Context differs depending on PROD or DEV mode. In\n// DEV mode, we create a separate object for Context.Consumer that acts\n// like a proxy to Context. This proxy object adds unnecessary code in PROD\n// so we use the old behaviour (Context.Consumer references Context) to\n// reduce size and overhead. The separate object references context via\n// a property called \"_context\", which also gives us the ability to check\n// in DEV mode if this property exists or not and warn if it does not.\n{if(context._context===undefined){// This may be because it's a Context (rather than a Consumer).\n// Or it may be because it's older React where they're the same thing.\n// We only want to warn if we're sure it's a new React.\nif(context!==context.Consumer){if(!hasWarnedAboutUsingContextAsConsumer){hasWarnedAboutUsingContextAsConsumer=true;warning$1(false,'Rendering <Context> directly is not supported and will be removed in '+'a future major release. Did you mean to render <Context.Consumer> instead?');}}}else{context=context._context;}}var newProps=workInProgress.pendingProps;var render=newProps.children;{!(typeof render==='function')?warningWithoutStack$1(false,'A context consumer was rendered with multiple children, or a child '+\"that isn't a function. A context consumer expects a single child \"+'that is a function. If you did pass a function, make sure there '+'is no trailing or leading whitespace around it.'):void 0;}prepareToReadContext(workInProgress,renderExpirationTime);var newValue=_readContext(context,newProps.unstable_observedBits);var newChildren=void 0;{ReactCurrentOwner$2.current=workInProgress;setCurrentPhase('render');newChildren=render(newValue);setCurrentPhase(null);}// React DevTools reads this flag.\nworkInProgress.effectTag|=PerformedWork;reconcileChildren(current$$1,workInProgress,newChildren,renderExpirationTime);return workInProgress.child;}function updateFundamentalComponent$1(current$$1,workInProgress,renderExpirationTime){var fundamentalImpl=workInProgress.type.impl;if(fundamentalImpl.reconcileChildren===false){return null;}var nextProps=workInProgress.pendingProps;var nextChildren=nextProps.children;reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);return workInProgress.child;}function markWorkInProgressReceivedUpdate(){didReceiveUpdate=true;}function bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime){cancelWorkTimer(workInProgress);if(current$$1!==null){// Reuse previous dependencies\nworkInProgress.dependencies=current$$1.dependencies;}if(enableProfilerTimer){// Don't update \"base\" render times for bailouts.\nstopProfilerTimerIfRunning(workInProgress);}// Check if the children have any pending work.\nvar childExpirationTime=workInProgress.childExpirationTime;if(childExpirationTime<renderExpirationTime){// The children don't have any work either. We can skip them.\n// TODO: Once we add back resuming, we should check if the children are\n// a work-in-progress set. If so, we need to transfer their effects.\nreturn null;}else{// This fiber doesn't have work, but its subtree does. Clone the child\n// fibers and continue.\ncloneChildFibers(current$$1,workInProgress);return workInProgress.child;}}function remountFiber(current$$1,oldWorkInProgress,newWorkInProgress){{var returnFiber=oldWorkInProgress.return;if(returnFiber===null){throw new Error('Cannot swap the root fiber.');}// Disconnect from the old current.\n// It will get deleted.\ncurrent$$1.alternate=null;oldWorkInProgress.alternate=null;// Connect to the new tree.\nnewWorkInProgress.index=oldWorkInProgress.index;newWorkInProgress.sibling=oldWorkInProgress.sibling;newWorkInProgress.return=oldWorkInProgress.return;newWorkInProgress.ref=oldWorkInProgress.ref;// Replace the child/sibling pointers above it.\nif(oldWorkInProgress===returnFiber.child){returnFiber.child=newWorkInProgress;}else{var prevSibling=returnFiber.child;if(prevSibling===null){throw new Error('Expected parent to have a child.');}while(prevSibling.sibling!==oldWorkInProgress){prevSibling=prevSibling.sibling;if(prevSibling===null){throw new Error('Expected to find the previous sibling.');}}prevSibling.sibling=newWorkInProgress;}// Delete the old fiber and place the new one.\n// Since the old fiber is disconnected, we have to schedule it manually.\nvar last=returnFiber.lastEffect;if(last!==null){last.nextEffect=current$$1;returnFiber.lastEffect=current$$1;}else{returnFiber.firstEffect=returnFiber.lastEffect=current$$1;}current$$1.nextEffect=null;current$$1.effectTag=Deletion;newWorkInProgress.effectTag|=Placement;// Restart work from the new fiber.\nreturn newWorkInProgress;}}function beginWork$1(current$$1,workInProgress,renderExpirationTime){var updateExpirationTime=workInProgress.expirationTime;{if(workInProgress._debugNeedsRemount&&current$$1!==null){// This will restart the begin phase with a new fiber.\nreturn remountFiber(current$$1,workInProgress,createFiberFromTypeAndProps(workInProgress.type,workInProgress.key,workInProgress.pendingProps,workInProgress._debugOwner||null,workInProgress.mode,workInProgress.expirationTime));}}if(current$$1!==null){var oldProps=current$$1.memoizedProps;var newProps=workInProgress.pendingProps;if(oldProps!==newProps||hasContextChanged()||// Force a re-render if the implementation changed due to hot reload:\nworkInProgress.type!==current$$1.type){// If props or context changed, mark the fiber as having performed work.\n// This may be unset if the props are determined to be equal later (memo).\ndidReceiveUpdate=true;}else if(updateExpirationTime<renderExpirationTime){didReceiveUpdate=false;// This fiber does not have any pending work. Bailout without entering\n// the begin phase. There's still some bookkeeping we that needs to be done\n// in this optimized path, mostly pushing stuff onto the stack.\nswitch(workInProgress.tag){case HostRoot:pushHostRootContext(workInProgress);resetHydrationState();break;case HostComponent:pushHostContext(workInProgress);if(workInProgress.mode&ConcurrentMode&&renderExpirationTime!==Never&&shouldDeprioritizeSubtree(workInProgress.type,newProps)){if(enableSchedulerTracing){markSpawnedWork(Never);}// Schedule this fiber to re-render at offscreen priority. Then bailout.\nworkInProgress.expirationTime=workInProgress.childExpirationTime=Never;return null;}break;case ClassComponent:{var Component=workInProgress.type;if(isContextProvider(Component)){pushContextProvider(workInProgress);}break;}case HostPortal:pushHostContainer(workInProgress,workInProgress.stateNode.containerInfo);break;case ContextProvider:{var newValue=workInProgress.memoizedProps.value;pushProvider(workInProgress,newValue);break;}case Profiler:if(enableProfilerTimer){workInProgress.effectTag|=Update;}break;case SuspenseComponent:{var state=workInProgress.memoizedState;var didTimeout=state!==null;if(didTimeout){// If this boundary is currently timed out, we need to decide\n// whether to retry the primary children, or to skip over it and\n// go straight to the fallback. Check the priority of the primary\nvar primaryChildFragment=workInProgress.child;var primaryChildExpirationTime=primaryChildFragment.childExpirationTime;if(primaryChildExpirationTime!==NoWork&&primaryChildExpirationTime>=renderExpirationTime){// The primary children have pending work. Use the normal path\n// to attempt to render the primary children again.\nreturn updateSuspenseComponent(current$$1,workInProgress,renderExpirationTime);}else{pushSuspenseContext(workInProgress,setDefaultShallowSuspenseContext(suspenseStackCursor.current));// The primary children do not have pending work with sufficient\n// priority. Bailout.\nvar child=bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);if(child!==null){// The fallback children have pending work. Skip over the\n// primary children and work on the fallback.\nreturn child.sibling;}else{return null;}}}else{pushSuspenseContext(workInProgress,setDefaultShallowSuspenseContext(suspenseStackCursor.current));}break;}case DehydratedSuspenseComponent:{if(enableSuspenseServerRenderer){pushSuspenseContext(workInProgress,setDefaultShallowSuspenseContext(suspenseStackCursor.current));// We know that this component will suspend again because if it has\n// been unsuspended it has committed as a regular Suspense component.\n// If it needs to be retried, it should have work scheduled on it.\nworkInProgress.effectTag|=DidCapture;}break;}case SuspenseListComponent:{var didSuspendBefore=(current$$1.effectTag&DidCapture)!==NoEffect;var hasChildWork=workInProgress.childExpirationTime>=renderExpirationTime;if(didSuspendBefore){if(hasChildWork){// If something was in fallback state last time, and we have all the\n// same children then we're still in progressive loading state.\n// Something might get unblocked by state updates or retries in the\n// tree which will affect the tail. So we need to use the normal\n// path to compute the correct tail.\nreturn updateSuspenseListComponent(current$$1,workInProgress,renderExpirationTime);}// If none of the children had any work, that means that none of\n// them got retried so they'll still be blocked in the same way\n// as before. We can fast bail out.\nworkInProgress.effectTag|=DidCapture;}// If nothing suspended before and we're rendering the same children,\n// then the tail doesn't matter. Anything new that suspends will work\n// in the \"together\" mode, so we can continue from the state we had.\nvar renderState=workInProgress.memoizedState;if(renderState!==null){// Reset to the \"together\" mode in case we've started a different\n// update in the past but didn't complete it.\nrenderState.rendering=null;renderState.tail=null;}pushSuspenseContext(workInProgress,suspenseStackCursor.current);if(hasChildWork){break;}else{// If none of the children had any work, that means that none of\n// them got retried so they'll still be blocked in the same way\n// as before. We can fast bail out.\nreturn null;}}}return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}}else{didReceiveUpdate=false;}// Before entering the begin phase, clear the expiration time.\nworkInProgress.expirationTime=NoWork;switch(workInProgress.tag){case IndeterminateComponent:{return mountIndeterminateComponent(current$$1,workInProgress,workInProgress.type,renderExpirationTime);}case LazyComponent:{var elementType=workInProgress.elementType;return mountLazyComponent(current$$1,workInProgress,elementType,updateExpirationTime,renderExpirationTime);}case FunctionComponent:{var _Component=workInProgress.type;var unresolvedProps=workInProgress.pendingProps;var resolvedProps=workInProgress.elementType===_Component?unresolvedProps:resolveDefaultProps(_Component,unresolvedProps);return updateFunctionComponent(current$$1,workInProgress,_Component,resolvedProps,renderExpirationTime);}case ClassComponent:{var _Component2=workInProgress.type;var _unresolvedProps=workInProgress.pendingProps;var _resolvedProps=workInProgress.elementType===_Component2?_unresolvedProps:resolveDefaultProps(_Component2,_unresolvedProps);return updateClassComponent(current$$1,workInProgress,_Component2,_resolvedProps,renderExpirationTime);}case HostRoot:return updateHostRoot(current$$1,workInProgress,renderExpirationTime);case HostComponent:return updateHostComponent(current$$1,workInProgress,renderExpirationTime);case HostText:return updateHostText(current$$1,workInProgress);case SuspenseComponent:return updateSuspenseComponent(current$$1,workInProgress,renderExpirationTime);case HostPortal:return updatePortalComponent(current$$1,workInProgress,renderExpirationTime);case ForwardRef:{var type=workInProgress.type;var _unresolvedProps2=workInProgress.pendingProps;var _resolvedProps2=workInProgress.elementType===type?_unresolvedProps2:resolveDefaultProps(type,_unresolvedProps2);return updateForwardRef(current$$1,workInProgress,type,_resolvedProps2,renderExpirationTime);}case Fragment:return updateFragment(current$$1,workInProgress,renderExpirationTime);case Mode:return updateMode(current$$1,workInProgress,renderExpirationTime);case Profiler:return updateProfiler(current$$1,workInProgress,renderExpirationTime);case ContextProvider:return updateContextProvider(current$$1,workInProgress,renderExpirationTime);case ContextConsumer:return updateContextConsumer(current$$1,workInProgress,renderExpirationTime);case MemoComponent:{var _type2=workInProgress.type;var _unresolvedProps3=workInProgress.pendingProps;// Resolve outer props first, then resolve inner props.\nvar _resolvedProps3=resolveDefaultProps(_type2,_unresolvedProps3);{if(workInProgress.type!==workInProgress.elementType){var outerPropTypes=_type2.propTypes;if(outerPropTypes){checkPropTypes(outerPropTypes,_resolvedProps3,// Resolved for outer only\n'prop',getComponentName(_type2),getCurrentFiberStackInDev);}}}_resolvedProps3=resolveDefaultProps(_type2.type,_resolvedProps3);return updateMemoComponent(current$$1,workInProgress,_type2,_resolvedProps3,updateExpirationTime,renderExpirationTime);}case SimpleMemoComponent:{return updateSimpleMemoComponent(current$$1,workInProgress,workInProgress.type,workInProgress.pendingProps,updateExpirationTime,renderExpirationTime);}case IncompleteClassComponent:{var _Component3=workInProgress.type;var _unresolvedProps4=workInProgress.pendingProps;var _resolvedProps4=workInProgress.elementType===_Component3?_unresolvedProps4:resolveDefaultProps(_Component3,_unresolvedProps4);return mountIncompleteClassComponent(current$$1,workInProgress,_Component3,_resolvedProps4,renderExpirationTime);}case DehydratedSuspenseComponent:{if(enableSuspenseServerRenderer){return updateDehydratedSuspenseComponent(current$$1,workInProgress,renderExpirationTime);}break;}case SuspenseListComponent:{return updateSuspenseListComponent(current$$1,workInProgress,renderExpirationTime);}case FundamentalComponent:{if(enableFundamentalAPI){return updateFundamentalComponent$1(current$$1,workInProgress,renderExpirationTime);}break;}}(function(){{{throw ReactError(Error('Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.'));}}})();}function createFundamentalStateInstance(currentFiber,props,impl,state){return{currentFiber:currentFiber,impl:impl,instance:null,prevProps:null,props:props,state:state};}var emptyObject={};var isArray$2=Array.isArray;function markUpdate(workInProgress){// Tag the fiber with an update effect. This turns a Placement into\n// a PlacementAndUpdate.\nworkInProgress.effectTag|=Update;}function markRef$1(workInProgress){workInProgress.effectTag|=Ref;}var _appendAllChildren=void 0;var updateHostContainer=void 0;var updateHostComponent$1=void 0;var updateHostText$1=void 0;if(supportsMutation){// Mutation mode\n_appendAllChildren=function appendAllChildren(parent,workInProgress,needsVisibilityToggle,isHidden){// We only have the top Fiber that was created but we need recurse down its\n// children to find all the terminal nodes.\nvar node=workInProgress.child;while(node!==null){if(node.tag===HostComponent||node.tag===HostText){appendInitialChild(parent,node.stateNode);}else if(node.tag===FundamentalComponent){appendInitialChild(parent,node.stateNode.instance);}else if(node.tag===HostPortal){// If we have a portal child, then we don't want to traverse\n// down its children. Instead, we'll get insertions from each child in\n// the portal directly.\n}else if(node.child!==null){node.child.return=node;node=node.child;continue;}if(node===workInProgress){return;}while(node.sibling===null){if(node.return===null||node.return===workInProgress){return;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}};updateHostContainer=function updateHostContainer(workInProgress){// Noop\n};updateHostComponent$1=function updateHostComponent$1(current,workInProgress,type,newProps,rootContainerInstance){// If we have an alternate, that means this is an update and we need to\n// schedule a side-effect to do the updates.\nvar oldProps=current.memoizedProps;if(oldProps===newProps){// In mutation mode, this is sufficient for a bailout because\n// we won't touch this node even if children changed.\nreturn;}// If we get updated because one of our children updated, we don't\n// have newProps so we'll have to reuse them.\n// TODO: Split the update API as separate for the props vs. children.\n// Even better would be if children weren't special cased at all tho.\nvar instance=workInProgress.stateNode;var currentHostContext=getHostContext();// TODO: Experiencing an error where oldProps is null. Suggests a host\n// component is hitting the resume path. Figure out why. Possibly\n// related to `hidden`.\nvar updatePayload=prepareUpdate(instance,type,oldProps,newProps,rootContainerInstance,currentHostContext);// TODO: Type this specific to this type of component.\nworkInProgress.updateQueue=updatePayload;// If the update payload indicates that there is a change or if there\n// is a new ref we mark this as an update. All the work is done in commitWork.\nif(updatePayload){markUpdate(workInProgress);}};updateHostText$1=function updateHostText$1(current,workInProgress,oldText,newText){// If the text differs, mark it as an update. All the work in done in commitWork.\nif(oldText!==newText){markUpdate(workInProgress);}};}else if(supportsPersistence){// Persistent host tree mode\n_appendAllChildren=function appendAllChildren(parent,workInProgress,needsVisibilityToggle,isHidden){// We only have the top Fiber that was created but we need recurse down its\n// children to find all the terminal nodes.\nvar node=workInProgress.child;while(node!==null){// eslint-disable-next-line no-labels\nbranches:if(node.tag===HostComponent){var instance=node.stateNode;if(needsVisibilityToggle&&isHidden){// This child is inside a timed out tree. Hide it.\nvar props=node.memoizedProps;var type=node.type;instance=cloneHiddenInstance(instance,type,props,node);}appendInitialChild(parent,instance);}else if(node.tag===HostText){var _instance=node.stateNode;if(needsVisibilityToggle&&isHidden){// This child is inside a timed out tree. Hide it.\nvar text=node.memoizedProps;_instance=cloneHiddenTextInstance(_instance,text,node);}appendInitialChild(parent,_instance);}else if(enableFundamentalAPI&&node.tag===FundamentalComponent){var _instance2=node.stateNode.instance;if(needsVisibilityToggle&&isHidden){// This child is inside a timed out tree. Hide it.\nvar _props=node.memoizedProps;var _type=node.type;_instance2=cloneHiddenInstance(_instance2,_type,_props,node);}appendInitialChild(parent,_instance2);}else if(node.tag===HostPortal){// If we have a portal child, then we don't want to traverse\n// down its children. Instead, we'll get insertions from each child in\n// the portal directly.\n}else if(node.tag===SuspenseComponent){if((node.effectTag&Update)!==NoEffect){// Need to toggle the visibility of the primary children.\nvar newIsHidden=node.memoizedState!==null;if(newIsHidden){var primaryChildParent=node.child;if(primaryChildParent!==null){if(primaryChildParent.child!==null){primaryChildParent.child.return=primaryChildParent;_appendAllChildren(parent,primaryChildParent,true,newIsHidden);}var fallbackChildParent=primaryChildParent.sibling;if(fallbackChildParent!==null){fallbackChildParent.return=node;node=fallbackChildParent;continue;}}}}if(node.child!==null){// Continue traversing like normal\nnode.child.return=node;node=node.child;continue;}}else if(node.child!==null){node.child.return=node;node=node.child;continue;}// $FlowFixMe This is correct but Flow is confused by the labeled break.\nnode=node;if(node===workInProgress){return;}while(node.sibling===null){if(node.return===null||node.return===workInProgress){return;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}};// An unfortunate fork of appendAllChildren because we have two different parent types.\nvar appendAllChildrenToContainer=function appendAllChildrenToContainer(containerChildSet,workInProgress,needsVisibilityToggle,isHidden){// We only have the top Fiber that was created but we need recurse down its\n// children to find all the terminal nodes.\nvar node=workInProgress.child;while(node!==null){// eslint-disable-next-line no-labels\nbranches:if(node.tag===HostComponent){var instance=node.stateNode;if(needsVisibilityToggle&&isHidden){// This child is inside a timed out tree. Hide it.\nvar props=node.memoizedProps;var type=node.type;instance=cloneHiddenInstance(instance,type,props,node);}appendChildToContainerChildSet(containerChildSet,instance);}else if(node.tag===HostText){var _instance3=node.stateNode;if(needsVisibilityToggle&&isHidden){// This child is inside a timed out tree. Hide it.\nvar text=node.memoizedProps;_instance3=cloneHiddenTextInstance(_instance3,text,node);}appendChildToContainerChildSet(containerChildSet,_instance3);}else if(enableFundamentalAPI&&node.tag===FundamentalComponent){var _instance4=node.stateNode.instance;if(needsVisibilityToggle&&isHidden){// This child is inside a timed out tree. Hide it.\nvar _props2=node.memoizedProps;var _type2=node.type;_instance4=cloneHiddenInstance(_instance4,_type2,_props2,node);}appendChildToContainerChildSet(containerChildSet,_instance4);}else if(node.tag===HostPortal){// If we have a portal child, then we don't want to traverse\n// down its children. Instead, we'll get insertions from each child in\n// the portal directly.\n}else if(node.tag===SuspenseComponent){if((node.effectTag&Update)!==NoEffect){// Need to toggle the visibility of the primary children.\nvar newIsHidden=node.memoizedState!==null;if(newIsHidden){var primaryChildParent=node.child;if(primaryChildParent!==null){if(primaryChildParent.child!==null){primaryChildParent.child.return=primaryChildParent;appendAllChildrenToContainer(containerChildSet,primaryChildParent,true,newIsHidden);}var fallbackChildParent=primaryChildParent.sibling;if(fallbackChildParent!==null){fallbackChildParent.return=node;node=fallbackChildParent;continue;}}}}if(node.child!==null){// Continue traversing like normal\nnode.child.return=node;node=node.child;continue;}}else if(node.child!==null){node.child.return=node;node=node.child;continue;}// $FlowFixMe This is correct but Flow is confused by the labeled break.\nnode=node;if(node===workInProgress){return;}while(node.sibling===null){if(node.return===null||node.return===workInProgress){return;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}};updateHostContainer=function updateHostContainer(workInProgress){var portalOrRoot=workInProgress.stateNode;var childrenUnchanged=workInProgress.firstEffect===null;if(childrenUnchanged){// No changes, just reuse the existing instance.\n}else{var container=portalOrRoot.containerInfo;var newChildSet=createContainerChildSet(container);// If children might have changed, we have to add them all to the set.\nappendAllChildrenToContainer(newChildSet,workInProgress,false,false);portalOrRoot.pendingChildren=newChildSet;// Schedule an update on the container to swap out the container.\nmarkUpdate(workInProgress);finalizeContainerChildren(container,newChildSet);}};updateHostComponent$1=function updateHostComponent$1(current,workInProgress,type,newProps,rootContainerInstance){var currentInstance=current.stateNode;var oldProps=current.memoizedProps;// If there are no effects associated with this node, then none of our children had any updates.\n// This guarantees that we can reuse all of them.\nvar childrenUnchanged=workInProgress.firstEffect===null;if(childrenUnchanged&&oldProps===newProps){// No changes, just reuse the existing instance.\n// Note that this might release a previous clone.\nworkInProgress.stateNode=currentInstance;return;}var recyclableInstance=workInProgress.stateNode;var currentHostContext=getHostContext();var updatePayload=null;if(oldProps!==newProps){updatePayload=prepareUpdate(recyclableInstance,type,oldProps,newProps,rootContainerInstance,currentHostContext);}if(childrenUnchanged&&updatePayload===null){// No changes, just reuse the existing instance.\n// Note that this might release a previous clone.\nworkInProgress.stateNode=currentInstance;return;}var newInstance=cloneInstance(currentInstance,updatePayload,type,oldProps,newProps,workInProgress,childrenUnchanged,recyclableInstance);if(finalizeInitialChildren(newInstance,type,newProps,rootContainerInstance,currentHostContext)){markUpdate(workInProgress);}workInProgress.stateNode=newInstance;if(childrenUnchanged){// If there are no other effects in this tree, we need to flag this node as having one.\n// Even though we're not going to use it for anything.\n// Otherwise parents won't know that there are new children to propagate upwards.\nmarkUpdate(workInProgress);}else{// If children might have changed, we have to add them all to the set.\n_appendAllChildren(newInstance,workInProgress,false,false);}};updateHostText$1=function updateHostText$1(current,workInProgress,oldText,newText){if(oldText!==newText){// If the text content differs, we'll create a new text instance for it.\nvar rootContainerInstance=getRootHostContainer();var currentHostContext=getHostContext();workInProgress.stateNode=createTextInstance(newText,rootContainerInstance,currentHostContext,workInProgress);// We'll have to mark it as having an effect, even though we won't use the effect for anything.\n// This lets the parents know that at least one of their children has changed.\nmarkUpdate(workInProgress);}};}else{// No host operations\nupdateHostContainer=function updateHostContainer(workInProgress){// Noop\n};updateHostComponent$1=function updateHostComponent$1(current,workInProgress,type,newProps,rootContainerInstance){// Noop\n};updateHostText$1=function updateHostText$1(current,workInProgress,oldText,newText){// Noop\n};}function cutOffTailIfNeeded(renderState,hasRenderedATailFallback){switch(renderState.tailMode){case'hidden':{// Any insertions at the end of the tail list after this point\n// should be invisible. If there are already mounted boundaries\n// anything before them are not considered for collapsing.\n// Therefore we need to go through the whole tail to find if\n// there are any.\nvar tailNode=renderState.tail;var lastTailNode=null;while(tailNode!==null){if(tailNode.alternate!==null){lastTailNode=tailNode;}tailNode=tailNode.sibling;}// Next we're simply going to delete all insertions after the\n// last rendered item.\nif(lastTailNode===null){// All remaining items in the tail are insertions.\nrenderState.tail=null;}else{// Detach the insertion after the last node that was already\n// inserted.\nlastTailNode.sibling=null;}break;}case'collapsed':{// Any insertions at the end of the tail list after this point\n// should be invisible. If there are already mounted boundaries\n// anything before them are not considered for collapsing.\n// Therefore we need to go through the whole tail to find if\n// there are any.\nvar _tailNode=renderState.tail;var _lastTailNode=null;while(_tailNode!==null){if(_tailNode.alternate!==null){_lastTailNode=_tailNode;}_tailNode=_tailNode.sibling;}// Next we're simply going to delete all insertions after the\n// last rendered item.\nif(_lastTailNode===null){// All remaining items in the tail are insertions.\nif(!hasRenderedATailFallback&&renderState.tail!==null){// We suspended during the head. We want to show at least one\n// row at the tail. So we'll keep on and cut off the rest.\nrenderState.tail.sibling=null;}else{renderState.tail=null;}}else{// Detach the insertion after the last node that was already\n// inserted.\n_lastTailNode.sibling=null;}break;}}}function completeWork(current,workInProgress,renderExpirationTime){var newProps=workInProgress.pendingProps;switch(workInProgress.tag){case IndeterminateComponent:break;case LazyComponent:break;case SimpleMemoComponent:case FunctionComponent:break;case ClassComponent:{var Component=workInProgress.type;if(isContextProvider(Component)){popContext(workInProgress);}break;}case HostRoot:{popHostContainer(workInProgress);popTopLevelContextObject(workInProgress);var fiberRoot=workInProgress.stateNode;if(fiberRoot.pendingContext){fiberRoot.context=fiberRoot.pendingContext;fiberRoot.pendingContext=null;}if(current===null||current.child===null){// If we hydrated, pop so that we can delete any remaining children\n// that weren't hydrated.\npopHydrationState(workInProgress);// This resets the hacky state to fix isMounted before committing.\n// TODO: Delete this when we delete isMounted and findDOMNode.\nworkInProgress.effectTag&=~Placement;}updateHostContainer(workInProgress);break;}case HostComponent:{popHostContext(workInProgress);var rootContainerInstance=getRootHostContainer();var type=workInProgress.type;if(current!==null&&workInProgress.stateNode!=null){updateHostComponent$1(current,workInProgress,type,newProps,rootContainerInstance);if(enableFlareAPI){var prevListeners=current.memoizedProps.listeners;var nextListeners=newProps.listeners;var instance=workInProgress.stateNode;if(prevListeners!==nextListeners){updateEventListeners(nextListeners,instance,rootContainerInstance,workInProgress);}}if(current.ref!==workInProgress.ref){markRef$1(workInProgress);}}else{if(!newProps){(function(){if(!(workInProgress.stateNode!==null)){{throw ReactError(Error('We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.'));}}})();// This can happen when we abort work.\nbreak;}var currentHostContext=getHostContext();// TODO: Move createInstance to beginWork and keep it on a context\n// \"stack\" as the parent. Then append children as we go in beginWork\n// or completeWork depending on we want to add then top->down or\n// bottom->up. Top->down is faster in IE11.\nvar wasHydrated=popHydrationState(workInProgress);if(wasHydrated){// TODO: Move this and createInstance step into the beginPhase\n// to consolidate.\nif(prepareToHydrateHostInstance(workInProgress,rootContainerInstance,currentHostContext)){// If changes to the hydrated node needs to be applied at the\n// commit-phase we mark this as such.\nmarkUpdate(workInProgress);}}else{var _instance5=createInstance(type,newProps,rootContainerInstance,currentHostContext,workInProgress);_appendAllChildren(_instance5,workInProgress,false,false);if(enableFlareAPI){var listeners=newProps.listeners;if(listeners!=null){updateEventListeners(listeners,_instance5,rootContainerInstance,workInProgress);}}// Certain renderers require commit-time effects for initial mount.\n// (eg DOM renderer supports auto-focus for certain elements).\n// Make sure such renderers get scheduled for later work.\nif(finalizeInitialChildren(_instance5,type,newProps,rootContainerInstance,currentHostContext)){markUpdate(workInProgress);}workInProgress.stateNode=_instance5;}if(workInProgress.ref!==null){// If there is a ref on a host node we need to schedule a callback\nmarkRef$1(workInProgress);}}break;}case HostText:{var newText=newProps;if(current&&workInProgress.stateNode!=null){var oldText=current.memoizedProps;// If we have an alternate, that means this is an update and we need\n// to schedule a side-effect to do the updates.\nupdateHostText$1(current,workInProgress,oldText,newText);}else{if(typeof newText!=='string'){(function(){if(!(workInProgress.stateNode!==null)){{throw ReactError(Error('We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.'));}}})();// This can happen when we abort work.\n}var _rootContainerInstance=getRootHostContainer();var _currentHostContext=getHostContext();var _wasHydrated=popHydrationState(workInProgress);if(_wasHydrated){if(prepareToHydrateHostTextInstance(workInProgress)){markUpdate(workInProgress);}}else{workInProgress.stateNode=createTextInstance(newText,_rootContainerInstance,_currentHostContext,workInProgress);}}break;}case ForwardRef:break;case SuspenseComponent:{popSuspenseContext(workInProgress);var nextState=workInProgress.memoizedState;if((workInProgress.effectTag&DidCapture)!==NoEffect){// Something suspended. Re-render with the fallback children.\nworkInProgress.expirationTime=renderExpirationTime;// Do not reset the effect list.\nreturn workInProgress;}var nextDidTimeout=nextState!==null;var prevDidTimeout=false;if(current===null){// In cases where we didn't find a suitable hydration boundary we never\n// downgraded this to a DehydratedSuspenseComponent, but we still need to\n// pop the hydration state since we might be inside the insertion tree.\npopHydrationState(workInProgress);}else{var prevState=current.memoizedState;prevDidTimeout=prevState!==null;if(!nextDidTimeout&&prevState!==null){// We just switched from the fallback to the normal children.\n// Delete the fallback.\n// TODO: Would it be better to store the fallback fragment on\nvar currentFallbackChild=current.child.sibling;if(currentFallbackChild!==null){// Deletions go at the beginning of the return fiber's effect list\nvar first=workInProgress.firstEffect;if(first!==null){workInProgress.firstEffect=currentFallbackChild;currentFallbackChild.nextEffect=first;}else{workInProgress.firstEffect=workInProgress.lastEffect=currentFallbackChild;currentFallbackChild.nextEffect=null;}currentFallbackChild.effectTag=Deletion;}}}if(nextDidTimeout&&!prevDidTimeout){// If this subtreee is running in batched mode we can suspend,\n// otherwise we won't suspend.\n// TODO: This will still suspend a synchronous tree if anything\n// in the concurrent tree already suspended during this render.\n// This is a known bug.\nif((workInProgress.mode&BatchedMode)!==NoMode){// TODO: Move this back to throwException because this is too late\n// if this is a large tree which is common for initial loads. We\n// don't know if we should restart a render or not until we get\n// this marker, and this is too late.\n// If this render already had a ping or lower pri updates,\n// and this is the first time we know we're going to suspend we\n// should be able to immediately restart from within throwException.\nvar hasInvisibleChildContext=current===null&&workInProgress.memoizedProps.unstable_avoidThisFallback!==true;if(hasInvisibleChildContext||hasSuspenseContext(suspenseStackCursor.current,InvisibleParentSuspenseContext)){// If this was in an invisible tree or a new render, then showing\n// this boundary is ok.\nrenderDidSuspend();}else{// Otherwise, we're going to have to hide content so we should\n// suspend for longer if possible.\nrenderDidSuspendDelayIfPossible();}}}if(supportsPersistence){// TODO: Only schedule updates if not prevDidTimeout.\nif(nextDidTimeout){// If this boundary just timed out, schedule an effect to attach a\n// retry listener to the proimse. This flag is also used to hide the\n// primary children.\nworkInProgress.effectTag|=Update;}}if(supportsMutation){// TODO: Only schedule updates if these values are non equal, i.e. it changed.\nif(nextDidTimeout||prevDidTimeout){// If this boundary just timed out, schedule an effect to attach a\n// retry listener to the proimse. This flag is also used to hide the\n// primary children. In mutation mode, we also need the flag to\n// *unhide* children that were previously hidden, so check if the\n// is currently timed out, too.\nworkInProgress.effectTag|=Update;}}if(enableSuspenseCallback&&workInProgress.updateQueue!==null&&workInProgress.memoizedProps.suspenseCallback!=null){// Always notify the callback\nworkInProgress.effectTag|=Update;}break;}case Fragment:break;case Mode:break;case Profiler:break;case HostPortal:popHostContainer(workInProgress);updateHostContainer(workInProgress);break;case ContextProvider:// Pop provider fiber\npopProvider(workInProgress);break;case ContextConsumer:break;case MemoComponent:break;case IncompleteClassComponent:{// Same as class component case. I put it down here so that the tags are\n// sequential to ensure this switch is compiled to a jump table.\nvar _Component=workInProgress.type;if(isContextProvider(_Component)){popContext(workInProgress);}break;}case DehydratedSuspenseComponent:{if(enableSuspenseServerRenderer){popSuspenseContext(workInProgress);if(current===null){var _wasHydrated2=popHydrationState(workInProgress);(function(){if(!_wasHydrated2){{throw ReactError(Error('A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.'));}}})();if(enableSchedulerTracing){markSpawnedWork(Never);}skipPastDehydratedSuspenseInstance(workInProgress);}else if((workInProgress.effectTag&DidCapture)===NoEffect){// This boundary did not suspend so it's now hydrated.\n// To handle any future suspense cases, we're going to now upgrade it\n// to a Suspense component. We detach it from the existing current fiber.\ncurrent.alternate=null;workInProgress.alternate=null;workInProgress.tag=SuspenseComponent;workInProgress.memoizedState=null;workInProgress.stateNode=null;}}break;}case SuspenseListComponent:{popSuspenseContext(workInProgress);var renderState=workInProgress.memoizedState;if(renderState===null){// We're running in the default, \"independent\" mode. We don't do anything\n// in this mode.\nbreak;}var didSuspendAlready=(workInProgress.effectTag&DidCapture)!==NoEffect;var renderedTail=renderState.rendering;if(renderedTail===null){// We just rendered the head.\nif(!didSuspendAlready){// This is the first pass. We need to figure out if anything is still\n// suspended in the rendered set.\n// If new content unsuspended, but there's still some content that\n// didn't. Then we need to do a second pass that forces everything\n// to keep showing their fallbacks.\n// We might be suspended if something in this render pass suspended, or\n// something in the previous committed pass suspended. Otherwise,\n// there's no chance so we can skip the expensive call to\n// findFirstSuspended.\nvar cannotBeSuspended=renderHasNotSuspendedYet()&&(current===null||(current.effectTag&DidCapture)===NoEffect);if(!cannotBeSuspended){var row=workInProgress.child;while(row!==null){var suspended=findFirstSuspended(row);if(suspended!==null){didSuspendAlready=true;workInProgress.effectTag|=DidCapture;cutOffTailIfNeeded(renderState,false);// If this is a newly suspended tree, it might not get committed as\n// part of the second pass. In that case nothing will subscribe to\n// its thennables. Instead, we'll transfer its thennables to the\n// SuspenseList so that it can retry if they resolve.\n// There might be multiple of these in the list but since we're\n// going to wait for all of them anyway, it doesn't really matter\n// which ones gets to ping. In theory we could get clever and keep\n// track of how many dependencies remain but it gets tricky because\n// in the meantime, we can add/remove/change items and dependencies.\n// We might bail out of the loop before finding any but that\n// doesn't matter since that means that the other boundaries that\n// we did find already has their listeners attached.\nvar newThennables=suspended.updateQueue;if(newThennables!==null){workInProgress.updateQueue=newThennables;workInProgress.effectTag|=Update;}// Rerender the whole list, but this time, we'll force fallbacks\n// to stay in place.\n// Reset the effect list before doing the second pass since that's now invalid.\nworkInProgress.firstEffect=workInProgress.lastEffect=null;// Reset the child fibers to their original state.\nresetChildFibers(workInProgress,renderExpirationTime);// Set up the Suspense Context to force suspense and immediately\n// rerender the children.\npushSuspenseContext(workInProgress,setShallowSuspenseContext(suspenseStackCursor.current,ForceSuspenseFallback));return workInProgress.child;}row=row.sibling;}}}else{cutOffTailIfNeeded(renderState,false);}// Next we're going to render the tail.\n}else{// Append the rendered row to the child list.\nif(!didSuspendAlready){var _suspended=findFirstSuspended(renderedTail);if(_suspended!==null){workInProgress.effectTag|=DidCapture;didSuspendAlready=true;cutOffTailIfNeeded(renderState,true);// This might have been modified.\nif(renderState.tail===null&&renderState.tailMode==='hidden'){// We need to delete the row we just rendered.\n// Ensure we transfer the update queue to the parent.\nvar _newThennables=_suspended.updateQueue;if(_newThennables!==null){workInProgress.updateQueue=_newThennables;workInProgress.effectTag|=Update;}// Reset the effect list to what it w as before we rendered this\n// child. The nested children have already appended themselves.\nvar lastEffect=workInProgress.lastEffect=renderState.lastEffect;// Remove any effects that were appended after this point.\nif(lastEffect!==null){lastEffect.nextEffect=null;}// We're done.\nreturn null;}}else if(now$1()>renderState.tailExpiration&&renderExpirationTime>Never){// We have now passed our CPU deadline and we'll just give up further\n// attempts to render the main content and only render fallbacks.\n// The assumption is that this is usually faster.\nworkInProgress.effectTag|=DidCapture;didSuspendAlready=true;cutOffTailIfNeeded(renderState,false);// Since nothing actually suspended, there will nothing to ping this\n// to get it started back up to attempt the next item. If we can show\n// them, then they really have the same priority as this render.\n// So we'll pick it back up the very next render pass once we've had\n// an opportunity to yield for paint.\nvar nextPriority=renderExpirationTime-1;workInProgress.expirationTime=workInProgress.childExpirationTime=nextPriority;if(enableSchedulerTracing){markSpawnedWork(nextPriority);}}}if(renderState.isBackwards){// The effect list of the backwards tail will have been added\n// to the end. This breaks the guarantee that life-cycles fire in\n// sibling order but that isn't a strong guarantee promised by React.\n// Especially since these might also just pop in during future commits.\n// Append to the beginning of the list.\nrenderedTail.sibling=workInProgress.child;workInProgress.child=renderedTail;}else{var previousSibling=renderState.last;if(previousSibling!==null){previousSibling.sibling=renderedTail;}else{workInProgress.child=renderedTail;}renderState.last=renderedTail;}}if(renderState.tail!==null){// We still have tail rows to render.\nif(renderState.tailExpiration===0){// Heuristic for how long we're willing to spend rendering rows\n// until we just give up and show what we have so far.\nvar TAIL_EXPIRATION_TIMEOUT_MS=500;renderState.tailExpiration=now$1()+TAIL_EXPIRATION_TIMEOUT_MS;}// Pop a row.\nvar next=renderState.tail;renderState.rendering=next;renderState.tail=next.sibling;renderState.lastEffect=workInProgress.lastEffect;next.sibling=null;// Restore the context.\n// TODO: We can probably just avoid popping it instead and only\n// setting it the first time we go from not suspended to suspended.\nvar suspenseContext=suspenseStackCursor.current;if(didSuspendAlready){suspenseContext=setShallowSuspenseContext(suspenseContext,ForceSuspenseFallback);}else{suspenseContext=setDefaultShallowSuspenseContext(suspenseContext);}pushSuspenseContext(workInProgress,suspenseContext);// Do a pass over the next row.\nreturn next;}break;}case FundamentalComponent:{if(enableFundamentalAPI){var fundamentalImpl=workInProgress.type.impl;var fundamentalInstance=workInProgress.stateNode;if(fundamentalInstance===null){var getInitialState=fundamentalImpl.getInitialState;var fundamentalState=void 0;if(getInitialState!==undefined){fundamentalState=getInitialState(newProps);}fundamentalInstance=workInProgress.stateNode=createFundamentalStateInstance(workInProgress,newProps,fundamentalImpl,fundamentalState||{});var _instance6=getFundamentalComponentInstance(fundamentalInstance);fundamentalInstance.instance=_instance6;if(fundamentalImpl.reconcileChildren===false){return null;}_appendAllChildren(_instance6,workInProgress,false,false);mountFundamentalComponent(fundamentalInstance);}else{// We fire update in commit phase\nvar prevProps=fundamentalInstance.props;fundamentalInstance.prevProps=prevProps;fundamentalInstance.props=newProps;fundamentalInstance.currentFiber=workInProgress;if(supportsPersistence){var _instance7=cloneFundamentalInstance(fundamentalInstance);fundamentalInstance.instance=_instance7;_appendAllChildren(_instance7,workInProgress,false,false);}var shouldUpdate=shouldUpdateFundamentalComponent(fundamentalInstance);if(shouldUpdate){markUpdate(workInProgress);}}}break;}default:(function(){{{throw ReactError(Error('Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.'));}}})();}return null;}function mountEventResponder(responder,responderProps,instance,rootContainerInstance,fiber,respondersMap){var responderState=emptyObject;var getInitialState=responder.getInitialState;if(getInitialState!==null){responderState=getInitialState(responderProps);}var responderInstance=createResponderInstance(responder,responderProps,responderState,instance,fiber);mountResponderInstance(responder,responderInstance,responderProps,responderState,instance,rootContainerInstance);respondersMap.set(responder,responderInstance);}function updateEventListener(listener,fiber,visistedResponders,respondersMap,instance,rootContainerInstance){var responder=void 0;var props=void 0;if(listener){responder=listener.responder;props=listener.props;}(function(){if(!(responder&&responder.$$typeof===REACT_RESPONDER_TYPE)){{throw ReactError(Error('An invalid value was used as an event listener. Expect one or many event listeners created via React.unstable_useResponer().'));}}})();var listenerProps=props;if(visistedResponders.has(responder)){// show warning\n{warning$1(false,'Duplicate event responder \"%s\" found in event listeners. '+'Event listeners passed to elements cannot use the same event responder more than once.',responder.displayName);}return;}visistedResponders.add(responder);var responderInstance=respondersMap.get(responder);if(responderInstance===undefined){// Mount\nmountEventResponder(responder,listenerProps,instance,rootContainerInstance,fiber,respondersMap);}else{// Update\nresponderInstance.props=listenerProps;responderInstance.fiber=fiber;}}function updateEventListeners(listeners,instance,rootContainerInstance,fiber){var visistedResponders=new Set();var dependencies=fiber.dependencies;if(listeners!=null){if(dependencies===null){dependencies=fiber.dependencies={expirationTime:NoWork,firstContext:null,responders:new Map()};}var respondersMap=dependencies.responders;if(respondersMap===null){respondersMap=new Map();}if(isArray$2(listeners)){for(var i=0,length=listeners.length;i<length;i++){var listener=listeners[i];updateEventListener(listener,fiber,visistedResponders,respondersMap,instance,rootContainerInstance);}}else{updateEventListener(listeners,fiber,visistedResponders,respondersMap,instance,rootContainerInstance);}}if(dependencies!==null){var _respondersMap=dependencies.responders;if(_respondersMap!==null){// Unmount\nvar mountedResponders=Array.from(_respondersMap.keys());for(var _i=0,_length=mountedResponders.length;_i<_length;_i++){var mountedResponder=mountedResponders[_i];if(!visistedResponders.has(mountedResponder)){var responderInstance=_respondersMap.get(mountedResponder);unmountResponderInstance(responderInstance);_respondersMap.delete(mountedResponder);}}}}}function unwindWork(workInProgress,renderExpirationTime){switch(workInProgress.tag){case ClassComponent:{var Component=workInProgress.type;if(isContextProvider(Component)){popContext(workInProgress);}var effectTag=workInProgress.effectTag;if(effectTag&ShouldCapture){workInProgress.effectTag=effectTag&~ShouldCapture|DidCapture;return workInProgress;}return null;}case HostRoot:{popHostContainer(workInProgress);popTopLevelContextObject(workInProgress);var _effectTag=workInProgress.effectTag;(function(){if(!((_effectTag&DidCapture)===NoEffect)){{throw ReactError(Error('The root failed to unmount after an error. This is likely a bug in React. Please file an issue.'));}}})();workInProgress.effectTag=_effectTag&~ShouldCapture|DidCapture;return workInProgress;}case HostComponent:{// TODO: popHydrationState\npopHostContext(workInProgress);return null;}case SuspenseComponent:{popSuspenseContext(workInProgress);var _effectTag2=workInProgress.effectTag;if(_effectTag2&ShouldCapture){workInProgress.effectTag=_effectTag2&~ShouldCapture|DidCapture;// Captured a suspense effect. Re-render the boundary.\nreturn workInProgress;}return null;}case DehydratedSuspenseComponent:{if(enableSuspenseServerRenderer){// TODO: popHydrationState\npopSuspenseContext(workInProgress);var _effectTag3=workInProgress.effectTag;if(_effectTag3&ShouldCapture){workInProgress.effectTag=_effectTag3&~ShouldCapture|DidCapture;// Captured a suspense effect. Re-render the boundary.\nreturn workInProgress;}}return null;}case SuspenseListComponent:{popSuspenseContext(workInProgress);// SuspenseList doesn't actually catch anything. It should've been\n// caught by a nested boundary. If not, it should bubble through.\nreturn null;}case HostPortal:popHostContainer(workInProgress);return null;case ContextProvider:popProvider(workInProgress);return null;default:return null;}}function unwindInterruptedWork(interruptedWork){switch(interruptedWork.tag){case ClassComponent:{var childContextTypes=interruptedWork.type.childContextTypes;if(childContextTypes!==null&&childContextTypes!==undefined){popContext(interruptedWork);}break;}case HostRoot:{popHostContainer(interruptedWork);popTopLevelContextObject(interruptedWork);break;}case HostComponent:{popHostContext(interruptedWork);break;}case HostPortal:popHostContainer(interruptedWork);break;case SuspenseComponent:popSuspenseContext(interruptedWork);break;case DehydratedSuspenseComponent:if(enableSuspenseServerRenderer){// TODO: popHydrationState\npopSuspenseContext(interruptedWork);}break;case SuspenseListComponent:popSuspenseContext(interruptedWork);break;case ContextProvider:popProvider(interruptedWork);break;default:break;}}function createCapturedValue(value,source){// If the value is an error, call this function immediately after it is thrown\n// so the stack is accurate.\nreturn{value:value,source:source,stack:getStackByFiberInDevAndProd(source)};}var invokeGuardedCallbackImpl=function invokeGuardedCallbackImpl(name,func,context,a,b,c,d,e,f){var funcArgs=Array.prototype.slice.call(arguments,3);try{func.apply(context,funcArgs);}catch(error){this.onError(error);}};{// In DEV mode, we swap out invokeGuardedCallback for a special version\n// that plays more nicely with the browser's DevTools. The idea is to preserve\n// \"Pause on exceptions\" behavior. Because React wraps all user-provided\n// functions in invokeGuardedCallback, and the production version of\n// invokeGuardedCallback uses a try-catch, all user exceptions are treated\n// like caught exceptions, and the DevTools won't pause unless the developer\n// takes the extra step of enabling pause on caught exceptions. This is\n// unintuitive, though, because even though React has caught the error, from\n// the developer's perspective, the error is uncaught.\n//\n// To preserve the expected \"Pause on exceptions\" behavior, we don't use a\n// try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake\n// DOM node, and call the user-provided callback from inside an event handler\n// for that fake event. If the callback throws, the error is \"captured\" using\n// a global event handler. But because the error happens in a different\n// event loop context, it does not interrupt the normal program flow.\n// Effectively, this gives us try-catch behavior without actually using\n// try-catch. Neat!\n// Check that the browser supports the APIs we need to implement our special\n// DEV version of invokeGuardedCallback\nif(typeof window!=='undefined'&&typeof window.dispatchEvent==='function'&&typeof document!=='undefined'&&typeof document.createEvent==='function'){var fakeNode=document.createElement('react');var invokeGuardedCallbackDev=function invokeGuardedCallbackDev(name,func,context,a,b,c,d,e,f){// If document doesn't exist we know for sure we will crash in this method\n// when we call document.createEvent(). However this can cause confusing\n// errors: https://github.com/facebookincubator/create-react-app/issues/3482\n// So we preemptively throw with a better message instead.\n(function(){if(!(typeof document!=='undefined')){{throw ReactError(Error('The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.'));}}})();var evt=document.createEvent('Event');// Keeps track of whether the user-provided callback threw an error. We\n// set this to true at the beginning, then set it to false right after\n// calling the function. If the function errors, `didError` will never be\n// set to false. This strategy works even if the browser is flaky and\n// fails to call our global error handler, because it doesn't rely on\n// the error event at all.\nvar didError=true;// Keeps track of the value of window.event so that we can reset it\n// during the callback to let user code access window.event in the\n// browsers that support it.\nvar windowEvent=window.event;// Keeps track of the descriptor of window.event to restore it after event\n// dispatching: https://github.com/facebook/react/issues/13688\nvar windowEventDescriptor=Object.getOwnPropertyDescriptor(window,'event');// Create an event handler for our fake event. We will synchronously\n// dispatch our fake event using `dispatchEvent`. Inside the handler, we\n// call the user-provided callback.\nvar funcArgs=Array.prototype.slice.call(arguments,3);function callCallback(){// We immediately remove the callback from event listeners so that\n// nested `invokeGuardedCallback` calls do not clash. Otherwise, a\n// nested call would trigger the fake event handlers of any call higher\n// in the stack.\nfakeNode.removeEventListener(evtType,callCallback,false);// We check for window.hasOwnProperty('event') to prevent the\n// window.event assignment in both IE <= 10 as they throw an error\n// \"Member not found\" in strict mode, and in Firefox which does not\n// support window.event.\nif(typeof window.event!=='undefined'&&window.hasOwnProperty('event')){window.event=windowEvent;}func.apply(context,funcArgs);didError=false;}// Create a global error event handler. We use this to capture the value\n// that was thrown. It's possible that this error handler will fire more\n// than once; for example, if non-React code also calls `dispatchEvent`\n// and a handler for that event throws. We should be resilient to most of\n// those cases. Even if our error event handler fires more than once, the\n// last error event is always used. If the callback actually does error,\n// we know that the last error event is the correct one, because it's not\n// possible for anything else to have happened in between our callback\n// erroring and the code that follows the `dispatchEvent` call below. If\n// the callback doesn't error, but the error event was fired, we know to\n// ignore it because `didError` will be false, as described above.\nvar error=void 0;// Use this to track whether the error event is ever called.\nvar didSetError=false;var isCrossOriginError=false;function handleWindowError(event){error=event.error;didSetError=true;if(error===null&&event.colno===0&&event.lineno===0){isCrossOriginError=true;}if(event.defaultPrevented){// Some other error handler has prevented default.\n// Browsers silence the error report if this happens.\n// We'll remember this to later decide whether to log it or not.\nif(error!=null&&typeof error==='object'){try{error._suppressLogging=true;}catch(inner){// Ignore.\n}}}}// Create a fake event type.\nvar evtType='react-'+(name?name:'invokeguardedcallback');// Attach our event handlers\nwindow.addEventListener('error',handleWindowError);fakeNode.addEventListener(evtType,callCallback,false);// Synchronously dispatch our fake event. If the user-provided function\n// errors, it will trigger our global error handler.\nevt.initEvent(evtType,false,false);fakeNode.dispatchEvent(evt);if(windowEventDescriptor){Object.defineProperty(window,'event',windowEventDescriptor);}if(didError){if(!didSetError){// The callback errored, but the error event never fired.\nerror=new Error('An error was thrown inside one of your components, but React '+\"doesn't know what it was. This is likely due to browser \"+'flakiness. React does its best to preserve the \"Pause on '+'exceptions\" behavior of the DevTools, which requires some '+\"DEV-mode only tricks. It's possible that these don't work in \"+'your browser. Try triggering the error in production mode, '+'or switching to a modern browser. If you suspect that this is '+'actually an issue with React, please file an issue.');}else if(isCrossOriginError){error=new Error(\"A cross-origin error was thrown. React doesn't have access to \"+'the actual error object in development. '+'See https://fb.me/react-crossorigin-error for more information.');}this.onError(error);}// Remove our event listeners\nwindow.removeEventListener('error',handleWindowError);};invokeGuardedCallbackImpl=invokeGuardedCallbackDev;}}var invokeGuardedCallbackImpl$1=invokeGuardedCallbackImpl;// Used by Fiber to simulate a try-catch.\nvar hasError=false;var caughtError=null;var reporter={onError:function onError(error){hasError=true;caughtError=error;}};/**\n * Call a function while guarding against errors that happens within it.\n * Returns an error if it throws, otherwise null.\n *\n * In production, this is implemented using a try-catch. The reason we don't\n * use a try-catch directly is so that we can swap out a different\n * implementation in DEV mode.\n *\n * @param {String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} context The context to use when calling the function\n * @param {...*} args Arguments for function\n */function invokeGuardedCallback(name,func,context,a,b,c,d,e,f){hasError=false;caughtError=null;invokeGuardedCallbackImpl$1.apply(reporter,arguments);}/**\n * Same as invokeGuardedCallback, but instead of returning an error, it stores\n * it in a global so it can be rethrown by `rethrowCaughtError` later.\n * TODO: See if caughtError and rethrowError can be unified.\n *\n * @param {String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} context The context to use when calling the function\n * @param {...*} args Arguments for function\n */ /**\n * During execution of guarded functions we will capture the first error which\n * we will rethrow to be handled by the top level error handler.\n */function hasCaughtError(){return hasError;}function clearCaughtError(){if(hasError){var error=caughtError;hasError=false;caughtError=null;return error;}else{(function(){{{throw ReactError(Error('clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.'));}}})();}}// This module is forked in different environments.\n// By default, return `true` to log errors to the console.\n// Forks can return `false` if this isn't desirable.\nfunction showErrorDialog(capturedError){return true;}function logCapturedError(capturedError){var logError=showErrorDialog(capturedError);// Allow injected showErrorDialog() to prevent default console.error logging.\n// This enables renderers like ReactNative to better manage redbox behavior.\nif(logError===false){return;}var error=capturedError.error;{var componentName=capturedError.componentName,componentStack=capturedError.componentStack,errorBoundaryName=capturedError.errorBoundaryName,errorBoundaryFound=capturedError.errorBoundaryFound,willRetry=capturedError.willRetry;// Browsers support silencing uncaught errors by calling\n// `preventDefault()` in window `error` handler.\n// We record this information as an expando on the error.\nif(error!=null&&error._suppressLogging){if(errorBoundaryFound&&willRetry){// The error is recoverable and was silenced.\n// Ignore it and don't print the stack addendum.\n// This is handy for testing error boundaries without noise.\nreturn;}// The error is fatal. Since the silencing might have\n// been accidental, we'll surface it anyway.\n// However, the browser would have silenced the original error\n// so we'll print it first, and then print the stack addendum.\nconsole.error(error);// For a more detailed description of this block, see:\n// https://github.com/facebook/react/pull/13384\n}var componentNameMessage=componentName?'The above error occurred in the <'+componentName+'> component:':'The above error occurred in one of your React components:';var errorBoundaryMessage=void 0;// errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.\nif(errorBoundaryFound&&errorBoundaryName){if(willRetry){errorBoundaryMessage='React will try to recreate this component tree from scratch '+('using the error boundary you provided, '+errorBoundaryName+'.');}else{errorBoundaryMessage='This error was initially handled by the error boundary '+errorBoundaryName+'.\\n'+'Recreating the tree from scratch failed so React will unmount the tree.';}}else{errorBoundaryMessage='Consider adding an error boundary to your tree to customize error handling behavior.\\n'+'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';}var combinedMessage=''+componentNameMessage+componentStack+'\\n\\n'+(''+errorBoundaryMessage);// In development, we provide our own message with just the component stack.\n// We don't include the original error message and JS stack because the browser\n// has already printed it. Even if the application swallows the error, it is still\n// displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\nconsole.error(combinedMessage);}}var didWarnAboutUndefinedSnapshotBeforeUpdate=null;{didWarnAboutUndefinedSnapshotBeforeUpdate=new Set();}var PossiblyWeakSet$1=typeof WeakSet==='function'?WeakSet:Set;function logError(boundary,errorInfo){var source=errorInfo.source;var stack=errorInfo.stack;if(stack===null&&source!==null){stack=getStackByFiberInDevAndProd(source);}var capturedError={componentName:source!==null?getComponentName(source.type):null,componentStack:stack!==null?stack:'',error:errorInfo.value,errorBoundary:null,errorBoundaryName:null,errorBoundaryFound:false,willRetry:false};if(boundary!==null&&boundary.tag===ClassComponent){capturedError.errorBoundary=boundary.stateNode;capturedError.errorBoundaryName=getComponentName(boundary.type);capturedError.errorBoundaryFound=true;capturedError.willRetry=true;}try{logCapturedError(capturedError);}catch(e){// This method must not throw, or React internal state will get messed up.\n// If console.error is overridden, or logCapturedError() shows a dialog that throws,\n// we want to report this error outside of the normal stack as a last resort.\n// https://github.com/facebook/react/issues/13188\nsetTimeout(function(){throw e;});}}var callComponentWillUnmountWithTimer=function callComponentWillUnmountWithTimer(current$$1,instance){startPhaseTimer(current$$1,'componentWillUnmount');instance.props=current$$1.memoizedProps;instance.state=current$$1.memoizedState;instance.componentWillUnmount();stopPhaseTimer();};// Capture errors so they don't interrupt unmounting.\nfunction safelyCallComponentWillUnmount(current$$1,instance){{invokeGuardedCallback(null,callComponentWillUnmountWithTimer,null,current$$1,instance);if(hasCaughtError()){var unmountError=clearCaughtError();captureCommitPhaseError(current$$1,unmountError);}}}function safelyDetachRef(current$$1){var ref=current$$1.ref;if(ref!==null){if(typeof ref==='function'){{invokeGuardedCallback(null,ref,null,null);if(hasCaughtError()){var refError=clearCaughtError();captureCommitPhaseError(current$$1,refError);}}}else{ref.current=null;}}}function safelyCallDestroy(current$$1,destroy){{invokeGuardedCallback(null,destroy,null);if(hasCaughtError()){var error=clearCaughtError();captureCommitPhaseError(current$$1,error);}}}function commitBeforeMutationLifeCycles(current$$1,finishedWork){switch(finishedWork.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{commitHookEffectList(UnmountSnapshot,NoEffect$1,finishedWork);return;}case ClassComponent:{if(finishedWork.effectTag&Snapshot){if(current$$1!==null){var prevProps=current$$1.memoizedProps;var prevState=current$$1.memoizedState;startPhaseTimer(finishedWork,'getSnapshotBeforeUpdate');var instance=finishedWork.stateNode;// We could update instance props and state here,\n// but instead we rely on them being set during last render.\n// TODO: revisit this when we implement resuming.\n{if(finishedWork.type===finishedWork.elementType&&!didWarnAboutReassigningProps){!(instance.props===finishedWork.memoizedProps)?warning$1(false,'Expected %s props to match memoized props before '+'getSnapshotBeforeUpdate. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.props`. '+'Please file an issue.',getComponentName(finishedWork.type)||'instance'):void 0;!(instance.state===finishedWork.memoizedState)?warning$1(false,'Expected %s state to match memoized state before '+'getSnapshotBeforeUpdate. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.props`. '+'Please file an issue.',getComponentName(finishedWork.type)||'instance'):void 0;}}var snapshot=instance.getSnapshotBeforeUpdate(finishedWork.elementType===finishedWork.type?prevProps:resolveDefaultProps(finishedWork.type,prevProps),prevState);{var didWarnSet=didWarnAboutUndefinedSnapshotBeforeUpdate;if(snapshot===undefined&&!didWarnSet.has(finishedWork.type)){didWarnSet.add(finishedWork.type);warningWithoutStack$1(false,'%s.getSnapshotBeforeUpdate(): A snapshot value (or null) '+'must be returned. You have returned undefined.',getComponentName(finishedWork.type));}}instance.__reactInternalSnapshotBeforeUpdate=snapshot;stopPhaseTimer();}}return;}case HostRoot:case HostComponent:case HostText:case HostPortal:case IncompleteClassComponent:// Nothing to do for these component types\nreturn;default:{(function(){{{throw ReactError(Error('This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.'));}}})();}}}function commitHookEffectList(unmountTag,mountTag,finishedWork){var updateQueue=finishedWork.updateQueue;var lastEffect=updateQueue!==null?updateQueue.lastEffect:null;if(lastEffect!==null){var firstEffect=lastEffect.next;var effect=firstEffect;do{if((effect.tag&unmountTag)!==NoEffect$1){// Unmount\nvar destroy=effect.destroy;effect.destroy=undefined;if(destroy!==undefined){destroy();}}if((effect.tag&mountTag)!==NoEffect$1){// Mount\nvar create=effect.create;effect.destroy=create();{var _destroy=effect.destroy;if(_destroy!==undefined&&typeof _destroy!=='function'){var addendum=void 0;if(_destroy===null){addendum=' You returned null. If your effect does not require clean '+'up, return undefined (or nothing).';}else if(typeof _destroy.then==='function'){addendum='\\n\\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. '+'Instead, write the async function inside your effect '+'and call it immediately:\\n\\n'+'useEffect(() => {\\n'+'  async function fetchData() {\\n'+'    // You can await here\\n'+'    const response = await MyAPI.getData(someId);\\n'+'    // ...\\n'+'  }\\n'+'  fetchData();\\n'+'}, [someId]); // Or [] if effect doesn\\'t need props or state\\n\\n'+'Learn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching';}else{addendum=' You returned: '+_destroy;}warningWithoutStack$1(false,'An effect function must not return anything besides a function, '+'which is used for clean-up.%s%s',addendum,getStackByFiberInDevAndProd(finishedWork));}}}effect=effect.next;}while(effect!==firstEffect);}}function commitPassiveHookEffects(finishedWork){if((finishedWork.effectTag&Passive)!==NoEffect){switch(finishedWork.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{commitHookEffectList(UnmountPassive,NoEffect$1,finishedWork);commitHookEffectList(NoEffect$1,MountPassive,finishedWork);break;}default:break;}}}function commitLifeCycles(finishedRoot,current$$1,finishedWork,committedExpirationTime){switch(finishedWork.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{commitHookEffectList(UnmountLayout,MountLayout,finishedWork);break;}case ClassComponent:{var instance=finishedWork.stateNode;if(finishedWork.effectTag&Update){if(current$$1===null){startPhaseTimer(finishedWork,'componentDidMount');// We could update instance props and state here,\n// but instead we rely on them being set during last render.\n// TODO: revisit this when we implement resuming.\n{if(finishedWork.type===finishedWork.elementType&&!didWarnAboutReassigningProps){!(instance.props===finishedWork.memoizedProps)?warning$1(false,'Expected %s props to match memoized props before '+'componentDidMount. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.props`. '+'Please file an issue.',getComponentName(finishedWork.type)||'instance'):void 0;!(instance.state===finishedWork.memoizedState)?warning$1(false,'Expected %s state to match memoized state before '+'componentDidMount. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.props`. '+'Please file an issue.',getComponentName(finishedWork.type)||'instance'):void 0;}}instance.componentDidMount();stopPhaseTimer();}else{var prevProps=finishedWork.elementType===finishedWork.type?current$$1.memoizedProps:resolveDefaultProps(finishedWork.type,current$$1.memoizedProps);var prevState=current$$1.memoizedState;startPhaseTimer(finishedWork,'componentDidUpdate');// We could update instance props and state here,\n// but instead we rely on them being set during last render.\n// TODO: revisit this when we implement resuming.\n{if(finishedWork.type===finishedWork.elementType&&!didWarnAboutReassigningProps){!(instance.props===finishedWork.memoizedProps)?warning$1(false,'Expected %s props to match memoized props before '+'componentDidUpdate. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.props`. '+'Please file an issue.',getComponentName(finishedWork.type)||'instance'):void 0;!(instance.state===finishedWork.memoizedState)?warning$1(false,'Expected %s state to match memoized state before '+'componentDidUpdate. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.props`. '+'Please file an issue.',getComponentName(finishedWork.type)||'instance'):void 0;}}instance.componentDidUpdate(prevProps,prevState,instance.__reactInternalSnapshotBeforeUpdate);stopPhaseTimer();}}var updateQueue=finishedWork.updateQueue;if(updateQueue!==null){{if(finishedWork.type===finishedWork.elementType&&!didWarnAboutReassigningProps){!(instance.props===finishedWork.memoizedProps)?warning$1(false,'Expected %s props to match memoized props before '+'processing the update queue. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.props`. '+'Please file an issue.',getComponentName(finishedWork.type)||'instance'):void 0;!(instance.state===finishedWork.memoizedState)?warning$1(false,'Expected %s state to match memoized state before '+'processing the update queue. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.props`. '+'Please file an issue.',getComponentName(finishedWork.type)||'instance'):void 0;}}// We could update instance props and state here,\n// but instead we rely on them being set during last render.\n// TODO: revisit this when we implement resuming.\ncommitUpdateQueue(finishedWork,updateQueue,instance,committedExpirationTime);}return;}case HostRoot:{var _updateQueue=finishedWork.updateQueue;if(_updateQueue!==null){var _instance=null;if(finishedWork.child!==null){switch(finishedWork.child.tag){case HostComponent:_instance=getPublicInstance(finishedWork.child.stateNode);break;case ClassComponent:_instance=finishedWork.child.stateNode;break;}}commitUpdateQueue(finishedWork,_updateQueue,_instance,committedExpirationTime);}return;}case HostComponent:{var _instance2=finishedWork.stateNode;// Renderers may schedule work to be done after host components are mounted\n// (eg DOM renderer may schedule auto-focus for inputs and form controls).\n// These effects should only be committed when components are first mounted,\n// aka when there is no current/alternate.\nif(current$$1===null&&finishedWork.effectTag&Update){var type=finishedWork.type;var props=finishedWork.memoizedProps;commitMount(_instance2,type,props,finishedWork);}return;}case HostText:{// We have no life-cycles associated with text.\nreturn;}case HostPortal:{// We have no life-cycles associated with portals.\nreturn;}case Profiler:{if(enableProfilerTimer){var onRender=finishedWork.memoizedProps.onRender;if(typeof onRender==='function'){if(enableSchedulerTracing){onRender(finishedWork.memoizedProps.id,current$$1===null?'mount':'update',finishedWork.actualDuration,finishedWork.treeBaseDuration,finishedWork.actualStartTime,getCommitTime(),finishedRoot.memoizedInteractions);}else{onRender(finishedWork.memoizedProps.id,current$$1===null?'mount':'update',finishedWork.actualDuration,finishedWork.treeBaseDuration,finishedWork.actualStartTime,getCommitTime());}}}return;}case SuspenseComponent:case SuspenseListComponent:case IncompleteClassComponent:case FundamentalComponent:return;default:{(function(){{{throw ReactError(Error('This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.'));}}})();}}}function hideOrUnhideAllChildren(finishedWork,isHidden){if(supportsMutation){// We only have the top Fiber that was inserted but we need to recurse down its\nvar node=finishedWork;while(true){if(node.tag===HostComponent){var instance=node.stateNode;if(isHidden){hideInstance(instance);}else{unhideInstance(node.stateNode,node.memoizedProps);}}else if(node.tag===HostText){var _instance3=node.stateNode;if(isHidden){hideTextInstance(_instance3);}else{unhideTextInstance(_instance3,node.memoizedProps);}}else if(node.tag===SuspenseComponent&&node.memoizedState!==null){// Found a nested Suspense component that timed out. Skip over the\nvar fallbackChildFragment=node.child.sibling;fallbackChildFragment.return=node;node=fallbackChildFragment;continue;}else if(node.child!==null){node.child.return=node;node=node.child;continue;}if(node===finishedWork){return;}while(node.sibling===null){if(node.return===null||node.return===finishedWork){return;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}}}function commitAttachRef(finishedWork){var ref=finishedWork.ref;if(ref!==null){var instance=finishedWork.stateNode;var instanceToUse=void 0;switch(finishedWork.tag){case HostComponent:instanceToUse=getPublicInstance(instance);break;default:instanceToUse=instance;}if(typeof ref==='function'){ref(instanceToUse);}else{{if(!ref.hasOwnProperty('current')){warningWithoutStack$1(false,'Unexpected ref object provided for %s. '+'Use either a ref-setter function or React.createRef().%s',getComponentName(finishedWork.type),getStackByFiberInDevAndProd(finishedWork));}}ref.current=instanceToUse;}}}function commitDetachRef(current$$1){var currentRef=current$$1.ref;if(currentRef!==null){if(typeof currentRef==='function'){currentRef(null);}else{currentRef.current=null;}}}// User-originating errors (lifecycles and refs) should not interrupt\n// deletion, so don't let them throw. Host-originating errors should\n// interrupt deletion, so it's okay\nfunction commitUnmount(current$$1,renderPriorityLevel){onCommitUnmount(current$$1);switch(current$$1.tag){case FunctionComponent:case ForwardRef:case MemoComponent:case SimpleMemoComponent:{var updateQueue=current$$1.updateQueue;if(updateQueue!==null){var lastEffect=updateQueue.lastEffect;if(lastEffect!==null){var firstEffect=lastEffect.next;// When the owner fiber is deleted, the destroy function of a passive\n// effect hook is called during the synchronous commit phase. This is\n// a concession to implementation complexity. Calling it in the\n// passive effect phase (like they usually are, when dependencies\n// change during an update) would require either traversing the\n// children of the deleted fiber again, or including unmount effects\n// as part of the fiber effect list.\n//\n// Because this is during the sync commit phase, we need to change\n// the priority.\n//\n// TODO: Reconsider this implementation trade off.\nvar priorityLevel=renderPriorityLevel>NormalPriority?NormalPriority:renderPriorityLevel;runWithPriority(priorityLevel,function(){var effect=firstEffect;do{var destroy=effect.destroy;if(destroy!==undefined){safelyCallDestroy(current$$1,destroy);}effect=effect.next;}while(effect!==firstEffect);});}}break;}case ClassComponent:{safelyDetachRef(current$$1);var instance=current$$1.stateNode;if(typeof instance.componentWillUnmount==='function'){safelyCallComponentWillUnmount(current$$1,instance);}return;}case HostComponent:{if(enableFlareAPI){var dependencies=current$$1.dependencies;if(dependencies!==null){var respondersMap=dependencies.responders;if(respondersMap!==null){var responderInstances=Array.from(respondersMap.values());for(var i=0,length=responderInstances.length;i<length;i++){var responderInstance=responderInstances[i];unmountResponderInstance(responderInstance);}dependencies.responders=null;}}}safelyDetachRef(current$$1);return;}case HostPortal:{// TODO: this is recursive.\n// We are also not using this parent because\n// the portal will get pushed immediately.\nif(supportsMutation){unmountHostComponents(current$$1,renderPriorityLevel);}else if(supportsPersistence){emptyPortalContainer(current$$1);}return;}case FundamentalComponent:{if(enableFundamentalAPI){var fundamentalInstance=current$$1.stateNode;if(fundamentalInstance!==null){unmountFundamentalComponent(fundamentalInstance);current$$1.stateNode=null;}}}}}function commitNestedUnmounts(root,renderPriorityLevel){// While we're inside a removed host node we don't want to call\n// removeChild on the inner nodes because they're removed by the top\n// call anyway. We also want to call componentWillUnmount on all\n// composites before this host node is removed from the tree. Therefore\nvar node=root;while(true){commitUnmount(node,renderPriorityLevel);// Visit children because they may contain more composite or host nodes.\n// Skip portals because commitUnmount() currently visits them recursively.\nif(node.child!==null&&(// If we use mutation we drill down into portals using commitUnmount above.\n// If we don't use mutation we drill down into portals here instead.\n!supportsMutation||node.tag!==HostPortal)){node.child.return=node;node=node.child;continue;}if(node===root){return;}while(node.sibling===null){if(node.return===null||node.return===root){return;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}}function detachFiber(current$$1){// Cut off the return pointers to disconnect it from the tree. Ideally, we\n// should clear the child pointer of the parent alternate to let this\n// get GC:ed but we don't know which for sure which parent is the current\n// one so we'll settle for GC:ing the subtree of this child. This child\n// itself will be GC:ed when the parent updates the next time.\ncurrent$$1.return=null;current$$1.child=null;current$$1.memoizedState=null;current$$1.updateQueue=null;current$$1.dependencies=null;var alternate=current$$1.alternate;if(alternate!==null){alternate.return=null;alternate.child=null;alternate.memoizedState=null;alternate.updateQueue=null;alternate.dependencies=null;}}function emptyPortalContainer(current$$1){if(!supportsPersistence){return;}var portal=current$$1.stateNode;var containerInfo=portal.containerInfo;var emptyChildSet=createContainerChildSet(containerInfo);replaceContainerChildren(containerInfo,emptyChildSet);}function commitContainer(finishedWork){if(!supportsPersistence){return;}switch(finishedWork.tag){case ClassComponent:case HostComponent:case HostText:case FundamentalComponent:{return;}case HostRoot:case HostPortal:{var portalOrRoot=finishedWork.stateNode;var containerInfo=portalOrRoot.containerInfo,_pendingChildren=portalOrRoot.pendingChildren;replaceContainerChildren(containerInfo,_pendingChildren);return;}default:{(function(){{{throw ReactError(Error('This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.'));}}})();}}}function getHostParentFiber(fiber){var parent=fiber.return;while(parent!==null){if(isHostParent(parent)){return parent;}parent=parent.return;}(function(){{{throw ReactError(Error('Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.'));}}})();}function isHostParent(fiber){return fiber.tag===HostComponent||fiber.tag===HostRoot||fiber.tag===HostPortal;}function getHostSibling(fiber){// We're going to search forward into the tree until we find a sibling host\n// node. Unfortunately, if multiple insertions are done in a row we have to\n// search past them. This leads to exponential search for the next sibling.\nvar node=fiber;siblings:while(true){// If we didn't find anything, let's try the next sibling.\nwhile(node.sibling===null){if(node.return===null||isHostParent(node.return)){// If we pop out of the root or hit the parent the fiber we are the\n// last sibling.\nreturn null;}node=node.return;}node.sibling.return=node.return;node=node.sibling;while(node.tag!==HostComponent&&node.tag!==HostText&&node.tag!==DehydratedSuspenseComponent){// If it is not host node and, we might have a host node inside it.\n// Try to search down until we find one.\nif(node.effectTag&Placement){// If we don't have a child, try the siblings instead.\ncontinue siblings;}// If we don't have a child, try the siblings instead.\n// We also skip portals because they are not part of this host tree.\nif(node.child===null||node.tag===HostPortal){continue siblings;}else{node.child.return=node;node=node.child;}}// Check if this host node is stable or about to be placed.\nif(!(node.effectTag&Placement)){// Found it!\nreturn node.stateNode;}}}function commitPlacement(finishedWork){if(!supportsMutation){return;}// Recursively insert all host nodes into the parent.\nvar parentFiber=getHostParentFiber(finishedWork);// Note: these two variables *must* always be updated together.\nvar parent=void 0;var isContainer=void 0;var parentStateNode=parentFiber.stateNode;switch(parentFiber.tag){case HostComponent:parent=parentStateNode;isContainer=false;break;case HostRoot:parent=parentStateNode.containerInfo;isContainer=true;break;case HostPortal:parent=parentStateNode.containerInfo;isContainer=true;break;case FundamentalComponent:if(enableFundamentalAPI){parent=parentStateNode.instance;isContainer=false;}// eslint-disable-next-line-no-fallthrough\ndefault:(function(){{{throw ReactError(Error('Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.'));}}})();}if(parentFiber.effectTag&ContentReset){// Reset the text content of the parent before doing any insertions\nresetTextContent(parent);// Clear ContentReset from the effect tag\nparentFiber.effectTag&=~ContentReset;}var before=getHostSibling(finishedWork);// We only have the top Fiber that was inserted but we need to recurse down its\n// children to find all the terminal nodes.\nvar node=finishedWork;while(true){var isHost=node.tag===HostComponent||node.tag===HostText;if(isHost||node.tag===FundamentalComponent){var stateNode=isHost?node.stateNode:node.stateNode.instance;if(before){if(isContainer){insertInContainerBefore(parent,stateNode,before);}else{insertBefore(parent,stateNode,before);}}else{if(isContainer){appendChildToContainer(parent,stateNode);}else{appendChild(parent,stateNode);}}}else if(node.tag===HostPortal){// If the insertion itself is a portal, then we don't want to traverse\n// down its children. Instead, we'll get insertions from each child in\n// the portal directly.\n}else if(node.child!==null){node.child.return=node;node=node.child;continue;}if(node===finishedWork){return;}while(node.sibling===null){if(node.return===null||node.return===finishedWork){return;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}}function unmountHostComponents(current$$1,renderPriorityLevel){// We only have the top Fiber that was deleted but we need to recurse down its\nvar node=current$$1;// Each iteration, currentParent is populated with node's host parent if not\n// currentParentIsValid.\nvar currentParentIsValid=false;// Note: these two variables *must* always be updated together.\nvar currentParent=void 0;var currentParentIsContainer=void 0;while(true){if(!currentParentIsValid){var parent=node.return;findParent:while(true){(function(){if(!(parent!==null)){{throw ReactError(Error('Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.'));}}})();var parentStateNode=parent.stateNode;switch(parent.tag){case HostComponent:currentParent=parentStateNode;currentParentIsContainer=false;break findParent;case HostRoot:currentParent=parentStateNode.containerInfo;currentParentIsContainer=true;break findParent;case HostPortal:currentParent=parentStateNode.containerInfo;currentParentIsContainer=true;break findParent;case FundamentalComponent:if(enableFundamentalAPI){currentParent=parentStateNode.instance;currentParentIsContainer=false;}}parent=parent.return;}currentParentIsValid=true;}if(node.tag===HostComponent||node.tag===HostText){commitNestedUnmounts(node,renderPriorityLevel);// After all the children have unmounted, it is now safe to remove the\n// node from the tree.\nif(currentParentIsContainer){removeChildFromContainer(currentParent,node.stateNode);}else{removeChild(currentParent,node.stateNode);}// Don't visit children because we already visited them.\n}else if(node.tag===FundamentalComponent){var fundamentalNode=node.stateNode.instance;commitNestedUnmounts(node,renderPriorityLevel);// After all the children have unmounted, it is now safe to remove the\n// node from the tree.\nif(currentParentIsContainer){removeChildFromContainer(currentParent,fundamentalNode);}else{removeChild(currentParent,fundamentalNode);}}else if(enableSuspenseServerRenderer&&node.tag===DehydratedSuspenseComponent){// Delete the dehydrated suspense boundary and all of its content.\nif(currentParentIsContainer){clearSuspenseBoundaryFromContainer(currentParent,node.stateNode);}else{clearSuspenseBoundary(currentParent,node.stateNode);}}else if(node.tag===HostPortal){if(node.child!==null){// When we go into a portal, it becomes the parent to remove from.\n// We will reassign it back when we pop the portal on the way up.\ncurrentParent=node.stateNode.containerInfo;currentParentIsContainer=true;// Visit children because portals might contain host components.\nnode.child.return=node;node=node.child;continue;}}else{commitUnmount(node,renderPriorityLevel);// Visit children because we may find more host components below.\nif(node.child!==null){node.child.return=node;node=node.child;continue;}}if(node===current$$1){return;}while(node.sibling===null){if(node.return===null||node.return===current$$1){return;}node=node.return;if(node.tag===HostPortal){// When we go out of the portal, we need to restore the parent.\n// Since we don't keep a stack of them, we will search for it.\ncurrentParentIsValid=false;}}node.sibling.return=node.return;node=node.sibling;}}function commitDeletion(current$$1,renderPriorityLevel){if(supportsMutation){// Recursively delete all host nodes from the parent.\n// Detach refs and call componentWillUnmount() on the whole subtree.\nunmountHostComponents(current$$1,renderPriorityLevel);}else{// Detach refs and call componentWillUnmount() on the whole subtree.\ncommitNestedUnmounts(current$$1,renderPriorityLevel);}detachFiber(current$$1);}function commitWork(current$$1,finishedWork){if(!supportsMutation){switch(finishedWork.tag){case FunctionComponent:case ForwardRef:case MemoComponent:case SimpleMemoComponent:{// Note: We currently never use MountMutation, but useLayout uses\n// UnmountMutation.\ncommitHookEffectList(UnmountMutation,MountMutation,finishedWork);return;}case Profiler:{return;}case SuspenseComponent:{commitSuspenseComponent(finishedWork);attachSuspenseRetryListeners(finishedWork);return;}case SuspenseListComponent:{attachSuspenseRetryListeners(finishedWork);return;}}commitContainer(finishedWork);return;}switch(finishedWork.tag){case FunctionComponent:case ForwardRef:case MemoComponent:case SimpleMemoComponent:{// Note: We currently never use MountMutation, but useLayout uses\n// UnmountMutation.\ncommitHookEffectList(UnmountMutation,MountMutation,finishedWork);return;}case ClassComponent:{return;}case HostComponent:{var instance=finishedWork.stateNode;if(instance!=null){// Commit the work prepared earlier.\nvar newProps=finishedWork.memoizedProps;// For hydration we reuse the update path but we treat the oldProps\n// as the newProps. The updatePayload will contain the real change in\n// this case.\nvar oldProps=current$$1!==null?current$$1.memoizedProps:newProps;var type=finishedWork.type;// TODO: Type the updateQueue to be specific to host components.\nvar updatePayload=finishedWork.updateQueue;finishedWork.updateQueue=null;if(updatePayload!==null){commitUpdate(instance,updatePayload,type,oldProps,newProps,finishedWork);}}return;}case HostText:{(function(){if(!(finishedWork.stateNode!==null)){{throw ReactError(Error('This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.'));}}})();var textInstance=finishedWork.stateNode;var newText=finishedWork.memoizedProps;// For hydration we reuse the update path but we treat the oldProps\n// as the newProps. The updatePayload will contain the real change in\n// this case.\nvar oldText=current$$1!==null?current$$1.memoizedProps:newText;commitTextUpdate(textInstance,oldText,newText);return;}case HostRoot:{return;}case Profiler:{return;}case SuspenseComponent:{commitSuspenseComponent(finishedWork);attachSuspenseRetryListeners(finishedWork);return;}case SuspenseListComponent:{attachSuspenseRetryListeners(finishedWork);return;}case IncompleteClassComponent:{return;}case FundamentalComponent:{if(enableFundamentalAPI){var fundamentalInstance=finishedWork.stateNode;updateFundamentalComponent(fundamentalInstance);}return;}default:{(function(){{{throw ReactError(Error('This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.'));}}})();}}}function commitSuspenseComponent(finishedWork){var newState=finishedWork.memoizedState;var newDidTimeout=void 0;var primaryChildParent=finishedWork;if(newState===null){newDidTimeout=false;}else{newDidTimeout=true;primaryChildParent=finishedWork.child;markCommitTimeOfFallback();}if(supportsMutation&&primaryChildParent!==null){hideOrUnhideAllChildren(primaryChildParent,newDidTimeout);}if(enableSuspenseCallback&&newState!==null){var suspenseCallback=finishedWork.memoizedProps.suspenseCallback;if(typeof suspenseCallback==='function'){var thenables=finishedWork.updateQueue;if(thenables!==null){suspenseCallback(new Set(thenables));}}else{if(suspenseCallback!==undefined){warning$1(false,'Unexpected type for suspenseCallback.');}}}}function attachSuspenseRetryListeners(finishedWork){// If this boundary just timed out, then it will have a set of thenables.\n// For each thenable, attach a listener so that when it resolves, React\nvar thenables=finishedWork.updateQueue;if(thenables!==null){finishedWork.updateQueue=null;var retryCache=finishedWork.stateNode;if(retryCache===null){retryCache=finishedWork.stateNode=new PossiblyWeakSet$1();}thenables.forEach(function(thenable){// Memoize using the boundary fiber to prevent redundant listeners.\nvar retry=resolveRetryThenable.bind(null,finishedWork,thenable);if(!retryCache.has(thenable)){if(enableSchedulerTracing){retry=tracing.unstable_wrap(retry);}retryCache.add(thenable);thenable.then(retry,retry);}});}}function commitResetTextContent(current$$1){if(!supportsMutation){return;}resetTextContent(current$$1.stateNode);}var PossiblyWeakSet=typeof WeakSet==='function'?WeakSet:Set;var PossiblyWeakMap=typeof WeakMap==='function'?WeakMap:Map;function createRootErrorUpdate(fiber,errorInfo,expirationTime){var update=createUpdate(expirationTime,null);// Unmount the root by rendering null.\nupdate.tag=CaptureUpdate;// Caution: React DevTools currently depends on this property\n// being called \"element\".\nupdate.payload={element:null};var error=errorInfo.value;update.callback=function(){onUncaughtError(error);logError(fiber,errorInfo);};return update;}function createClassErrorUpdate(fiber,errorInfo,expirationTime){var update=createUpdate(expirationTime,null);update.tag=CaptureUpdate;var getDerivedStateFromError=fiber.type.getDerivedStateFromError;if(typeof getDerivedStateFromError==='function'){var error=errorInfo.value;update.payload=function(){logError(fiber,errorInfo);return getDerivedStateFromError(error);};}var inst=fiber.stateNode;if(inst!==null&&typeof inst.componentDidCatch==='function'){update.callback=function callback(){{markFailedErrorBoundaryForHotReloading(fiber);}if(typeof getDerivedStateFromError!=='function'){// To preserve the preexisting retry behavior of error boundaries,\n// we keep track of which ones already failed during this batch.\n// This gets reset before we yield back to the browser.\n// TODO: Warn in strict mode if getDerivedStateFromError is\n// not defined.\nmarkLegacyErrorBoundaryAsFailed(this);// Only log here if componentDidCatch is the only error boundary method defined\nlogError(fiber,errorInfo);}var error=errorInfo.value;var stack=errorInfo.stack;this.componentDidCatch(error,{componentStack:stack!==null?stack:''});{if(typeof getDerivedStateFromError!=='function'){// If componentDidCatch is the only error boundary method defined,\n// then it needs to call setState to recover from errors.\n// If no state update is scheduled then the boundary will swallow the error.\n!(fiber.expirationTime===Sync)?warningWithoutStack$1(false,'%s: Error boundaries should implement getDerivedStateFromError(). '+'In that method, return a state update to display an error message or fallback UI.',getComponentName(fiber.type)||'Unknown'):void 0;}}};}else{update.callback=function(){markFailedErrorBoundaryForHotReloading(fiber);};}return update;}function attachPingListener(root,renderExpirationTime,thenable){// Attach a listener to the promise to \"ping\" the root and retry. But\n// only if one does not already exist for the current render expiration\n// time (which acts like a \"thread ID\" here).\nvar pingCache=root.pingCache;var threadIDs=void 0;if(pingCache===null){pingCache=root.pingCache=new PossiblyWeakMap();threadIDs=new Set();pingCache.set(thenable,threadIDs);}else{threadIDs=pingCache.get(thenable);if(threadIDs===undefined){threadIDs=new Set();pingCache.set(thenable,threadIDs);}}if(!threadIDs.has(renderExpirationTime)){// Memoize using the thread ID to prevent redundant listeners.\nthreadIDs.add(renderExpirationTime);var ping=pingSuspendedRoot.bind(null,root,thenable,renderExpirationTime);if(enableSchedulerTracing){ping=tracing.unstable_wrap(ping);}thenable.then(ping,ping);}}function throwException(root,returnFiber,sourceFiber,value,renderExpirationTime){// The source fiber did not complete.\nsourceFiber.effectTag|=Incomplete;// Its effect list is no longer valid.\nsourceFiber.firstEffect=sourceFiber.lastEffect=null;if(value!==null&&typeof value==='object'&&typeof value.then==='function'){// This is a thenable.\nvar thenable=value;checkForWrongSuspensePriorityInDEV(sourceFiber);var hasInvisibleParentBoundary=hasSuspenseContext(suspenseStackCursor.current,InvisibleParentSuspenseContext);// Schedule the nearest Suspense to re-render the timed out view.\nvar _workInProgress=returnFiber;do{if(_workInProgress.tag===SuspenseComponent&&shouldCaptureSuspense(_workInProgress,hasInvisibleParentBoundary)){// Found the nearest boundary.\n// Stash the promise on the boundary fiber. If the boundary times out, we'll\nvar thenables=_workInProgress.updateQueue;if(thenables===null){var updateQueue=new Set();updateQueue.add(thenable);_workInProgress.updateQueue=updateQueue;}else{thenables.add(thenable);}// If the boundary is outside of batched mode, we should *not*\n// suspend the commit. Pretend as if the suspended component rendered\n// null and keep rendering. In the commit phase, we'll schedule a\n// subsequent synchronous update to re-render the Suspense.\n//\n// Note: It doesn't matter whether the component that suspended was\n// inside a batched mode tree. If the Suspense is outside of it, we\n// should *not* suspend the commit.\nif((_workInProgress.mode&BatchedMode)===NoMode){_workInProgress.effectTag|=DidCapture;// We're going to commit this fiber even though it didn't complete.\n// But we shouldn't call any lifecycle methods or callbacks. Remove\n// all lifecycle effect tags.\nsourceFiber.effectTag&=~(LifecycleEffectMask|Incomplete);if(sourceFiber.tag===ClassComponent){var currentSourceFiber=sourceFiber.alternate;if(currentSourceFiber===null){// This is a new mount. Change the tag so it's not mistaken for a\n// completed class component. For example, we should not call\n// componentWillUnmount if it is deleted.\nsourceFiber.tag=IncompleteClassComponent;}else{// When we try rendering again, we should not reuse the current fiber,\n// since it's known to be in an inconsistent state. Use a force update to\n// prevent a bail out.\nvar update=createUpdate(Sync,null);update.tag=ForceUpdate;enqueueUpdate(sourceFiber,update);}}// The source fiber did not complete. Mark it with Sync priority to\n// indicate that it still has pending work.\nsourceFiber.expirationTime=Sync;// Exit without suspending.\nreturn;}// Confirmed that the boundary is in a concurrent mode tree. Continue\n// with the normal suspend path.\n//\n// After this we'll use a set of heuristics to determine whether this\n// render pass will run to completion or restart or \"suspend\" the commit.\n// The actual logic for this is spread out in different places.\n//\n// This first principle is that if we're going to suspend when we complete\n// a root, then we should also restart if we get an update or ping that\n// might unsuspend it, and vice versa. The only reason to suspend is\n// because you think you might want to restart before committing. However,\n// it doesn't make sense to restart only while in the period we're suspended.\n//\n// Restarting too aggressively is also not good because it starves out any\n// intermediate loading state. So we use heuristics to determine when.\n// Suspense Heuristics\n//\n// If nothing threw a Promise or all the same fallbacks are already showing,\n// then don't suspend/restart.\n//\n// If this is an initial render of a new tree of Suspense boundaries and\n// those trigger a fallback, then don't suspend/restart. We want to ensure\n// that we can show the initial loading state as quickly as possible.\n//\n// If we hit a \"Delayed\" case, such as when we'd switch from content back into\n// a fallback, then we should always suspend/restart. SuspenseConfig applies to\n// this case. If none is defined, JND is used instead.\n//\n// If we're already showing a fallback and it gets \"retried\", allowing us to show\n// another level, but there's still an inner boundary that would show a fallback,\n// then we suspend/restart for 500ms since the last time we showed a fallback\n// anywhere in the tree. This effectively throttles progressive loading into a\n// consistent train of commits. This also gives us an opportunity to restart to\n// get to the completed state slightly earlier.\n//\n// If there's ambiguity due to batching it's resolved in preference of:\n// 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n//\n// We want to ensure that a \"busy\" state doesn't get force committed. We want to\n// ensure that new initial loading states can commit as soon as possible.\nattachPingListener(root,renderExpirationTime,thenable);_workInProgress.effectTag|=ShouldCapture;_workInProgress.expirationTime=renderExpirationTime;return;}else if(enableSuspenseServerRenderer&&_workInProgress.tag===DehydratedSuspenseComponent){attachPingListener(root,renderExpirationTime,thenable);// Since we already have a current fiber, we can eagerly add a retry listener.\nvar retryCache=_workInProgress.memoizedState;if(retryCache===null){retryCache=_workInProgress.memoizedState=new PossiblyWeakSet();var current$$1=_workInProgress.alternate;(function(){if(!current$$1){{throw ReactError(Error('A dehydrated suspense boundary must commit before trying to render. This is probably a bug in React.'));}}})();current$$1.memoizedState=retryCache;}// Memoize using the boundary fiber to prevent redundant listeners.\nif(!retryCache.has(thenable)){retryCache.add(thenable);var retry=resolveRetryThenable.bind(null,_workInProgress,thenable);if(enableSchedulerTracing){retry=tracing.unstable_wrap(retry);}thenable.then(retry,retry);}_workInProgress.effectTag|=ShouldCapture;_workInProgress.expirationTime=renderExpirationTime;return;}// This boundary already captured during this render. Continue to the next\n// boundary.\n_workInProgress=_workInProgress.return;}while(_workInProgress!==null);// No boundary was found. Fallthrough to error mode.\n// TODO: Use invariant so the message is stripped in prod?\nvalue=new Error((getComponentName(sourceFiber.type)||'A React component')+' suspended while rendering, but no fallback UI was specified.\\n'+'\\n'+'Add a <Suspense fallback=...> component higher in the tree to '+'provide a loading indicator or placeholder to display.'+getStackByFiberInDevAndProd(sourceFiber));}// We didn't find a boundary that could handle this type of exception. Start\n// over and traverse parent path again, this time treating the exception\n// as an error.\nrenderDidError();value=createCapturedValue(value,sourceFiber);var workInProgress=returnFiber;do{switch(workInProgress.tag){case HostRoot:{var _errorInfo=value;workInProgress.effectTag|=ShouldCapture;workInProgress.expirationTime=renderExpirationTime;var _update=createRootErrorUpdate(workInProgress,_errorInfo,renderExpirationTime);enqueueCapturedUpdate(workInProgress,_update);return;}case ClassComponent:// Capture and retry\nvar errorInfo=value;var ctor=workInProgress.type;var instance=workInProgress.stateNode;if((workInProgress.effectTag&DidCapture)===NoEffect&&(typeof ctor.getDerivedStateFromError==='function'||instance!==null&&typeof instance.componentDidCatch==='function'&&!isAlreadyFailedLegacyErrorBoundary(instance))){workInProgress.effectTag|=ShouldCapture;workInProgress.expirationTime=renderExpirationTime;// Schedule the error boundary to re-render using updated state\nvar _update2=createClassErrorUpdate(workInProgress,errorInfo,renderExpirationTime);enqueueCapturedUpdate(workInProgress,_update2);return;}break;default:break;}workInProgress=workInProgress.return;}while(workInProgress!==null);}// The scheduler is imported here *only* to detect whether it's been mocked\n// DEV stuff\nvar ceil=Math.ceil;var ReactCurrentDispatcher=ReactSharedInternals.ReactCurrentDispatcher;var ReactCurrentOwner$1=ReactSharedInternals.ReactCurrentOwner;var IsSomeRendererActing=ReactSharedInternals.IsSomeRendererActing;var NoContext=/*                    */0;var BatchedContext=/*               */1;var EventContext=/*                 */2;var DiscreteEventContext=/*         */4;var LegacyUnbatchedContext=/*       */8;var RenderContext=/*                */16;var CommitContext=/*                */32;var RootIncomplete=0;var RootErrored=1;var RootSuspended=2;var RootSuspendedWithDelay=3;var RootCompleted=4;// Describes where we are in the React execution stack\nvar executionContext=NoContext;// The root we're working on\nvar workInProgressRoot=null;// The fiber we're working on\nvar workInProgress=null;// The expiration time we're rendering\nvar renderExpirationTime=NoWork;// Whether to root completed, errored, suspended, etc.\nvar workInProgressRootExitStatus=RootIncomplete;// Most recent event time among processed updates during this render.\n// This is conceptually a time stamp but expressed in terms of an ExpirationTime\n// because we deal mostly with expiration times in the hot path, so this avoids\n// the conversion happening in the hot path.\nvar workInProgressRootLatestProcessedExpirationTime=Sync;var workInProgressRootLatestSuspenseTimeout=Sync;var workInProgressRootCanSuspendUsingConfig=null;// If we're pinged while rendering we don't always restart immediately.\n// This flag determines if it might be worthwhile to restart if an opportunity\n// happens latere.\nvar workInProgressRootHasPendingPing=false;// The most recent time we committed a fallback. This lets us ensure a train\n// model where we don't commit new loading states in too quick succession.\nvar globalMostRecentFallbackTime=0;var FALLBACK_THROTTLE_MS=500;var nextEffect=null;var hasUncaughtError=false;var firstUncaughtError=null;var legacyErrorBoundariesThatAlreadyFailed=null;var rootDoesHavePassiveEffects=false;var rootWithPendingPassiveEffects=null;var pendingPassiveEffectsRenderPriority=NoPriority;var pendingPassiveEffectsExpirationTime=NoWork;var rootsWithPendingDiscreteUpdates=null;// Use these to prevent an infinite loop of nested updates\nvar NESTED_UPDATE_LIMIT=50;var nestedUpdateCount=0;var rootWithNestedUpdates=null;var NESTED_PASSIVE_UPDATE_LIMIT=50;var nestedPassiveUpdateCount=0;var interruptedBy=null;// Marks the need to reschedule pending interactions at these expiration times\n// during the commit phase. This enables them to be traced across components\n// that spawn new work during render. E.g. hidden boundaries, suspended SSR\n// hydration or SuspenseList.\nvar spawnedWorkDuringRender=null;// Expiration times are computed by adding to the current time (the start\n// time). However, if two updates are scheduled within the same event, we\n// should treat their start times as simultaneous, even if the actual clock\n// time has advanced between the first and second call.\n// In other words, because expiration times determine how updates are batched,\n// we want all updates of like priority that occur within the same event to\n// receive the same expiration time. Otherwise we get tearing.\nvar currentEventTime=NoWork;function requestCurrentTime(){if((executionContext&(RenderContext|CommitContext))!==NoContext){// We're inside React, so it's fine to read the actual time.\nreturn msToExpirationTime(now$1());}// We're not inside React, so we may be in the middle of a browser event.\nif(currentEventTime!==NoWork){// Use the same start time for all updates until we enter React again.\nreturn currentEventTime;}// This is the first update since React yielded. Compute a new start time.\ncurrentEventTime=msToExpirationTime(now$1());return currentEventTime;}function computeExpirationForFiber(currentTime,fiber,suspenseConfig){var mode=fiber.mode;if((mode&BatchedMode)===NoMode){return Sync;}var priorityLevel=getCurrentPriorityLevel();if((mode&ConcurrentMode)===NoMode){return priorityLevel===ImmediatePriority?Sync:Batched;}if((executionContext&RenderContext)!==NoContext){// Use whatever time we're already rendering\nreturn renderExpirationTime;}var expirationTime=void 0;if(suspenseConfig!==null){// Compute an expiration time based on the Suspense timeout.\nexpirationTime=computeSuspenseExpiration(currentTime,suspenseConfig.timeoutMs|0||LOW_PRIORITY_EXPIRATION);}else{// Compute an expiration time based on the Scheduler priority.\nswitch(priorityLevel){case ImmediatePriority:expirationTime=Sync;break;case UserBlockingPriority:// TODO: Rename this to computeUserBlockingExpiration\nexpirationTime=computeInteractiveExpiration(currentTime);break;case NormalPriority:case LowPriority:// TODO: Handle LowPriority\n// TODO: Rename this to... something better.\nexpirationTime=computeAsyncExpiration(currentTime);break;case IdlePriority:expirationTime=Never;break;default:(function(){{{throw ReactError(Error('Expected a valid priority level'));}}})();}}// If we're in the middle of rendering a tree, do not update at the same\n// expiration time that is already rendering.\n// TODO: We shouldn't have to do this if the update is on a different root.\n// Refactor computeExpirationForFiber + scheduleUpdate so we have access to\n// the root when we check for this condition.\nif(workInProgressRoot!==null&&expirationTime===renderExpirationTime){// This is a trick to move this update into a separate batch\nexpirationTime-=1;}return expirationTime;}var lastUniqueAsyncExpiration=NoWork;function computeUniqueAsyncExpiration(){var currentTime=requestCurrentTime();var result=computeAsyncExpiration(currentTime);if(result<=lastUniqueAsyncExpiration){// Since we assume the current time monotonically increases, we only hit\n// this branch when computeUniqueAsyncExpiration is fired multiple times\n// within a 200ms window (or whatever the async bucket size is).\nresult-=1;}lastUniqueAsyncExpiration=result;return result;}function scheduleUpdateOnFiber(fiber,expirationTime){checkForNestedUpdates();warnAboutInvalidUpdatesOnClassComponentsInDEV(fiber);var root=markUpdateTimeFromFiberToRoot(fiber,expirationTime);if(root===null){warnAboutUpdateOnUnmountedFiberInDEV(fiber);return;}root.pingTime=NoWork;checkForInterruption(fiber,expirationTime);recordScheduleUpdate();// TODO: computeExpirationForFiber also reads the priority. Pass the\n// priority as an argument to that function and this one.\nvar priorityLevel=getCurrentPriorityLevel();if(expirationTime===Sync){if(// Check if we're inside unbatchedUpdates\n(executionContext&LegacyUnbatchedContext)!==NoContext&&// Check if we're not already rendering\n(executionContext&(RenderContext|CommitContext))===NoContext){// Register pending interactions on the root to avoid losing traced interaction data.\nschedulePendingInteractions(root,expirationTime);// This is a legacy edge case. The initial mount of a ReactDOM.render-ed\n// root inside of batchedUpdates should be synchronous, but layout updates\n// should be deferred until the end of the batch.\nvar callback=renderRoot(root,Sync,true);while(callback!==null){callback=callback(true);}}else{scheduleCallbackForRoot(root,ImmediatePriority,Sync);if(executionContext===NoContext){// Flush the synchronous work now, wnless we're already working or inside\n// a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n// scheduleCallbackForFiber to preserve the ability to schedule a callback\n// without immediately flushing it. We only do this for user-initiated\n// updates, to preserve historical behavior of sync mode.\nflushSyncCallbackQueue();}}}else{scheduleCallbackForRoot(root,priorityLevel,expirationTime);}if((executionContext&DiscreteEventContext)!==NoContext&&(// Only updates at user-blocking priority or greater are considered\n// discrete, even inside a discrete event.\npriorityLevel===UserBlockingPriority||priorityLevel===ImmediatePriority)){// This is the result of a discrete event. Track the lowest priority\n// discrete update per root so we can flush them early, if needed.\nif(rootsWithPendingDiscreteUpdates===null){rootsWithPendingDiscreteUpdates=new Map([[root,expirationTime]]);}else{var lastDiscreteTime=rootsWithPendingDiscreteUpdates.get(root);if(lastDiscreteTime===undefined||lastDiscreteTime>expirationTime){rootsWithPendingDiscreteUpdates.set(root,expirationTime);}}}}var scheduleWork=scheduleUpdateOnFiber;// This is split into a separate function so we can mark a fiber with pending\n// work without treating it as a typical update that originates from an event;\n// e.g. retrying a Suspense boundary isn't an update, but it does schedule work\n// on a fiber.\nfunction markUpdateTimeFromFiberToRoot(fiber,expirationTime){// Update the source fiber's expiration time\nif(fiber.expirationTime<expirationTime){fiber.expirationTime=expirationTime;}var alternate=fiber.alternate;if(alternate!==null&&alternate.expirationTime<expirationTime){alternate.expirationTime=expirationTime;}// Walk the parent path to the root and update the child expiration time.\nvar node=fiber.return;var root=null;if(node===null&&fiber.tag===HostRoot){root=fiber.stateNode;}else{while(node!==null){alternate=node.alternate;if(node.childExpirationTime<expirationTime){node.childExpirationTime=expirationTime;if(alternate!==null&&alternate.childExpirationTime<expirationTime){alternate.childExpirationTime=expirationTime;}}else if(alternate!==null&&alternate.childExpirationTime<expirationTime){alternate.childExpirationTime=expirationTime;}if(node.return===null&&node.tag===HostRoot){root=node.stateNode;break;}node=node.return;}}if(root!==null){// Update the first and last pending expiration times in this root\nvar firstPendingTime=root.firstPendingTime;if(expirationTime>firstPendingTime){root.firstPendingTime=expirationTime;}var lastPendingTime=root.lastPendingTime;if(lastPendingTime===NoWork||expirationTime<lastPendingTime){root.lastPendingTime=expirationTime;}}return root;}// Use this function, along with runRootCallback, to ensure that only a single\n// callback per root is scheduled. It's still possible to call renderRoot\n// directly, but scheduling via this function helps avoid excessive callbacks.\n// It works by storing the callback node and expiration time on the root. When a\n// new callback comes in, it compares the expiration time to determine if it\n// should cancel the previous one. It also relies on commitRoot scheduling a\n// callback to render the next level, because that means we don't need a\n// separate callback per expiration time.\nfunction scheduleCallbackForRoot(root,priorityLevel,expirationTime){var existingCallbackExpirationTime=root.callbackExpirationTime;if(existingCallbackExpirationTime<expirationTime){// New callback has higher priority than the existing one.\nvar existingCallbackNode=root.callbackNode;if(existingCallbackNode!==null){cancelCallback(existingCallbackNode);}root.callbackExpirationTime=expirationTime;if(expirationTime===Sync){// Sync React callbacks are scheduled on a special internal queue\nroot.callbackNode=scheduleSyncCallback(runRootCallback.bind(null,root,renderRoot.bind(null,root,expirationTime)));}else{var options=null;if(!disableSchedulerTimeoutBasedOnReactExpirationTime&&expirationTime!==Never){var timeout=expirationTimeToMs(expirationTime)-now$1();options={timeout:timeout};}root.callbackNode=scheduleCallback(priorityLevel,runRootCallback.bind(null,root,renderRoot.bind(null,root,expirationTime)),options);if(enableUserTimingAPI&&expirationTime!==Sync&&(executionContext&(RenderContext|CommitContext))===NoContext){// Scheduled an async callback, and we're not already working. Add an\n// entry to the flamegraph that shows we're waiting for a callback\n// to fire.\nstartRequestCallbackTimer();}}}// Associate the current interactions with this new root+priority.\nschedulePendingInteractions(root,expirationTime);}function runRootCallback(root,callback,isSync){var prevCallbackNode=root.callbackNode;var continuation=null;try{continuation=callback(isSync);if(continuation!==null){return runRootCallback.bind(null,root,continuation);}else{return null;}}finally{// If the callback exits without returning a continuation, remove the\n// corresponding callback node from the root. Unless the callback node\n// has changed, which implies that it was already cancelled by a high\n// priority update.\nif(continuation===null&&prevCallbackNode===root.callbackNode){root.callbackNode=null;root.callbackExpirationTime=NoWork;}}}function flushRoot(root,expirationTime){if((executionContext&(RenderContext|CommitContext))!==NoContext){(function(){{{throw ReactError(Error('work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.'));}}})();}scheduleSyncCallback(renderRoot.bind(null,root,expirationTime));flushSyncCallbackQueue();}function flushDiscreteUpdates(){// TODO: Should be able to flush inside batchedUpdates, but not inside `act`.\n// However, `act` uses `batchedUpdates`, so there's no way to distinguish\n// those two cases. Need to fix this before exposing flushDiscreteUpdates\n// as a public API.\nif((executionContext&(BatchedContext|RenderContext|CommitContext))!==NoContext){if( true&&(executionContext&RenderContext)!==NoContext){warning$1(false,'unstable_flushDiscreteUpdates: Cannot flush updates when React is '+'already rendering.');}// We're already rendering, so we can't synchronously flush pending work.\n// This is probably a nested event dispatch triggered by a lifecycle/effect,\n// like `el.focus()`. Exit.\nreturn;}flushPendingDiscreteUpdates();if(!revertPassiveEffectsChange){// If the discrete updates scheduled passive effects, flush them now so that\n// they fire before the next serial event.\nflushPassiveEffects();}}function resolveLocksOnRoot(root,expirationTime){var firstBatch=root.firstBatch;if(firstBatch!==null&&firstBatch._defer&&firstBatch._expirationTime>=expirationTime){scheduleCallback(NormalPriority,function(){firstBatch._onComplete();return null;});return true;}else{return false;}}function deferredUpdates(fn){// TODO: Remove in favor of Scheduler.next\nreturn runWithPriority(NormalPriority,fn);}function syncUpdates(fn,a,b,c){return runWithPriority(ImmediatePriority,fn.bind(null,a,b,c));}function flushPendingDiscreteUpdates(){if(rootsWithPendingDiscreteUpdates!==null){// For each root with pending discrete updates, schedule a callback to\n// immediately flush them.\nvar roots=rootsWithPendingDiscreteUpdates;rootsWithPendingDiscreteUpdates=null;roots.forEach(function(expirationTime,root){scheduleSyncCallback(renderRoot.bind(null,root,expirationTime));});// Now flush the immediate queue.\nflushSyncCallbackQueue();}}function batchedUpdates(fn,a){var prevExecutionContext=executionContext;executionContext|=BatchedContext;try{return fn(a);}finally{executionContext=prevExecutionContext;if(executionContext===NoContext){// Flush the immediate callbacks that were scheduled during this batch\nflushSyncCallbackQueue();}}}function batchedEventUpdates(fn,a){var prevExecutionContext=executionContext;executionContext|=EventContext;try{return fn(a);}finally{executionContext=prevExecutionContext;if(executionContext===NoContext){// Flush the immediate callbacks that were scheduled during this batch\nflushSyncCallbackQueue();}}}function discreteUpdates(fn,a,b,c){var prevExecutionContext=executionContext;executionContext|=DiscreteEventContext;try{// Should this\nreturn runWithPriority(UserBlockingPriority,fn.bind(null,a,b,c));}finally{executionContext=prevExecutionContext;if(executionContext===NoContext){// Flush the immediate callbacks that were scheduled during this batch\nflushSyncCallbackQueue();}}}function unbatchedUpdates(fn,a){var prevExecutionContext=executionContext;executionContext&=~BatchedContext;executionContext|=LegacyUnbatchedContext;try{return fn(a);}finally{executionContext=prevExecutionContext;if(executionContext===NoContext){// Flush the immediate callbacks that were scheduled during this batch\nflushSyncCallbackQueue();}}}function flushSync(fn,a){if((executionContext&(RenderContext|CommitContext))!==NoContext){(function(){{{throw ReactError(Error('flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.'));}}})();}var prevExecutionContext=executionContext;executionContext|=BatchedContext;try{return runWithPriority(ImmediatePriority,fn.bind(null,a));}finally{executionContext=prevExecutionContext;// Flush the immediate callbacks that were scheduled during this batch.\n// Note that this will happen even if batchedUpdates is higher up\n// the stack.\nflushSyncCallbackQueue();}}function flushControlled(fn){var prevExecutionContext=executionContext;executionContext|=BatchedContext;try{runWithPriority(ImmediatePriority,fn);}finally{executionContext=prevExecutionContext;if(executionContext===NoContext){// Flush the immediate callbacks that were scheduled during this batch\nflushSyncCallbackQueue();}}}function prepareFreshStack(root,expirationTime){root.finishedWork=null;root.finishedExpirationTime=NoWork;var timeoutHandle=root.timeoutHandle;if(timeoutHandle!==noTimeout){// The root previous suspended and scheduled a timeout to commit a fallback\n// state. Now that we have additional work, cancel the timeout.\nroot.timeoutHandle=noTimeout;// $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\ncancelTimeout(timeoutHandle);}if(workInProgress!==null){var interruptedWork=workInProgress.return;while(interruptedWork!==null){unwindInterruptedWork(interruptedWork);interruptedWork=interruptedWork.return;}}workInProgressRoot=root;workInProgress=createWorkInProgress(root.current,null,expirationTime);renderExpirationTime=expirationTime;workInProgressRootExitStatus=RootIncomplete;workInProgressRootLatestProcessedExpirationTime=Sync;workInProgressRootLatestSuspenseTimeout=Sync;workInProgressRootCanSuspendUsingConfig=null;workInProgressRootHasPendingPing=false;if(enableSchedulerTracing){spawnedWorkDuringRender=null;}{ReactStrictModeWarnings.discardPendingWarnings();componentsThatTriggeredHighPriSuspend=null;}}function renderRoot(root,expirationTime,isSync){(function(){if(!((executionContext&(RenderContext|CommitContext))===NoContext)){{throw ReactError(Error('Should not already be working.'));}}})();if(enableUserTimingAPI&&expirationTime!==Sync){var didExpire=isSync;stopRequestCallbackTimer(didExpire);}if(root.firstPendingTime<expirationTime){// If there's no work left at this expiration time, exit immediately. This\n// happens when multiple callbacks are scheduled for a single root, but an\n// earlier callback flushes the work of a later one.\nreturn null;}if(isSync&&root.finishedExpirationTime===expirationTime){// There's already a pending commit at this expiration time.\n// TODO: This is poorly factored. This case only exists for the\n// batch.commit() API.\nreturn commitRoot.bind(null,root);}flushPassiveEffects();// If the root or expiration time have changed, throw out the existing stack\n// and prepare a fresh one. Otherwise we'll continue where we left off.\nif(root!==workInProgressRoot||expirationTime!==renderExpirationTime){prepareFreshStack(root,expirationTime);startWorkOnPendingInteractions(root,expirationTime);}else if(workInProgressRootExitStatus===RootSuspendedWithDelay){// We could've received an update at a lower priority while we yielded.\n// We're suspended in a delayed state. Once we complete this render we're\n// just going to try to recover at the last pending time anyway so we might\n// as well start doing that eagerly.\n// Ideally we should be able to do this even for retries but we don't yet\n// know if we're going to process an update which wants to commit earlier,\n// and this path happens very early so it would happen too often. Instead,\n// for that case, we'll wait until we complete.\nif(workInProgressRootHasPendingPing){// We have a ping at this expiration. Let's restart to see if we get unblocked.\nprepareFreshStack(root,expirationTime);}else{var lastPendingTime=root.lastPendingTime;if(lastPendingTime<expirationTime){// There's lower priority work. It might be unsuspended. Try rendering\n// at that level immediately, while preserving the position in the queue.\nreturn renderRoot.bind(null,root,lastPendingTime);}}}// If we have a work-in-progress fiber, it means there's still work to do\n// in this root.\nif(workInProgress!==null){var prevExecutionContext=executionContext;executionContext|=RenderContext;var prevDispatcher=ReactCurrentDispatcher.current;if(prevDispatcher===null){// The React isomorphic package does not include a default dispatcher.\n// Instead the first renderer will lazily attach one, in order to give\n// nicer error messages.\nprevDispatcher=ContextOnlyDispatcher;}ReactCurrentDispatcher.current=ContextOnlyDispatcher;var prevInteractions=null;if(enableSchedulerTracing){prevInteractions=tracing.__interactionsRef.current;tracing.__interactionsRef.current=root.memoizedInteractions;}startWorkLoopTimer(workInProgress);// TODO: Fork renderRoot into renderRootSync and renderRootAsync\nif(isSync){if(expirationTime!==Sync){// An async update expired. There may be other expired updates on\n// this root. We should render all the expired work in a\n// single batch.\nvar currentTime=requestCurrentTime();if(currentTime<expirationTime){// Restart at the current time.\nexecutionContext=prevExecutionContext;resetContextDependencies();ReactCurrentDispatcher.current=prevDispatcher;if(enableSchedulerTracing){tracing.__interactionsRef.current=prevInteractions;}return renderRoot.bind(null,root,currentTime);}}}else{// Since we know we're in a React event, we can clear the current\n// event time. The next update will compute a new event time.\ncurrentEventTime=NoWork;}do{try{if(isSync){workLoopSync();}else{workLoop();}break;}catch(thrownValue){// Reset module-level state that was set during the render phase.\nresetContextDependencies();resetHooks();var sourceFiber=workInProgress;if(sourceFiber===null||sourceFiber.return===null){// Expected to be working on a non-root fiber. This is a fatal error\n// because there's no ancestor that can handle it; the root is\n// supposed to capture all errors that weren't caught by an error\n// boundary.\nprepareFreshStack(root,expirationTime);executionContext=prevExecutionContext;throw thrownValue;}if(enableProfilerTimer&&sourceFiber.mode&ProfileMode){// Record the time spent rendering before an error was thrown. This\n// avoids inaccurate Profiler durations in the case of a\n// suspended render.\nstopProfilerTimerIfRunningAndRecordDelta(sourceFiber,true);}var returnFiber=sourceFiber.return;throwException(root,returnFiber,sourceFiber,thrownValue,renderExpirationTime);workInProgress=completeUnitOfWork(sourceFiber);}}while(true);executionContext=prevExecutionContext;resetContextDependencies();ReactCurrentDispatcher.current=prevDispatcher;if(enableSchedulerTracing){tracing.__interactionsRef.current=prevInteractions;}if(workInProgress!==null){// There's still work left over. Return a continuation.\nstopInterruptedWorkLoopTimer();if(expirationTime!==Sync){startRequestCallbackTimer();}return renderRoot.bind(null,root,expirationTime);}}// We now have a consistent tree. The next step is either to commit it, or, if\n// something suspended, wait to commit it after a timeout.\nstopFinishedWorkLoopTimer();root.finishedWork=root.current.alternate;root.finishedExpirationTime=expirationTime;var isLocked=resolveLocksOnRoot(root,expirationTime);if(isLocked){// This root has a lock that prevents it from committing. Exit. If we begin\n// work on the root again, without any intervening updates, it will finish\n// without doing additional work.\nreturn null;}// Set this to null to indicate there's no in-progress render.\nworkInProgressRoot=null;switch(workInProgressRootExitStatus){case RootIncomplete:{(function(){{{throw ReactError(Error('Should have a work-in-progress.'));}}})();}// Flow knows about invariant, so it complains if I add a break statement,\n// but eslint doesn't know about invariant, so it complains if I do.\n// eslint-disable-next-line no-fallthrough\ncase RootErrored:{// An error was thrown. First check if there is lower priority work\n// scheduled on this root.\nvar _lastPendingTime=root.lastPendingTime;if(_lastPendingTime<expirationTime){// There's lower priority work. Before raising the error, try rendering\n// at the lower priority to see if it fixes it. Use a continuation to\n// maintain the existing priority and position in the queue.\nreturn renderRoot.bind(null,root,_lastPendingTime);}if(!isSync){// If we're rendering asynchronously, it's possible the error was\n// caused by tearing due to a mutation during an event. Try rendering\n// one more time without yiedling to events.\nprepareFreshStack(root,expirationTime);scheduleSyncCallback(renderRoot.bind(null,root,expirationTime));return null;}// If we're already rendering synchronously, commit the root in its\n// errored state.\nreturn commitRoot.bind(null,root);}case RootSuspended:{flushSuspensePriorityWarningInDEV();// We have an acceptable loading state. We need to figure out if we should\n// immediately commit it or wait a bit.\n// If we have processed new updates during this render, we may now have a\n// new loading state ready. We want to ensure that we commit that as soon as\n// possible.\nvar hasNotProcessedNewUpdates=workInProgressRootLatestProcessedExpirationTime===Sync;if(hasNotProcessedNewUpdates&&!isSync&&// do not delay if we're inside an act() scope\n!( true&&flushSuspenseFallbacksInTests&&IsThisRendererActing.current)){// If we have not processed any new updates during this pass, then this is\n// either a retry of an existing fallback state or a hidden tree.\n// Hidden trees shouldn't be batched with other work and after that's\n// fixed it can only be a retry.\n// We're going to throttle committing retries so that we don't show too\n// many loading states too quickly.\nvar msUntilTimeout=globalMostRecentFallbackTime+FALLBACK_THROTTLE_MS-now$1();// Don't bother with a very short suspense time.\nif(msUntilTimeout>10){if(workInProgressRootHasPendingPing){// This render was pinged but we didn't get to restart earlier so try\n// restarting now instead.\nprepareFreshStack(root,expirationTime);return renderRoot.bind(null,root,expirationTime);}var _lastPendingTime2=root.lastPendingTime;if(_lastPendingTime2<expirationTime){// There's lower priority work. It might be unsuspended. Try rendering\n// at that level.\nreturn renderRoot.bind(null,root,_lastPendingTime2);}// The render is suspended, it hasn't timed out, and there's no lower\n// priority work to do. Instead of committing the fallback\n// immediately, wait for more data to arrive.\nroot.timeoutHandle=scheduleTimeout(commitRoot.bind(null,root),msUntilTimeout);return null;}}// The work expired. Commit immediately.\nreturn commitRoot.bind(null,root);}case RootSuspendedWithDelay:{flushSuspensePriorityWarningInDEV();if(!isSync&&// do not delay if we're inside an act() scope\n!( true&&flushSuspenseFallbacksInTests&&IsThisRendererActing.current)){// We're suspended in a state that should be avoided. We'll try to avoid committing\n// it for as long as the timeouts let us.\nif(workInProgressRootHasPendingPing){// This render was pinged but we didn't get to restart earlier so try\n// restarting now instead.\nprepareFreshStack(root,expirationTime);return renderRoot.bind(null,root,expirationTime);}var _lastPendingTime3=root.lastPendingTime;if(_lastPendingTime3<expirationTime){// There's lower priority work. It might be unsuspended. Try rendering\n// at that level immediately.\nreturn renderRoot.bind(null,root,_lastPendingTime3);}var _msUntilTimeout=void 0;if(workInProgressRootLatestSuspenseTimeout!==Sync){// We have processed a suspense config whose expiration time we can use as\n// the timeout.\n_msUntilTimeout=expirationTimeToMs(workInProgressRootLatestSuspenseTimeout)-now$1();}else if(workInProgressRootLatestProcessedExpirationTime===Sync){// This should never normally happen because only new updates cause\n// delayed states, so we should have processed something. However,\n// this could also happen in an offscreen tree.\n_msUntilTimeout=0;}else{// If we don't have a suspense config, we're going to use a heuristic to\nvar eventTimeMs=inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);var currentTimeMs=now$1();var timeUntilExpirationMs=expirationTimeToMs(expirationTime)-currentTimeMs;var timeElapsed=currentTimeMs-eventTimeMs;if(timeElapsed<0){// We get this wrong some time since we estimate the time.\ntimeElapsed=0;}_msUntilTimeout=jnd(timeElapsed)-timeElapsed;// Clamp the timeout to the expiration time.\n// TODO: Once the event time is exact instead of inferred from expiration time\n// we don't need this.\nif(timeUntilExpirationMs<_msUntilTimeout){_msUntilTimeout=timeUntilExpirationMs;}}// Don't bother with a very short suspense time.\nif(_msUntilTimeout>10){// The render is suspended, it hasn't timed out, and there's no lower\n// priority work to do. Instead of committing the fallback\n// immediately, wait for more data to arrive.\nroot.timeoutHandle=scheduleTimeout(commitRoot.bind(null,root),_msUntilTimeout);return null;}}// The work expired. Commit immediately.\nreturn commitRoot.bind(null,root);}case RootCompleted:{// The work completed. Ready to commit.\nif(!isSync&&// do not delay if we're inside an act() scope\n!( true&&flushSuspenseFallbacksInTests&&IsThisRendererActing.current)&&workInProgressRootLatestProcessedExpirationTime!==Sync&&workInProgressRootCanSuspendUsingConfig!==null){// If we have exceeded the minimum loading delay, which probably\n// means we have shown a spinner already, we might have to suspend\n// a bit longer to ensure that the spinner is shown for enough time.\nvar _msUntilTimeout2=computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime,expirationTime,workInProgressRootCanSuspendUsingConfig);if(_msUntilTimeout2>10){root.timeoutHandle=scheduleTimeout(commitRoot.bind(null,root),_msUntilTimeout2);return null;}}return commitRoot.bind(null,root);}default:{(function(){{{throw ReactError(Error('Unknown root exit status.'));}}})();}}}function markCommitTimeOfFallback(){globalMostRecentFallbackTime=now$1();}function markRenderEventTimeAndConfig(expirationTime,suspenseConfig){if(expirationTime<workInProgressRootLatestProcessedExpirationTime&&expirationTime>Never){workInProgressRootLatestProcessedExpirationTime=expirationTime;}if(suspenseConfig!==null){if(expirationTime<workInProgressRootLatestSuspenseTimeout&&expirationTime>Never){workInProgressRootLatestSuspenseTimeout=expirationTime;// Most of the time we only have one config and getting wrong is not bad.\nworkInProgressRootCanSuspendUsingConfig=suspenseConfig;}}}function renderDidSuspend(){if(workInProgressRootExitStatus===RootIncomplete){workInProgressRootExitStatus=RootSuspended;}}function renderDidSuspendDelayIfPossible(){if(workInProgressRootExitStatus===RootIncomplete||workInProgressRootExitStatus===RootSuspended){workInProgressRootExitStatus=RootSuspendedWithDelay;}}function renderDidError(){if(workInProgressRootExitStatus!==RootCompleted){workInProgressRootExitStatus=RootErrored;}}// Called during render to determine if anything has suspended.\n// Returns false if we're not sure.\nfunction renderHasNotSuspendedYet(){// If something errored or completed, we can't really be sure,\n// so those are false.\nreturn workInProgressRootExitStatus===RootIncomplete;}function inferTimeFromExpirationTime(expirationTime){// We don't know exactly when the update was scheduled, but we can infer an\n// approximate start time from the expiration time.\nvar earliestExpirationTimeMs=expirationTimeToMs(expirationTime);return earliestExpirationTimeMs-LOW_PRIORITY_EXPIRATION;}function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime,suspenseConfig){// We don't know exactly when the update was scheduled, but we can infer an\n// approximate start time from the expiration time by subtracting the timeout\n// that was added to the event time.\nvar earliestExpirationTimeMs=expirationTimeToMs(expirationTime);return earliestExpirationTimeMs-(suspenseConfig.timeoutMs|0||LOW_PRIORITY_EXPIRATION);}function workLoopSync(){// Already timed out, so perform work without checking if we need to yield.\nwhile(workInProgress!==null){workInProgress=performUnitOfWork(workInProgress);}}function workLoop(){// Perform work until Scheduler asks us to yield\nwhile(workInProgress!==null&&!shouldYield()){workInProgress=performUnitOfWork(workInProgress);}}function performUnitOfWork(unitOfWork){// The current, flushed, state of this fiber is the alternate. Ideally\n// nothing should rely on this, but relying on it here means that we don't\n// need an additional field on the work in progress.\nvar current$$1=unitOfWork.alternate;startWorkTimer(unitOfWork);setCurrentFiber(unitOfWork);var next=void 0;if(enableProfilerTimer&&(unitOfWork.mode&ProfileMode)!==NoMode){startProfilerTimer(unitOfWork);next=beginWork$$1(current$$1,unitOfWork,renderExpirationTime);stopProfilerTimerIfRunningAndRecordDelta(unitOfWork,true);}else{next=beginWork$$1(current$$1,unitOfWork,renderExpirationTime);}resetCurrentFiber();unitOfWork.memoizedProps=unitOfWork.pendingProps;if(next===null){// If this doesn't spawn new work, complete the current work.\nnext=completeUnitOfWork(unitOfWork);}ReactCurrentOwner$1.current=null;return next;}function completeUnitOfWork(unitOfWork){// Attempt to complete the current unit of work, then move to the next\n// sibling. If there are no more siblings, return to the parent fiber.\nworkInProgress=unitOfWork;do{// The current, flushed, state of this fiber is the alternate. Ideally\n// nothing should rely on this, but relying on it here means that we don't\n// need an additional field on the work in progress.\nvar current$$1=workInProgress.alternate;var returnFiber=workInProgress.return;// Check if the work completed or if something threw.\nif((workInProgress.effectTag&Incomplete)===NoEffect){setCurrentFiber(workInProgress);var next=void 0;if(!enableProfilerTimer||(workInProgress.mode&ProfileMode)===NoMode){next=completeWork(current$$1,workInProgress,renderExpirationTime);}else{startProfilerTimer(workInProgress);next=completeWork(current$$1,workInProgress,renderExpirationTime);// Update render duration assuming we didn't error.\nstopProfilerTimerIfRunningAndRecordDelta(workInProgress,false);}stopWorkTimer(workInProgress);resetCurrentFiber();resetChildExpirationTime(workInProgress);if(next!==null){// Completing this fiber spawned new work. Work on that next.\nreturn next;}if(returnFiber!==null&&// Do not append effects to parents if a sibling failed to complete\n(returnFiber.effectTag&Incomplete)===NoEffect){// Append all the effects of the subtree and this fiber onto the effect\n// list of the parent. The completion order of the children affects the\n// side-effect order.\nif(returnFiber.firstEffect===null){returnFiber.firstEffect=workInProgress.firstEffect;}if(workInProgress.lastEffect!==null){if(returnFiber.lastEffect!==null){returnFiber.lastEffect.nextEffect=workInProgress.firstEffect;}returnFiber.lastEffect=workInProgress.lastEffect;}// If this fiber had side-effects, we append it AFTER the children's\n// side-effects. We can perform certain side-effects earlier if needed,\n// by doing multiple passes over the effect list. We don't want to\n// schedule our own side-effect on our own list because if end up\n// reusing children we'll schedule this effect onto itself since we're\n// at the end.\nvar effectTag=workInProgress.effectTag;// Skip both NoWork and PerformedWork tags when creating the effect\n// list. PerformedWork effect is read by React DevTools but shouldn't be\n// committed.\nif(effectTag>PerformedWork){if(returnFiber.lastEffect!==null){returnFiber.lastEffect.nextEffect=workInProgress;}else{returnFiber.firstEffect=workInProgress;}returnFiber.lastEffect=workInProgress;}}}else{// This fiber did not complete because something threw. Pop values off\n// the stack without entering the complete phase. If this is a boundary,\n// capture values if possible.\nvar _next=unwindWork(workInProgress,renderExpirationTime);// Because this fiber did not complete, don't reset its expiration time.\nif(enableProfilerTimer&&(workInProgress.mode&ProfileMode)!==NoMode){// Record the render duration for the fiber that errored.\nstopProfilerTimerIfRunningAndRecordDelta(workInProgress,false);// Include the time spent working on failed children before continuing.\nvar actualDuration=workInProgress.actualDuration;var child=workInProgress.child;while(child!==null){actualDuration+=child.actualDuration;child=child.sibling;}workInProgress.actualDuration=actualDuration;}if(_next!==null){// If completing this work spawned new work, do that next. We'll come\n// back here again.\n// Since we're restarting, remove anything that is not a host effect\n// from the effect tag.\n// TODO: The name stopFailedWorkTimer is misleading because Suspense\n// also captures and restarts.\nstopFailedWorkTimer(workInProgress);_next.effectTag&=HostEffectMask;return _next;}stopWorkTimer(workInProgress);if(returnFiber!==null){// Mark the parent fiber as incomplete and clear its effect list.\nreturnFiber.firstEffect=returnFiber.lastEffect=null;returnFiber.effectTag|=Incomplete;}}var siblingFiber=workInProgress.sibling;if(siblingFiber!==null){// If there is more work to do in this returnFiber, do that next.\nreturn siblingFiber;}// Otherwise, return to the parent\nworkInProgress=returnFiber;}while(workInProgress!==null);// We've reached the root.\nif(workInProgressRootExitStatus===RootIncomplete){workInProgressRootExitStatus=RootCompleted;}return null;}function resetChildExpirationTime(completedWork){if(renderExpirationTime!==Never&&completedWork.childExpirationTime===Never){// The children of this component are hidden. Don't bubble their\n// expiration times.\nreturn;}var newChildExpirationTime=NoWork;// Bubble up the earliest expiration time.\nif(enableProfilerTimer&&(completedWork.mode&ProfileMode)!==NoMode){// In profiling mode, resetChildExpirationTime is also used to reset\n// profiler durations.\nvar actualDuration=completedWork.actualDuration;var treeBaseDuration=completedWork.selfBaseDuration;// When a fiber is cloned, its actualDuration is reset to 0. This value will\n// only be updated if work is done on the fiber (i.e. it doesn't bailout).\n// When work is done, it should bubble to the parent's actualDuration. If\n// the fiber has not been cloned though, (meaning no work was done), then\n// this value will reflect the amount of time spent working on a previous\n// render. In that case it should not bubble. We determine whether it was\n// cloned by comparing the child pointer.\nvar shouldBubbleActualDurations=completedWork.alternate===null||completedWork.child!==completedWork.alternate.child;var child=completedWork.child;while(child!==null){var childUpdateExpirationTime=child.expirationTime;var childChildExpirationTime=child.childExpirationTime;if(childUpdateExpirationTime>newChildExpirationTime){newChildExpirationTime=childUpdateExpirationTime;}if(childChildExpirationTime>newChildExpirationTime){newChildExpirationTime=childChildExpirationTime;}if(shouldBubbleActualDurations){actualDuration+=child.actualDuration;}treeBaseDuration+=child.treeBaseDuration;child=child.sibling;}completedWork.actualDuration=actualDuration;completedWork.treeBaseDuration=treeBaseDuration;}else{var _child=completedWork.child;while(_child!==null){var _childUpdateExpirationTime=_child.expirationTime;var _childChildExpirationTime=_child.childExpirationTime;if(_childUpdateExpirationTime>newChildExpirationTime){newChildExpirationTime=_childUpdateExpirationTime;}if(_childChildExpirationTime>newChildExpirationTime){newChildExpirationTime=_childChildExpirationTime;}_child=_child.sibling;}}completedWork.childExpirationTime=newChildExpirationTime;}function commitRoot(root){var renderPriorityLevel=getCurrentPriorityLevel();runWithPriority(ImmediatePriority,commitRootImpl.bind(null,root,renderPriorityLevel));// If there are passive effects, schedule a callback to flush them. This goes\n// outside commitRootImpl so that it inherits the priority of the render.\nif(rootWithPendingPassiveEffects!==null){scheduleCallback(NormalPriority,function(){flushPassiveEffects();return null;});}return null;}function commitRootImpl(root,renderPriorityLevel){flushPassiveEffects();flushRenderPhaseStrictModeWarningsInDEV();(function(){if(!((executionContext&(RenderContext|CommitContext))===NoContext)){{throw ReactError(Error('Should not already be working.'));}}})();var finishedWork=root.finishedWork;var expirationTime=root.finishedExpirationTime;if(finishedWork===null){return null;}root.finishedWork=null;root.finishedExpirationTime=NoWork;(function(){if(!(finishedWork!==root.current)){{throw ReactError(Error('Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.'));}}})();// commitRoot never returns a continuation; it always finishes synchronously.\n// So we can clear these now to allow a new callback to be scheduled.\nroot.callbackNode=null;root.callbackExpirationTime=NoWork;startCommitTimer();// Update the first and last pending times on this root. The new first\n// pending time is whatever is left on the root fiber.\nvar updateExpirationTimeBeforeCommit=finishedWork.expirationTime;var childExpirationTimeBeforeCommit=finishedWork.childExpirationTime;var firstPendingTimeBeforeCommit=childExpirationTimeBeforeCommit>updateExpirationTimeBeforeCommit?childExpirationTimeBeforeCommit:updateExpirationTimeBeforeCommit;root.firstPendingTime=firstPendingTimeBeforeCommit;if(firstPendingTimeBeforeCommit<root.lastPendingTime){// This usually means we've finished all the work, but it can also happen\n// when something gets downprioritized during render, like a hidden tree.\nroot.lastPendingTime=firstPendingTimeBeforeCommit;}if(root===workInProgressRoot){// We can reset these now that they are finished.\nworkInProgressRoot=null;workInProgress=null;renderExpirationTime=NoWork;}else{}// This indicates that the last root we worked on is not the same one that\n// we're committing now. This most commonly happens when a suspended root\n// times out.\n// Get the list of effects.\nvar firstEffect=void 0;if(finishedWork.effectTag>PerformedWork){// A fiber's effect list consists only of its children, not itself. So if\n// the root has an effect, we need to add it to the end of the list. The\n// resulting list is the set that would belong to the root's parent, if it\n// had one; that is, all the effects in the tree including the root.\nif(finishedWork.lastEffect!==null){finishedWork.lastEffect.nextEffect=finishedWork;firstEffect=finishedWork.firstEffect;}else{firstEffect=finishedWork;}}else{// There is no effect on the root.\nfirstEffect=finishedWork.firstEffect;}if(firstEffect!==null){var prevExecutionContext=executionContext;executionContext|=CommitContext;var prevInteractions=null;if(enableSchedulerTracing){prevInteractions=tracing.__interactionsRef.current;tracing.__interactionsRef.current=root.memoizedInteractions;}// Reset this to null before calling lifecycles\nReactCurrentOwner$1.current=null;// The commit phase is broken into several sub-phases. We do a separate pass\n// of the effect list for each phase: all mutation effects come before all\n// layout effects, and so on.\n// The first phase a \"before mutation\" phase. We use this phase to read the\n// state of the host tree right before we mutate it. This is where\n// getSnapshotBeforeUpdate is called.\nstartCommitSnapshotEffectsTimer();prepareForCommit(root.containerInfo);nextEffect=firstEffect;do{{invokeGuardedCallback(null,commitBeforeMutationEffects,null);if(hasCaughtError()){(function(){if(!(nextEffect!==null)){{throw ReactError(Error('Should be working on an effect.'));}}})();var error=clearCaughtError();captureCommitPhaseError(nextEffect,error);nextEffect=nextEffect.nextEffect;}}}while(nextEffect!==null);stopCommitSnapshotEffectsTimer();if(enableProfilerTimer){// Mark the current commit time to be shared by all Profilers in this\n// batch. This enables them to be grouped later.\nrecordCommitTime();}// The next phase is the mutation phase, where we mutate the host tree.\nstartCommitHostEffectsTimer();nextEffect=firstEffect;do{{invokeGuardedCallback(null,commitMutationEffects,null,renderPriorityLevel);if(hasCaughtError()){(function(){if(!(nextEffect!==null)){{throw ReactError(Error('Should be working on an effect.'));}}})();var _error=clearCaughtError();captureCommitPhaseError(nextEffect,_error);nextEffect=nextEffect.nextEffect;}}}while(nextEffect!==null);stopCommitHostEffectsTimer();resetAfterCommit(root.containerInfo);// The work-in-progress tree is now the current tree. This must come after\n// the mutation phase, so that the previous tree is still current during\n// componentWillUnmount, but before the layout phase, so that the finished\n// work is current during componentDidMount/Update.\nroot.current=finishedWork;// The next phase is the layout phase, where we call effects that read\n// the host tree after it's been mutated. The idiomatic use case for this is\n// layout, but class component lifecycles also fire here for legacy reasons.\nstartCommitLifeCyclesTimer();nextEffect=firstEffect;do{{invokeGuardedCallback(null,commitLayoutEffects,null,root,expirationTime);if(hasCaughtError()){(function(){if(!(nextEffect!==null)){{throw ReactError(Error('Should be working on an effect.'));}}})();var _error2=clearCaughtError();captureCommitPhaseError(nextEffect,_error2);nextEffect=nextEffect.nextEffect;}}}while(nextEffect!==null);stopCommitLifeCyclesTimer();nextEffect=null;// Tell Scheduler to yield at the end of the frame, so the browser has an\n// opportunity to paint.\nrequestPaint();if(enableSchedulerTracing){tracing.__interactionsRef.current=prevInteractions;}executionContext=prevExecutionContext;}else{// No effects.\nroot.current=finishedWork;// Measure these anyway so the flamegraph explicitly shows that there were\n// no effects.\n// TODO: Maybe there's a better way to report this.\nstartCommitSnapshotEffectsTimer();stopCommitSnapshotEffectsTimer();if(enableProfilerTimer){recordCommitTime();}startCommitHostEffectsTimer();stopCommitHostEffectsTimer();startCommitLifeCyclesTimer();stopCommitLifeCyclesTimer();}stopCommitTimer();var rootDidHavePassiveEffects=rootDoesHavePassiveEffects;if(rootDoesHavePassiveEffects){// This commit has passive effects. Stash a reference to them. But don't\n// schedule a callback until after flushing layout work.\nrootDoesHavePassiveEffects=false;rootWithPendingPassiveEffects=root;pendingPassiveEffectsExpirationTime=expirationTime;pendingPassiveEffectsRenderPriority=renderPriorityLevel;}else{// We are done with the effect chain at this point so let's clear the\n// nextEffect pointers to assist with GC. If we have passive effects, we'll\n// clear this in flushPassiveEffects.\nnextEffect=firstEffect;while(nextEffect!==null){var nextNextEffect=nextEffect.nextEffect;nextEffect.nextEffect=null;nextEffect=nextNextEffect;}}// Check if there's remaining work on this root\nvar remainingExpirationTime=root.firstPendingTime;if(remainingExpirationTime!==NoWork){var currentTime=requestCurrentTime();var priorityLevel=inferPriorityFromExpirationTime(currentTime,remainingExpirationTime);if(enableSchedulerTracing){if(spawnedWorkDuringRender!==null){var expirationTimes=spawnedWorkDuringRender;spawnedWorkDuringRender=null;for(var i=0;i<expirationTimes.length;i++){scheduleInteractions(root,expirationTimes[i],root.memoizedInteractions);}}}scheduleCallbackForRoot(root,priorityLevel,remainingExpirationTime);}else{// If there's no remaining work, we can clear the set of already failed\n// error boundaries.\nlegacyErrorBoundariesThatAlreadyFailed=null;}if(enableSchedulerTracing){if(!rootDidHavePassiveEffects){// If there are no passive effects, then we can complete the pending interactions.\n// Otherwise, we'll wait until after the passive effects are flushed.\n// Wait to do this until after remaining work has been scheduled,\n// so that we don't prematurely signal complete for interactions when there's e.g. hidden work.\nfinishPendingInteractions(root,expirationTime);}}onCommitRoot(finishedWork.stateNode,expirationTime);if(remainingExpirationTime===Sync){// Count the number of times the root synchronously re-renders without\n// finishing. If there are too many, it indicates an infinite update loop.\nif(root===rootWithNestedUpdates){nestedUpdateCount++;}else{nestedUpdateCount=0;rootWithNestedUpdates=root;}}else{nestedUpdateCount=0;}if(hasUncaughtError){hasUncaughtError=false;var _error3=firstUncaughtError;firstUncaughtError=null;throw _error3;}if((executionContext&LegacyUnbatchedContext)!==NoContext){// This is a legacy edge case. We just committed the initial mount of\n// a ReactDOM.render-ed root inside of batchedUpdates. The commit fired\n// synchronously, but layout updates should be deferred until the end\n// of the batch.\nreturn null;}// If layout work was scheduled, flush it now.\nflushSyncCallbackQueue();return null;}function commitBeforeMutationEffects(){while(nextEffect!==null){if((nextEffect.effectTag&Snapshot)!==NoEffect){setCurrentFiber(nextEffect);recordEffect();var current$$1=nextEffect.alternate;commitBeforeMutationLifeCycles(current$$1,nextEffect);resetCurrentFiber();}nextEffect=nextEffect.nextEffect;}}function commitMutationEffects(renderPriorityLevel){// TODO: Should probably move the bulk of this function to commitWork.\nwhile(nextEffect!==null){setCurrentFiber(nextEffect);var effectTag=nextEffect.effectTag;if(effectTag&ContentReset){commitResetTextContent(nextEffect);}if(effectTag&Ref){var current$$1=nextEffect.alternate;if(current$$1!==null){commitDetachRef(current$$1);}}// The following switch statement is only concerned about placement,\n// updates, and deletions. To avoid needing to add a case for every possible\n// bitmap value, we remove the secondary effects from the effect tag and\n// switch on that value.\nvar primaryEffectTag=effectTag&(Placement|Update|Deletion);switch(primaryEffectTag){case Placement:{commitPlacement(nextEffect);// Clear the \"placement\" from effect tag so that we know that this is\n// inserted, before any life-cycles like componentDidMount gets called.\n// TODO: findDOMNode doesn't rely on this any more but isMounted does\n// and isMounted is deprecated anyway so we should be able to kill this.\nnextEffect.effectTag&=~Placement;break;}case PlacementAndUpdate:{// Placement\ncommitPlacement(nextEffect);// Clear the \"placement\" from effect tag so that we know that this is\n// inserted, before any life-cycles like componentDidMount gets called.\nnextEffect.effectTag&=~Placement;// Update\nvar _current=nextEffect.alternate;commitWork(_current,nextEffect);break;}case Update:{var _current2=nextEffect.alternate;commitWork(_current2,nextEffect);break;}case Deletion:{commitDeletion(nextEffect,renderPriorityLevel);break;}}// TODO: Only record a mutation effect if primaryEffectTag is non-zero.\nrecordEffect();resetCurrentFiber();nextEffect=nextEffect.nextEffect;}}function commitLayoutEffects(root,committedExpirationTime){// TODO: Should probably move the bulk of this function to commitWork.\nwhile(nextEffect!==null){setCurrentFiber(nextEffect);var effectTag=nextEffect.effectTag;if(effectTag&(Update|Callback)){recordEffect();var current$$1=nextEffect.alternate;commitLifeCycles(root,current$$1,nextEffect,committedExpirationTime);}if(effectTag&Ref){recordEffect();commitAttachRef(nextEffect);}if(effectTag&Passive){rootDoesHavePassiveEffects=true;}resetCurrentFiber();nextEffect=nextEffect.nextEffect;}}function flushPassiveEffects(){if(rootWithPendingPassiveEffects===null){return false;}var root=rootWithPendingPassiveEffects;var expirationTime=pendingPassiveEffectsExpirationTime;var renderPriorityLevel=pendingPassiveEffectsRenderPriority;rootWithPendingPassiveEffects=null;pendingPassiveEffectsExpirationTime=NoWork;pendingPassiveEffectsRenderPriority=NoPriority;var priorityLevel=renderPriorityLevel>NormalPriority?NormalPriority:renderPriorityLevel;return runWithPriority(priorityLevel,flushPassiveEffectsImpl.bind(null,root,expirationTime));}function flushPassiveEffectsImpl(root,expirationTime){var prevInteractions=null;if(enableSchedulerTracing){prevInteractions=tracing.__interactionsRef.current;tracing.__interactionsRef.current=root.memoizedInteractions;}(function(){if(!((executionContext&(RenderContext|CommitContext))===NoContext)){{throw ReactError(Error('Cannot flush passive effects while already rendering.'));}}})();var prevExecutionContext=executionContext;executionContext|=CommitContext;// Note: This currently assumes there are no passive effects on the root\n// fiber, because the root is not part of its own effect list. This could\n// change in the future.\nvar effect=root.current.firstEffect;while(effect!==null){{setCurrentFiber(effect);invokeGuardedCallback(null,commitPassiveHookEffects,null,effect);if(hasCaughtError()){(function(){if(!(effect!==null)){{throw ReactError(Error('Should be working on an effect.'));}}})();var error=clearCaughtError();captureCommitPhaseError(effect,error);}resetCurrentFiber();}var nextNextEffect=effect.nextEffect;// Remove nextEffect pointer to assist GC\neffect.nextEffect=null;effect=nextNextEffect;}if(enableSchedulerTracing){tracing.__interactionsRef.current=prevInteractions;finishPendingInteractions(root,expirationTime);}executionContext=prevExecutionContext;flushSyncCallbackQueue();// If additional passive effects were scheduled, increment a counter. If this\n// exceeds the limit, we'll fire a warning.\nnestedPassiveUpdateCount=rootWithPendingPassiveEffects===null?0:nestedPassiveUpdateCount+1;return true;}function isAlreadyFailedLegacyErrorBoundary(instance){return legacyErrorBoundariesThatAlreadyFailed!==null&&legacyErrorBoundariesThatAlreadyFailed.has(instance);}function markLegacyErrorBoundaryAsFailed(instance){if(legacyErrorBoundariesThatAlreadyFailed===null){legacyErrorBoundariesThatAlreadyFailed=new Set([instance]);}else{legacyErrorBoundariesThatAlreadyFailed.add(instance);}}function prepareToThrowUncaughtError(error){if(!hasUncaughtError){hasUncaughtError=true;firstUncaughtError=error;}}var onUncaughtError=prepareToThrowUncaughtError;function captureCommitPhaseErrorOnRoot(rootFiber,sourceFiber,error){var errorInfo=createCapturedValue(error,sourceFiber);var update=createRootErrorUpdate(rootFiber,errorInfo,Sync);enqueueUpdate(rootFiber,update);var root=markUpdateTimeFromFiberToRoot(rootFiber,Sync);if(root!==null){scheduleCallbackForRoot(root,ImmediatePriority,Sync);}}function captureCommitPhaseError(sourceFiber,error){if(sourceFiber.tag===HostRoot){// Error was thrown at the root. There is no parent, so the root\n// itself should capture it.\ncaptureCommitPhaseErrorOnRoot(sourceFiber,sourceFiber,error);return;}var fiber=sourceFiber.return;while(fiber!==null){if(fiber.tag===HostRoot){captureCommitPhaseErrorOnRoot(fiber,sourceFiber,error);return;}else if(fiber.tag===ClassComponent){var ctor=fiber.type;var instance=fiber.stateNode;if(typeof ctor.getDerivedStateFromError==='function'||typeof instance.componentDidCatch==='function'&&!isAlreadyFailedLegacyErrorBoundary(instance)){var errorInfo=createCapturedValue(error,sourceFiber);var update=createClassErrorUpdate(fiber,errorInfo,// TODO: This is always sync\nSync);enqueueUpdate(fiber,update);var root=markUpdateTimeFromFiberToRoot(fiber,Sync);if(root!==null){scheduleCallbackForRoot(root,ImmediatePriority,Sync);}return;}}fiber=fiber.return;}}function pingSuspendedRoot(root,thenable,suspendedTime){var pingCache=root.pingCache;if(pingCache!==null){// The thenable resolved, so we no longer need to memoize, because it will\n// never be thrown again.\npingCache.delete(thenable);}if(workInProgressRoot===root&&renderExpirationTime===suspendedTime){// Received a ping at the same priority level at which we're currently\n// rendering. We might want to restart this render. This should mirror\n// the logic of whether or not a root suspends once it completes.\n// TODO: If we're rendering sync either due to Sync, Batched or expired,\n// we should probably never restart.\n// If we're suspended with delay, we'll always suspend so we can always\n// restart. If we're suspended without any updates, it might be a retry.\n// If it's early in the retry we can restart. We can't know for sure\n// whether we'll eventually process an update during this render pass,\n// but it's somewhat unlikely that we get to a ping before that, since\n// getting to the root most update is usually very fast.\nif(workInProgressRootExitStatus===RootSuspendedWithDelay||workInProgressRootExitStatus===RootSuspended&&workInProgressRootLatestProcessedExpirationTime===Sync&&now$1()-globalMostRecentFallbackTime<FALLBACK_THROTTLE_MS){// Restart from the root. Don't need to schedule a ping because\n// we're already working on this tree.\nprepareFreshStack(root,renderExpirationTime);}else{// Even though we can't restart right now, we might get an\n// opportunity later. So we mark this render as having a ping.\nworkInProgressRootHasPendingPing=true;}return;}var lastPendingTime=root.lastPendingTime;if(lastPendingTime<suspendedTime){// The root is no longer suspended at this time.\nreturn;}var pingTime=root.pingTime;if(pingTime!==NoWork&&pingTime<suspendedTime){// There's already a lower priority ping scheduled.\nreturn;}// Mark the time at which this ping was scheduled.\nroot.pingTime=suspendedTime;if(root.finishedExpirationTime===suspendedTime){// If there's a pending fallback waiting to commit, throw it away.\nroot.finishedExpirationTime=NoWork;root.finishedWork=null;}var currentTime=requestCurrentTime();var priorityLevel=inferPriorityFromExpirationTime(currentTime,suspendedTime);scheduleCallbackForRoot(root,priorityLevel,suspendedTime);}function retryTimedOutBoundary(boundaryFiber){// The boundary fiber (a Suspense component or SuspenseList component)\n// previously was rendered in its fallback state. One of the promises that\n// suspended it has resolved, which means at least part of the tree was\n// likely unblocked. Try rendering again, at a new expiration time.\nvar currentTime=requestCurrentTime();var suspenseConfig=null;// Retries don't carry over the already committed update.\nvar retryTime=computeExpirationForFiber(currentTime,boundaryFiber,suspenseConfig);// TODO: Special case idle priority?\nvar priorityLevel=inferPriorityFromExpirationTime(currentTime,retryTime);var root=markUpdateTimeFromFiberToRoot(boundaryFiber,retryTime);if(root!==null){scheduleCallbackForRoot(root,priorityLevel,retryTime);}}function resolveRetryThenable(boundaryFiber,thenable){var retryCache=void 0;if(enableSuspenseServerRenderer){switch(boundaryFiber.tag){case SuspenseComponent:retryCache=boundaryFiber.stateNode;break;case DehydratedSuspenseComponent:retryCache=boundaryFiber.memoizedState;break;default:(function(){{{throw ReactError(Error('Pinged unknown suspense boundary type. This is probably a bug in React.'));}}})();}}else{retryCache=boundaryFiber.stateNode;}if(retryCache!==null){// The thenable resolved, so we no longer need to memoize, because it will\n// never be thrown again.\nretryCache.delete(thenable);}retryTimedOutBoundary(boundaryFiber);}// Computes the next Just Noticeable Difference (JND) boundary.\n// The theory is that a person can't tell the difference between small differences in time.\n// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\n// difference in the experience. However, waiting for longer might mean that we can avoid\n// showing an intermediate loading state. The longer we have already waited, the harder it\n// is to tell small differences in time. Therefore, the longer we've already waited,\n// the longer we can wait additionally. At some point we have to give up though.\n// We pick a train model where the next boundary commits at a consistent schedule.\n// These particular numbers are vague estimates. We expect to adjust them based on research.\nfunction jnd(timeElapsed){return timeElapsed<120?120:timeElapsed<480?480:timeElapsed<1080?1080:timeElapsed<1920?1920:timeElapsed<3000?3000:timeElapsed<4320?4320:ceil(timeElapsed/1960)*1960;}function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime,committedExpirationTime,suspenseConfig){var busyMinDurationMs=suspenseConfig.busyMinDurationMs|0;if(busyMinDurationMs<=0){return 0;}var busyDelayMs=suspenseConfig.busyDelayMs|0;// Compute the time until this render pass would expire.\nvar currentTimeMs=now$1();var eventTimeMs=inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime,suspenseConfig);var timeElapsed=currentTimeMs-eventTimeMs;if(timeElapsed<=busyDelayMs){// If we haven't yet waited longer than the initial delay, we don't\n// have to wait any additional time.\nreturn 0;}var msUntilTimeout=busyDelayMs+busyMinDurationMs-timeElapsed;// This is the value that is passed to `setTimeout`.\nreturn msUntilTimeout;}function checkForNestedUpdates(){if(nestedUpdateCount>NESTED_UPDATE_LIMIT){nestedUpdateCount=0;rootWithNestedUpdates=null;(function(){{{throw ReactError(Error('Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.'));}}})();}{if(nestedPassiveUpdateCount>NESTED_PASSIVE_UPDATE_LIMIT){nestedPassiveUpdateCount=0;warning$1(false,'Maximum update depth exceeded. This can happen when a component '+\"calls setState inside useEffect, but useEffect either doesn't \"+'have a dependency array, or one of the dependencies changes on '+'every render.');}}}function flushRenderPhaseStrictModeWarningsInDEV(){{ReactStrictModeWarnings.flushLegacyContextWarning();if(warnAboutDeprecatedLifecycles){ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();}}}function stopFinishedWorkLoopTimer(){var didCompleteRoot=true;stopWorkLoopTimer(interruptedBy,didCompleteRoot);interruptedBy=null;}function stopInterruptedWorkLoopTimer(){// TODO: Track which fiber caused the interruption.\nvar didCompleteRoot=false;stopWorkLoopTimer(interruptedBy,didCompleteRoot);interruptedBy=null;}function checkForInterruption(fiberThatReceivedUpdate,updateExpirationTime){if(enableUserTimingAPI&&workInProgressRoot!==null&&updateExpirationTime>renderExpirationTime){interruptedBy=fiberThatReceivedUpdate;}}var didWarnStateUpdateForUnmountedComponent=null;function warnAboutUpdateOnUnmountedFiberInDEV(fiber){{var tag=fiber.tag;if(tag!==HostRoot&&tag!==ClassComponent&&tag!==FunctionComponent&&tag!==ForwardRef&&tag!==MemoComponent&&tag!==SimpleMemoComponent){// Only warn for user-defined components, not internal ones like Suspense.\nreturn;}// We show the whole stack but dedupe on the top component's name because\n// the problematic code almost always lies inside that component.\nvar componentName=getComponentName(fiber.type)||'ReactComponent';if(didWarnStateUpdateForUnmountedComponent!==null){if(didWarnStateUpdateForUnmountedComponent.has(componentName)){return;}didWarnStateUpdateForUnmountedComponent.add(componentName);}else{didWarnStateUpdateForUnmountedComponent=new Set([componentName]);}warningWithoutStack$1(false,\"Can't perform a React state update on an unmounted component. This \"+'is a no-op, but it indicates a memory leak in your application. To '+'fix, cancel all subscriptions and asynchronous tasks in %s.%s',tag===ClassComponent?'the componentWillUnmount method':'a useEffect cleanup function',getStackByFiberInDevAndProd(fiber));}}var beginWork$$1=void 0;if( true&&replayFailedUnitOfWorkWithInvokeGuardedCallback){var dummyFiber=null;beginWork$$1=function beginWork$$1(current$$1,unitOfWork,expirationTime){// If a component throws an error, we replay it again in a synchronously\n// dispatched event, so that the debugger will treat it as an uncaught\n// error See ReactErrorUtils for more information.\n// Before entering the begin phase, copy the work-in-progress onto a dummy\n// fiber. If beginWork throws, we'll use this to reset the state.\nvar originalWorkInProgressCopy=assignFiberPropertiesInDEV(dummyFiber,unitOfWork);try{return beginWork$1(current$$1,unitOfWork,expirationTime);}catch(originalError){if(originalError!==null&&typeof originalError==='object'&&typeof originalError.then==='function'){// Don't replay promises. Treat everything else like an error.\nthrow originalError;}// Keep this code in sync with renderRoot; any changes here must have\n// corresponding changes there.\nresetContextDependencies();resetHooks();// Unwind the failed stack frame\nunwindInterruptedWork(unitOfWork);// Restore the original properties of the fiber.\nassignFiberPropertiesInDEV(unitOfWork,originalWorkInProgressCopy);if(enableProfilerTimer&&unitOfWork.mode&ProfileMode){// Reset the profiler timer.\nstartProfilerTimer(unitOfWork);}// Run beginWork again.\ninvokeGuardedCallback(null,beginWork$1,null,current$$1,unitOfWork,expirationTime);if(hasCaughtError()){var replayError=clearCaughtError();// `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.\n// Rethrow this error instead of the original one.\nthrow replayError;}else{// This branch is reachable if the render phase is impure.\nthrow originalError;}}};}else{beginWork$$1=beginWork$1;}var didWarnAboutUpdateInRender=false;var didWarnAboutUpdateInGetChildContext=false;function warnAboutInvalidUpdatesOnClassComponentsInDEV(fiber){{if(fiber.tag===ClassComponent){switch(phase){case'getChildContext':if(didWarnAboutUpdateInGetChildContext){return;}warningWithoutStack$1(false,'setState(...): Cannot call setState() inside getChildContext()');didWarnAboutUpdateInGetChildContext=true;break;case'render':if(didWarnAboutUpdateInRender){return;}warningWithoutStack$1(false,'Cannot update during an existing state transition (such as '+'within `render`). Render methods should be a pure function of '+'props and state.');didWarnAboutUpdateInRender=true;break;}}}}// a 'shared' variable that changes when act() opens/closes in tests.\nvar IsThisRendererActing={current:false};function warnIfNotScopedWithMatchingAct(fiber){{if(warnsIfNotActing===true&&IsSomeRendererActing.current===true&&IsThisRendererActing.current!==true){warningWithoutStack$1(false,\"It looks like you're using the wrong act() around your test interactions.\\n\"+'Be sure to use the matching version of act() corresponding to your renderer:\\n\\n'+'// for react-dom:\\n'+\"import {act} from 'react-dom/test-utils';\\n\"+'//...\\n'+'act(() => ...);\\n\\n'+'// for react-test-renderer:\\n'+\"import TestRenderer from 'react-test-renderer';\\n\"+'const {act} = TestRenderer;\\n'+'//...\\n'+'act(() => ...);'+'%s',getStackByFiberInDevAndProd(fiber));}}}function warnIfNotCurrentlyActingEffectsInDEV(fiber){{if(warnsIfNotActing===true&&(fiber.mode&StrictMode)!==NoMode&&IsSomeRendererActing.current===false&&IsThisRendererActing.current===false){warningWithoutStack$1(false,'An update to %s ran an effect, but was not wrapped in act(...).\\n\\n'+'When testing, code that causes React state updates should be '+'wrapped into act(...):\\n\\n'+'act(() => {\\n'+'  /* fire events that update state */\\n'+'});\\n'+'/* assert on the output */\\n\\n'+\"This ensures that you're testing the behavior the user would see \"+'in the browser.'+' Learn more at https://fb.me/react-wrap-tests-with-act'+'%s',getComponentName(fiber.type),getStackByFiberInDevAndProd(fiber));}}}function warnIfNotCurrentlyActingUpdatesInDEV(fiber){{if(warnsIfNotActing===true&&executionContext===NoContext&&IsSomeRendererActing.current===false&&IsThisRendererActing.current===false){warningWithoutStack$1(false,'An update to %s inside a test was not wrapped in act(...).\\n\\n'+'When testing, code that causes React state updates should be '+'wrapped into act(...):\\n\\n'+'act(() => {\\n'+'  /* fire events that update state */\\n'+'});\\n'+'/* assert on the output */\\n\\n'+\"This ensures that you're testing the behavior the user would see \"+'in the browser.'+' Learn more at https://fb.me/react-wrap-tests-with-act'+'%s',getComponentName(fiber.type),getStackByFiberInDevAndProd(fiber));}}}var warnIfNotCurrentlyActingUpdatesInDev=warnIfNotCurrentlyActingUpdatesInDEV;// In tests, we want to enforce a mocked scheduler.\nvar didWarnAboutUnmockedScheduler=false;// TODO Before we release concurrent mode, revisit this and decide whether a mocked\n// scheduler is the actual recommendation. The alternative could be a testing build,\n// a new lib, or whatever; we dunno just yet. This message is for early adopters\n// to get their tests right.\nfunction warnIfUnmockedScheduler(fiber){{if(didWarnAboutUnmockedScheduler===false&&Scheduler.unstable_flushAllWithoutAsserting===undefined){if(fiber.mode&BatchedMode||fiber.mode&ConcurrentMode){didWarnAboutUnmockedScheduler=true;warningWithoutStack$1(false,'In Concurrent or Sync modes, the \"scheduler\" module needs to be mocked '+'to guarantee consistent behaviour across tests and browsers. '+'For example, with jest: \\n'+\"jest.mock('scheduler', () => require('scheduler/unstable_mock'));\\n\\n\"+'For more info, visit https://fb.me/react-mock-scheduler');}else if(warnAboutUnmockedScheduler===true){didWarnAboutUnmockedScheduler=true;warningWithoutStack$1(false,'Starting from React v17, the \"scheduler\" module will need to be mocked '+'to guarantee consistent behaviour across tests and browsers. '+'For example, with jest: \\n'+\"jest.mock('scheduler', () => require('scheduler/unstable_mock'));\\n\\n\"+'For more info, visit https://fb.me/react-mock-scheduler');}}}}var componentsThatTriggeredHighPriSuspend=null;function checkForWrongSuspensePriorityInDEV(sourceFiber){{var currentPriorityLevel=getCurrentPriorityLevel();if((sourceFiber.mode&ConcurrentMode)!==NoEffect&&(currentPriorityLevel===UserBlockingPriority||currentPriorityLevel===ImmediatePriority)){var workInProgressNode=sourceFiber;while(workInProgressNode!==null){// Add the component that triggered the suspense\nvar current$$1=workInProgressNode.alternate;if(current$$1!==null){// TODO: warn component that triggers the high priority\n// suspend is the HostRoot\nswitch(workInProgressNode.tag){case ClassComponent:// Loop through the component's update queue and see whether the component\n// has triggered any high priority updates\nvar updateQueue=current$$1.updateQueue;if(updateQueue!==null){var update=updateQueue.firstUpdate;while(update!==null){var priorityLevel=update.priority;if(priorityLevel===UserBlockingPriority||priorityLevel===ImmediatePriority){if(componentsThatTriggeredHighPriSuspend===null){componentsThatTriggeredHighPriSuspend=new Set([getComponentName(workInProgressNode.type)]);}else{componentsThatTriggeredHighPriSuspend.add(getComponentName(workInProgressNode.type));}break;}update=update.next;}}break;case FunctionComponent:case ForwardRef:case SimpleMemoComponent:if(workInProgressNode.memoizedState!==null&&workInProgressNode.memoizedState.baseUpdate!==null){var _update=workInProgressNode.memoizedState.baseUpdate;// Loop through the functional component's memoized state to see whether\n// the component has triggered any high pri updates\nwhile(_update!==null){var priority=_update.priority;if(priority===UserBlockingPriority||priority===ImmediatePriority){if(componentsThatTriggeredHighPriSuspend===null){componentsThatTriggeredHighPriSuspend=new Set([getComponentName(workInProgressNode.type)]);}else{componentsThatTriggeredHighPriSuspend.add(getComponentName(workInProgressNode.type));}break;}if(_update.next===workInProgressNode.memoizedState.baseUpdate){break;}_update=_update.next;}}break;default:break;}}workInProgressNode=workInProgressNode.return;}}}}function flushSuspensePriorityWarningInDEV(){{if(componentsThatTriggeredHighPriSuspend!==null){var componentNames=[];componentsThatTriggeredHighPriSuspend.forEach(function(name){return componentNames.push(name);});componentsThatTriggeredHighPriSuspend=null;if(componentNames.length>0){warningWithoutStack$1(false,'%s triggered a user-blocking update that suspended.'+'\\n\\n'+'The fix is to split the update into multiple parts: a user-blocking '+'update to provide immediate feedback, and another update that '+'triggers the bulk of the changes.'+'\\n\\n'+'Refer to the documentation for useSuspenseTransition to learn how '+'to implement this pattern.',// TODO: Add link to React docs with more information, once it exists\ncomponentNames.sort().join(', '));}}}}function computeThreadID(root,expirationTime){// Interaction threads are unique per root and expiration time.\nreturn expirationTime*1000+root.interactionThreadID;}function markSpawnedWork(expirationTime){if(!enableSchedulerTracing){return;}if(spawnedWorkDuringRender===null){spawnedWorkDuringRender=[expirationTime];}else{spawnedWorkDuringRender.push(expirationTime);}}function scheduleInteractions(root,expirationTime,interactions){if(!enableSchedulerTracing){return;}if(interactions.size>0){var pendingInteractionMap=root.pendingInteractionMap;var pendingInteractions=pendingInteractionMap.get(expirationTime);if(pendingInteractions!=null){interactions.forEach(function(interaction){if(!pendingInteractions.has(interaction)){// Update the pending async work count for previously unscheduled interaction.\ninteraction.__count++;}pendingInteractions.add(interaction);});}else{pendingInteractionMap.set(expirationTime,new Set(interactions));// Update the pending async work count for the current interactions.\ninteractions.forEach(function(interaction){interaction.__count++;});}var subscriber=tracing.__subscriberRef.current;if(subscriber!==null){var threadID=computeThreadID(root,expirationTime);subscriber.onWorkScheduled(interactions,threadID);}}}function schedulePendingInteractions(root,expirationTime){// This is called when work is scheduled on a root.\n// It associates the current interactions with the newly-scheduled expiration.\n// They will be restored when that expiration is later committed.\nif(!enableSchedulerTracing){return;}scheduleInteractions(root,expirationTime,tracing.__interactionsRef.current);}function startWorkOnPendingInteractions(root,expirationTime){// This is called when new work is started on a root.\nif(!enableSchedulerTracing){return;}// Determine which interactions this batch of work currently includes, So that\n// we can accurately attribute time spent working on it, And so that cascading\n// work triggered during the render phase will be associated with it.\nvar interactions=new Set();root.pendingInteractionMap.forEach(function(scheduledInteractions,scheduledExpirationTime){if(scheduledExpirationTime>=expirationTime){scheduledInteractions.forEach(function(interaction){return interactions.add(interaction);});}});// Store the current set of interactions on the FiberRoot for a few reasons:\n// We can re-use it in hot functions like renderRoot() without having to\n// recalculate it. We will also use it in commitWork() to pass to any Profiler\n// onRender() hooks. This also provides DevTools with a way to access it when\n// the onCommitRoot() hook is called.\nroot.memoizedInteractions=interactions;if(interactions.size>0){var subscriber=tracing.__subscriberRef.current;if(subscriber!==null){var threadID=computeThreadID(root,expirationTime);try{subscriber.onWorkStarted(interactions,threadID);}catch(error){// If the subscriber throws, rethrow it in a separate task\nscheduleCallback(ImmediatePriority,function(){throw error;});}}}}function finishPendingInteractions(root,committedExpirationTime){if(!enableSchedulerTracing){return;}var earliestRemainingTimeAfterCommit=root.firstPendingTime;var subscriber=void 0;try{subscriber=tracing.__subscriberRef.current;if(subscriber!==null&&root.memoizedInteractions.size>0){var threadID=computeThreadID(root,committedExpirationTime);subscriber.onWorkStopped(root.memoizedInteractions,threadID);}}catch(error){// If the subscriber throws, rethrow it in a separate task\nscheduleCallback(ImmediatePriority,function(){throw error;});}finally{// Clear completed interactions from the pending Map.\n// Unless the render was suspended or cascading work was scheduled,\n// In which case\\u2013 leave pending interactions until the subsequent render.\nvar pendingInteractionMap=root.pendingInteractionMap;pendingInteractionMap.forEach(function(scheduledInteractions,scheduledExpirationTime){// Only decrement the pending interaction count if we're done.\n// If there's still work at the current priority,\n// That indicates that we are waiting for suspense data.\nif(scheduledExpirationTime>earliestRemainingTimeAfterCommit){pendingInteractionMap.delete(scheduledExpirationTime);scheduledInteractions.forEach(function(interaction){interaction.__count--;if(subscriber!==null&&interaction.__count===0){try{subscriber.onInteractionScheduledWorkCompleted(interaction);}catch(error){// If the subscriber throws, rethrow it in a separate task\nscheduleCallback(ImmediatePriority,function(){throw error;});}}});}});}}var onCommitFiberRoot=null;var onCommitFiberUnmount=null;var hasLoggedError=false;var isDevToolsPresent=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__!=='undefined';function injectInternals(internals){if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__==='undefined'){// No DevTools\nreturn false;}var hook=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(hook.isDisabled){// This isn't a real property on the hook, but it can be set to opt out\n// of DevTools integration and associated warnings and logs.\n// https://github.com/facebook/react/issues/3877\nreturn true;}if(!hook.supportsFiber){{warningWithoutStack$1(false,'The installed version of React DevTools is too old and will not work '+'with the current version of React. Please update React DevTools. '+'https://fb.me/react-devtools');}// DevTools exists, even though it doesn't support Fiber.\nreturn true;}try{var rendererID=hook.inject(internals);// We have successfully injected, so now it is safe to set up hooks.\nonCommitFiberRoot=function onCommitFiberRoot(root,expirationTime){try{var didError=(root.current.effectTag&DidCapture)===DidCapture;if(enableProfilerTimer){var currentTime=requestCurrentTime();var priorityLevel=inferPriorityFromExpirationTime(currentTime,expirationTime);hook.onCommitFiberRoot(rendererID,root,priorityLevel,didError);}else{hook.onCommitFiberRoot(rendererID,root,undefined,didError);}}catch(err){if( true&&!hasLoggedError){hasLoggedError=true;warningWithoutStack$1(false,'React DevTools encountered an error: %s',err);}}};onCommitFiberUnmount=function onCommitFiberUnmount(fiber){try{hook.onCommitFiberUnmount(rendererID,fiber);}catch(err){if( true&&!hasLoggedError){hasLoggedError=true;warningWithoutStack$1(false,'React DevTools encountered an error: %s',err);}}};}catch(err){// Catch all errors because it is unsafe to throw during initialization.\n{warningWithoutStack$1(false,'React DevTools encountered an error: %s.',err);}}// DevTools exists\nreturn true;}function onCommitRoot(root,expirationTime){if(typeof onCommitFiberRoot==='function'){onCommitFiberRoot(root,expirationTime);}}function onCommitUnmount(fiber){if(typeof onCommitFiberUnmount==='function'){onCommitFiberUnmount(fiber);}}var hasBadMapPolyfill=void 0;{hasBadMapPolyfill=false;try{var nonExtensibleObject=Object.preventExtensions({});var testMap=new Map([[nonExtensibleObject,null]]);var testSet=new Set([nonExtensibleObject]);// This is necessary for Rollup to not consider these unused.\n// https://github.com/rollup/rollup/issues/1771\n// TODO: we can remove these if Rollup fixes the bug.\ntestMap.set(0,0);testSet.add(0);}catch(e){// TODO: Consider warning about bad polyfills\nhasBadMapPolyfill=true;}}// A Fiber is work on a Component that needs to be done or was done. There can\n// be more than one per component.\nvar debugCounter=void 0;{debugCounter=1;}function FiberNode(tag,pendingProps,key,mode){// Instance\nthis.tag=tag;this.key=key;this.elementType=null;this.type=null;this.stateNode=null;// Fiber\nthis.return=null;this.child=null;this.sibling=null;this.index=0;this.ref=null;this.pendingProps=pendingProps;this.memoizedProps=null;this.updateQueue=null;this.memoizedState=null;this.dependencies=null;this.mode=mode;// Effects\nthis.effectTag=NoEffect;this.nextEffect=null;this.firstEffect=null;this.lastEffect=null;this.expirationTime=NoWork;this.childExpirationTime=NoWork;this.alternate=null;if(enableProfilerTimer){// Note: The following is done to avoid a v8 performance cliff.\n//\n// Initializing the fields below to smis and later updating them with\n// double values will cause Fibers to end up having separate shapes.\n// This behavior/bug has something to do with Object.preventExtension().\n// Fortunately this only impacts DEV builds.\n// Unfortunately it makes React unusably slow for some applications.\n// To work around this, initialize the fields below with doubles.\n//\n// Learn more about this here:\n// https://github.com/facebook/react/issues/14365\n// https://bugs.chromium.org/p/v8/issues/detail?id=8538\nthis.actualDuration=Number.NaN;this.actualStartTime=Number.NaN;this.selfBaseDuration=Number.NaN;this.treeBaseDuration=Number.NaN;// It's okay to replace the initial doubles with smis after initialization.\n// This won't trigger the performance cliff mentioned above,\n// and it simplifies other profiler code (including DevTools).\nthis.actualDuration=0;this.actualStartTime=-1;this.selfBaseDuration=0;this.treeBaseDuration=0;}{this._debugID=debugCounter++;this._debugSource=null;this._debugOwner=null;this._debugIsCurrentlyTiming=false;this._debugNeedsRemount=false;this._debugHookTypes=null;if(!hasBadMapPolyfill&&typeof Object.preventExtensions==='function'){Object.preventExtensions(this);}}}// This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\nvar createFiber=function createFiber(tag,pendingProps,key,mode){// $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\nreturn new FiberNode(tag,pendingProps,key,mode);};function shouldConstruct(Component){var prototype=Component.prototype;return!!(prototype&&prototype.isReactComponent);}function isSimpleFunctionComponent(type){return typeof type==='function'&&!shouldConstruct(type)&&type.defaultProps===undefined;}function resolveLazyComponentTag(Component){if(typeof Component==='function'){return shouldConstruct(Component)?ClassComponent:FunctionComponent;}else if(Component!==undefined&&Component!==null){var $$typeof=Component.$$typeof;if($$typeof===REACT_FORWARD_REF_TYPE){return ForwardRef;}if($$typeof===REACT_MEMO_TYPE){return MemoComponent;}}return IndeterminateComponent;}// This is used to create an alternate fiber to do work on.\nfunction createWorkInProgress(current,pendingProps,expirationTime){var workInProgress=current.alternate;if(workInProgress===null){// We use a double buffering pooling technique because we know that we'll\n// only ever need at most two versions of a tree. We pool the \"other\" unused\n// node that we're free to reuse. This is lazily created to avoid allocating\n// extra objects for things that are never updated. It also allow us to\n// reclaim the extra memory if needed.\nworkInProgress=createFiber(current.tag,pendingProps,current.key,current.mode);workInProgress.elementType=current.elementType;workInProgress.type=current.type;workInProgress.stateNode=current.stateNode;{// DEV-only fields\nworkInProgress._debugID=current._debugID;workInProgress._debugSource=current._debugSource;workInProgress._debugOwner=current._debugOwner;workInProgress._debugHookTypes=current._debugHookTypes;}workInProgress.alternate=current;current.alternate=workInProgress;}else{workInProgress.pendingProps=pendingProps;// We already have an alternate.\n// Reset the effect tag.\nworkInProgress.effectTag=NoEffect;// The effect list is no longer valid.\nworkInProgress.nextEffect=null;workInProgress.firstEffect=null;workInProgress.lastEffect=null;if(enableProfilerTimer){// We intentionally reset, rather than copy, actualDuration & actualStartTime.\n// This prevents time from endlessly accumulating in new commits.\n// This has the downside of resetting values for different priority renders,\n// But works for yielding (the common case) and should support resuming.\nworkInProgress.actualDuration=0;workInProgress.actualStartTime=-1;}}workInProgress.childExpirationTime=current.childExpirationTime;workInProgress.expirationTime=current.expirationTime;workInProgress.child=current.child;workInProgress.memoizedProps=current.memoizedProps;workInProgress.memoizedState=current.memoizedState;workInProgress.updateQueue=current.updateQueue;// Clone the dependencies object. This is mutated during the render phase, so\n// it cannot be shared with the current fiber.\nvar currentDependencies=current.dependencies;workInProgress.dependencies=currentDependencies===null?null:{expirationTime:currentDependencies.expirationTime,firstContext:currentDependencies.firstContext,responders:currentDependencies.responders};// These will be overridden during the parent's reconciliation\nworkInProgress.sibling=current.sibling;workInProgress.index=current.index;workInProgress.ref=current.ref;if(enableProfilerTimer){workInProgress.selfBaseDuration=current.selfBaseDuration;workInProgress.treeBaseDuration=current.treeBaseDuration;}{workInProgress._debugNeedsRemount=current._debugNeedsRemount;switch(workInProgress.tag){case IndeterminateComponent:case FunctionComponent:case SimpleMemoComponent:workInProgress.type=resolveFunctionForHotReloading(current.type);break;case ClassComponent:workInProgress.type=resolveClassForHotReloading(current.type);break;case ForwardRef:workInProgress.type=resolveForwardRefForHotReloading(current.type);break;default:break;}}return workInProgress;}// Used to reuse a Fiber for a second pass.\nfunction resetWorkInProgress(workInProgress,renderExpirationTime){// This resets the Fiber to what createFiber or createWorkInProgress would\n// have set the values to before during the first pass. Ideally this wouldn't\n// be necessary but unfortunately many code paths reads from the workInProgress\n// when they should be reading from current and writing to workInProgress.\n// We assume pendingProps, index, key, ref, return are still untouched to\n// avoid doing another reconciliation.\n// Reset the effect tag but keep any Placement tags, since that's something\n// that child fiber is setting, not the reconciliation.\nworkInProgress.effectTag&=Placement;// The effect list is no longer valid.\nworkInProgress.nextEffect=null;workInProgress.firstEffect=null;workInProgress.lastEffect=null;var current=workInProgress.alternate;if(current===null){// Reset to createFiber's initial values.\nworkInProgress.childExpirationTime=NoWork;workInProgress.expirationTime=renderExpirationTime;workInProgress.child=null;workInProgress.memoizedProps=null;workInProgress.memoizedState=null;workInProgress.updateQueue=null;workInProgress.dependencies=null;if(enableProfilerTimer){// Note: We don't reset the actualTime counts. It's useful to accumulate\n// actual time across multiple render passes.\nworkInProgress.selfBaseDuration=0;workInProgress.treeBaseDuration=0;}}else{// Reset to the cloned values that createWorkInProgress would've.\nworkInProgress.childExpirationTime=current.childExpirationTime;workInProgress.expirationTime=current.expirationTime;workInProgress.child=current.child;workInProgress.memoizedProps=current.memoizedProps;workInProgress.memoizedState=current.memoizedState;workInProgress.updateQueue=current.updateQueue;// Clone the dependencies object. This is mutated during the render phase, so\n// it cannot be shared with the current fiber.\nvar currentDependencies=current.dependencies;workInProgress.dependencies=currentDependencies===null?null:{expirationTime:currentDependencies.expirationTime,firstContext:currentDependencies.firstContext,responders:currentDependencies.responders};if(enableProfilerTimer){// Note: We don't reset the actualTime counts. It's useful to accumulate\n// actual time across multiple render passes.\nworkInProgress.selfBaseDuration=current.selfBaseDuration;workInProgress.treeBaseDuration=current.treeBaseDuration;}}return workInProgress;}function createHostRootFiber(tag){var mode=void 0;if(tag===ConcurrentRoot){mode=ConcurrentMode|BatchedMode|StrictMode;}else if(tag===BatchedRoot){mode=BatchedMode|StrictMode;}else{mode=NoMode;}if(enableProfilerTimer&&isDevToolsPresent){// Always collect profile timings when DevTools are present.\n// This enables DevTools to start capturing timing at any point\\u2013\n// Without some nodes in the tree having empty base times.\nmode|=ProfileMode;}return createFiber(HostRoot,null,null,mode);}function createFiberFromTypeAndProps(type,// React$ElementType\nkey,pendingProps,owner,mode,expirationTime){var fiber=void 0;var fiberTag=IndeterminateComponent;// The resolved type is set if we know what the final type will be. I.e. it's not lazy.\nvar resolvedType=type;if(typeof type==='function'){if(shouldConstruct(type)){fiberTag=ClassComponent;{resolvedType=resolveClassForHotReloading(resolvedType);}}else{{resolvedType=resolveFunctionForHotReloading(resolvedType);}}}else if(typeof type==='string'){fiberTag=HostComponent;}else{getTag:switch(type){case REACT_FRAGMENT_TYPE:return createFiberFromFragment(pendingProps.children,mode,expirationTime,key);case REACT_CONCURRENT_MODE_TYPE:fiberTag=Mode;mode|=ConcurrentMode|BatchedMode|StrictMode;break;case REACT_STRICT_MODE_TYPE:fiberTag=Mode;mode|=StrictMode;break;case REACT_PROFILER_TYPE:return createFiberFromProfiler(pendingProps,mode,expirationTime,key);case REACT_SUSPENSE_TYPE:return createFiberFromSuspense(pendingProps,mode,expirationTime,key);case REACT_SUSPENSE_LIST_TYPE:return createFiberFromSuspenseList(pendingProps,mode,expirationTime,key);default:{if(typeof type==='object'&&type!==null){switch(type.$$typeof){case REACT_PROVIDER_TYPE:fiberTag=ContextProvider;break getTag;case REACT_CONTEXT_TYPE:// This is a consumer\nfiberTag=ContextConsumer;break getTag;case REACT_FORWARD_REF_TYPE:fiberTag=ForwardRef;{resolvedType=resolveForwardRefForHotReloading(resolvedType);}break getTag;case REACT_MEMO_TYPE:fiberTag=MemoComponent;break getTag;case REACT_LAZY_TYPE:fiberTag=LazyComponent;resolvedType=null;break getTag;case REACT_FUNDAMENTAL_TYPE:if(enableFundamentalAPI){return createFiberFromFundamental(type,pendingProps,mode,expirationTime,key);}break;}}var info='';{if(type===undefined||typeof type==='object'&&type!==null&&Object.keys(type).length===0){info+=' You likely forgot to export your component from the file '+\"it's defined in, or you might have mixed up default and \"+'named imports.';}var ownerName=owner?getComponentName(owner.type):null;if(ownerName){info+='\\n\\nCheck the render method of `'+ownerName+'`.';}}(function(){{{throw ReactError(Error('Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: '+(type==null?type:typeof type)+'.'+info));}}})();}}}fiber=createFiber(fiberTag,pendingProps,key,mode);fiber.elementType=type;fiber.type=resolvedType;fiber.expirationTime=expirationTime;return fiber;}function createFiberFromElement(element,mode,expirationTime){var owner=null;{owner=element._owner;}var type=element.type;var key=element.key;var pendingProps=element.props;var fiber=createFiberFromTypeAndProps(type,key,pendingProps,owner,mode,expirationTime);{fiber._debugSource=element._source;fiber._debugOwner=element._owner;}return fiber;}function createFiberFromFragment(elements,mode,expirationTime,key){var fiber=createFiber(Fragment,elements,key,mode);fiber.expirationTime=expirationTime;return fiber;}function createFiberFromFundamental(fundamentalComponent,pendingProps,mode,expirationTime,key){var fiber=createFiber(FundamentalComponent,pendingProps,key,mode);fiber.elementType=fundamentalComponent;fiber.type=fundamentalComponent;fiber.expirationTime=expirationTime;return fiber;}function createFiberFromProfiler(pendingProps,mode,expirationTime,key){{if(typeof pendingProps.id!=='string'||typeof pendingProps.onRender!=='function'){warningWithoutStack$1(false,'Profiler must specify an \"id\" string and \"onRender\" function as props');}}var fiber=createFiber(Profiler,pendingProps,key,mode|ProfileMode);// TODO: The Profiler fiber shouldn't have a type. It has a tag.\nfiber.elementType=REACT_PROFILER_TYPE;fiber.type=REACT_PROFILER_TYPE;fiber.expirationTime=expirationTime;return fiber;}function createFiberFromSuspense(pendingProps,mode,expirationTime,key){var fiber=createFiber(SuspenseComponent,pendingProps,key,mode);// TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.\n// This needs to be fixed in getComponentName so that it relies on the tag\n// instead.\nfiber.type=REACT_SUSPENSE_TYPE;fiber.elementType=REACT_SUSPENSE_TYPE;fiber.expirationTime=expirationTime;return fiber;}function createFiberFromSuspenseList(pendingProps,mode,expirationTime,key){var fiber=createFiber(SuspenseListComponent,pendingProps,key,mode);{// TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.\n// This needs to be fixed in getComponentName so that it relies on the tag\n// instead.\nfiber.type=REACT_SUSPENSE_LIST_TYPE;}fiber.elementType=REACT_SUSPENSE_LIST_TYPE;fiber.expirationTime=expirationTime;return fiber;}function createFiberFromText(content,mode,expirationTime){var fiber=createFiber(HostText,content,null,mode);fiber.expirationTime=expirationTime;return fiber;}function createFiberFromHostInstanceForDeletion(){var fiber=createFiber(HostComponent,null,null,NoMode);// TODO: These should not need a type.\nfiber.elementType='DELETED';fiber.type='DELETED';return fiber;}function createFiberFromPortal(portal,mode,expirationTime){var pendingProps=portal.children!==null?portal.children:[];var fiber=createFiber(HostPortal,pendingProps,portal.key,mode);fiber.expirationTime=expirationTime;fiber.stateNode={containerInfo:portal.containerInfo,pendingChildren:null,// Used by persistent updates\nimplementation:portal.implementation};return fiber;}// Used for stashing WIP properties to replay failed work in DEV.\nfunction assignFiberPropertiesInDEV(target,source){if(target===null){// This Fiber's initial properties will always be overwritten.\n// We only use a Fiber to ensure the same hidden class so DEV isn't slow.\ntarget=createFiber(IndeterminateComponent,null,null,NoMode);}// This is intentionally written as a list of all properties.\n// We tried to use Object.assign() instead but this is called in\n// the hottest path, and Object.assign() was too slow:\n// https://github.com/facebook/react/issues/12502\n// This code is DEV-only so size is not a concern.\ntarget.tag=source.tag;target.key=source.key;target.elementType=source.elementType;target.type=source.type;target.stateNode=source.stateNode;target.return=source.return;target.child=source.child;target.sibling=source.sibling;target.index=source.index;target.ref=source.ref;target.pendingProps=source.pendingProps;target.memoizedProps=source.memoizedProps;target.updateQueue=source.updateQueue;target.memoizedState=source.memoizedState;target.dependencies=source.dependencies;target.mode=source.mode;target.effectTag=source.effectTag;target.nextEffect=source.nextEffect;target.firstEffect=source.firstEffect;target.lastEffect=source.lastEffect;target.expirationTime=source.expirationTime;target.childExpirationTime=source.childExpirationTime;target.alternate=source.alternate;if(enableProfilerTimer){target.actualDuration=source.actualDuration;target.actualStartTime=source.actualStartTime;target.selfBaseDuration=source.selfBaseDuration;target.treeBaseDuration=source.treeBaseDuration;}target._debugID=source._debugID;target._debugSource=source._debugSource;target._debugOwner=source._debugOwner;target._debugIsCurrentlyTiming=source._debugIsCurrentlyTiming;target._debugNeedsRemount=source._debugNeedsRemount;target._debugHookTypes=source._debugHookTypes;return target;}// TODO: This should be lifted into the renderer.\n// The following attributes are only used by interaction tracing builds.\n// They enable interactions to be associated with their async work,\n// And expose interaction metadata to the React DevTools Profiler plugin.\n// Note that these attributes are only defined when the enableSchedulerTracing flag is enabled.\n// Exported FiberRoot type includes all properties,\n// To avoid requiring potentially error-prone :any casts throughout the project.\n// Profiling properties are only safe to access in profiling builds (when enableSchedulerTracing is true).\n// The types are defined separately within this file to ensure they stay in sync.\n// (We don't have to use an inline :any cast when enableSchedulerTracing is disabled.)\nfunction FiberRootNode(containerInfo,tag,hydrate){this.tag=tag;this.current=null;this.containerInfo=containerInfo;this.pendingChildren=null;this.pingCache=null;this.finishedExpirationTime=NoWork;this.finishedWork=null;this.timeoutHandle=noTimeout;this.context=null;this.pendingContext=null;this.hydrate=hydrate;this.firstBatch=null;this.callbackNode=null;this.callbackExpirationTime=NoWork;this.firstPendingTime=NoWork;this.lastPendingTime=NoWork;this.pingTime=NoWork;if(enableSchedulerTracing){this.interactionThreadID=tracing.unstable_getThreadID();this.memoizedInteractions=new Set();this.pendingInteractionMap=new Map();}}function createFiberRoot(containerInfo,tag,hydrate){var root=new FiberRootNode(containerInfo,tag,hydrate);// Cyclic construction. This cheats the type system right now because\n// stateNode is any.\nvar uninitializedFiber=createHostRootFiber(tag);root.current=uninitializedFiber;uninitializedFiber.stateNode=root;return root;}// This lets us hook into Fiber to debug what it's doing.\n// See https://github.com/facebook/react/pull/8033.\n// This is not part of the public API, not even for React DevTools.\n// You may only inject a debugTool if you work on React Fiber itself.\nvar ReactFiberInstrumentation={debugTool:null};var ReactFiberInstrumentation_1=ReactFiberInstrumentation;// 0 is PROD, 1 is DEV.\n// Might add PROFILE later.\nvar didWarnAboutNestedUpdates=void 0;var didWarnAboutFindNodeInStrictMode=void 0;{didWarnAboutNestedUpdates=false;didWarnAboutFindNodeInStrictMode={};}function getContextForSubtree(parentComponent){if(!parentComponent){return emptyContextObject;}var fiber=get(parentComponent);var parentContext=findCurrentUnmaskedContext(fiber);if(fiber.tag===ClassComponent){var Component=fiber.type;if(isContextProvider(Component)){return processChildContext(fiber,Component,parentContext);}}return parentContext;}function scheduleRootUpdate(current$$1,element,expirationTime,suspenseConfig,callback){{if(phase==='render'&&current!==null&&!didWarnAboutNestedUpdates){didWarnAboutNestedUpdates=true;warningWithoutStack$1(false,'Render methods should be a pure function of props and state; '+'triggering nested component updates from render is not allowed. '+'If necessary, trigger nested updates in componentDidUpdate.\\n\\n'+'Check the render method of %s.',getComponentName(current.type)||'Unknown');}}var update=createUpdate(expirationTime,suspenseConfig);// Caution: React DevTools currently depends on this property\n// being called \"element\".\nupdate.payload={element:element};callback=callback===undefined?null:callback;if(callback!==null){!(typeof callback==='function')?warningWithoutStack$1(false,'render(...): Expected the last optional `callback` argument to be a '+'function. Instead received: %s.',callback):void 0;update.callback=callback;}if(revertPassiveEffectsChange){flushPassiveEffects();}enqueueUpdate(current$$1,update);scheduleWork(current$$1,expirationTime);return expirationTime;}function updateContainerAtExpirationTime(element,container,parentComponent,expirationTime,suspenseConfig,callback){// TODO: If this is a nested container, this won't be the root.\nvar current$$1=container.current;{if(ReactFiberInstrumentation_1.debugTool){if(current$$1.alternate===null){ReactFiberInstrumentation_1.debugTool.onMountContainer(container);}else if(element===null){ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);}else{ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);}}}var context=getContextForSubtree(parentComponent);if(container.context===null){container.context=context;}else{container.pendingContext=context;}return scheduleRootUpdate(current$$1,element,expirationTime,suspenseConfig,callback);}function findHostInstance(component){var fiber=get(component);if(fiber===undefined){if(typeof component.render==='function'){(function(){{{throw ReactError(Error('Unable to find node on an unmounted component.'));}}})();}else{(function(){{{throw ReactError(Error('Argument appears to not be a ReactComponent. Keys: '+Object.keys(component)));}}})();}}var hostFiber=findCurrentHostFiber(fiber);if(hostFiber===null){return null;}return hostFiber.stateNode;}function findHostInstanceWithWarning(component,methodName){{var fiber=get(component);if(fiber===undefined){if(typeof component.render==='function'){(function(){{{throw ReactError(Error('Unable to find node on an unmounted component.'));}}})();}else{(function(){{{throw ReactError(Error('Argument appears to not be a ReactComponent. Keys: '+Object.keys(component)));}}})();}}var hostFiber=findCurrentHostFiber(fiber);if(hostFiber===null){return null;}if(hostFiber.mode&StrictMode){var componentName=getComponentName(fiber.type)||'Component';if(!didWarnAboutFindNodeInStrictMode[componentName]){didWarnAboutFindNodeInStrictMode[componentName]=true;if(fiber.mode&StrictMode){warningWithoutStack$1(false,'%s is deprecated in StrictMode. '+'%s was passed an instance of %s which is inside StrictMode. '+'Instead, add a ref directly to the element you want to reference.'+'\\n%s'+'\\n\\nLearn more about using refs safely here:'+'\\nhttps://fb.me/react-strict-mode-find-node',methodName,methodName,componentName,getStackByFiberInDevAndProd(hostFiber));}else{warningWithoutStack$1(false,'%s is deprecated in StrictMode. '+'%s was passed an instance of %s which renders StrictMode children. '+'Instead, add a ref directly to the element you want to reference.'+'\\n%s'+'\\n\\nLearn more about using refs safely here:'+'\\nhttps://fb.me/react-strict-mode-find-node',methodName,methodName,componentName,getStackByFiberInDevAndProd(hostFiber));}}}return hostFiber.stateNode;}return findHostInstance(component);}function createContainer(containerInfo,tag,hydrate){return createFiberRoot(containerInfo,tag,hydrate);}function updateContainer(element,container,parentComponent,callback){var current$$1=container.current;var currentTime=requestCurrentTime();{// $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\nif('undefined'!==typeof jest){warnIfUnmockedScheduler(current$$1);warnIfNotScopedWithMatchingAct(current$$1);}}var suspenseConfig=requestCurrentSuspenseConfig();var expirationTime=computeExpirationForFiber(currentTime,current$$1,suspenseConfig);return updateContainerAtExpirationTime(element,container,parentComponent,expirationTime,suspenseConfig,callback);}function getPublicRootInstance(container){var containerFiber=container.current;if(!containerFiber.child){return null;}switch(containerFiber.child.tag){case HostComponent:return getPublicInstance(containerFiber.child.stateNode);default:return containerFiber.child.stateNode;}}function findHostInstanceWithNoPortals(fiber){var hostFiber=findCurrentHostFiberWithNoPortals(fiber);if(hostFiber===null){return null;}if(hostFiber.tag===FundamentalComponent){return hostFiber.stateNode.instance;}return hostFiber.stateNode;}var shouldSuspendImpl=function shouldSuspendImpl(fiber){return false;};function shouldSuspend(fiber){return shouldSuspendImpl(fiber);}var overrideHookState=null;var overrideProps=null;var scheduleUpdate=null;var setSuspenseHandler=null;{var copyWithSetImpl=function copyWithSetImpl(obj,path,idx,value){if(idx>=path.length){return value;}var key=path[idx];var updated=Array.isArray(obj)?obj.slice():_assign({},obj);// $FlowFixMe number or string is fine here\nupdated[key]=copyWithSetImpl(obj[key],path,idx+1,value);return updated;};var copyWithSet=function copyWithSet(obj,path,value){return copyWithSetImpl(obj,path,0,value);};// Support DevTools editable values for useState and useReducer.\noverrideHookState=function overrideHookState(fiber,id,path,value){// For now, the \"id\" of stateful hooks is just the stateful hook index.\n// This may change in the future with e.g. nested hooks.\nvar currentHook=fiber.memoizedState;while(currentHook!==null&&id>0){currentHook=currentHook.next;id--;}if(currentHook!==null){if(revertPassiveEffectsChange){flushPassiveEffects();}var newState=copyWithSet(currentHook.memoizedState,path,value);currentHook.memoizedState=newState;currentHook.baseState=newState;// We aren't actually adding an update to the queue,\n// because there is no update we can add for useReducer hooks that won't trigger an error.\n// (There's no appropriate action type for DevTools overrides.)\n// As a result though, React will see the scheduled update as a noop and bailout.\n// Shallow cloning props works as a workaround for now to bypass the bailout check.\nfiber.memoizedProps=_assign({},fiber.memoizedProps);scheduleWork(fiber,Sync);}};// Support DevTools props for function components, forwardRef, memo, host components, etc.\noverrideProps=function overrideProps(fiber,path,value){if(revertPassiveEffectsChange){flushPassiveEffects();}fiber.pendingProps=copyWithSet(fiber.memoizedProps,path,value);if(fiber.alternate){fiber.alternate.pendingProps=fiber.pendingProps;}scheduleWork(fiber,Sync);};scheduleUpdate=function scheduleUpdate(fiber){if(revertPassiveEffectsChange){flushPassiveEffects();}scheduleWork(fiber,Sync);};setSuspenseHandler=function setSuspenseHandler(newShouldSuspendImpl){shouldSuspendImpl=newShouldSuspendImpl;};}function injectIntoDevTools(devToolsConfig){var _findFiberByHostInstance=devToolsConfig.findFiberByHostInstance;var ReactCurrentDispatcher=ReactSharedInternals.ReactCurrentDispatcher;return injectInternals(_assign({},devToolsConfig,{overrideHookState:overrideHookState,overrideProps:overrideProps,setSuspenseHandler:setSuspenseHandler,scheduleUpdate:scheduleUpdate,currentDispatcherRef:ReactCurrentDispatcher,findHostInstanceByFiber:function findHostInstanceByFiber(fiber){var hostFiber=findCurrentHostFiber(fiber);if(hostFiber===null){return null;}return hostFiber.stateNode;},findFiberByHostInstance:function findFiberByHostInstance(instance){if(!_findFiberByHostInstance){// Might not be implemented by the renderer.\nreturn null;}return _findFiberByHostInstance(instance);},// React Refresh\nfindHostInstancesForRefresh:findHostInstancesForRefresh,scheduleRefresh:scheduleRefresh,scheduleRoot:scheduleRoot,setRefreshHandler:setRefreshHandler,// Enables DevTools to append owner stacks to error messages in DEV mode.\ngetCurrentFiber:function getCurrentFiber(){return current;}}));}var ReactFiberReconciler=Object.freeze({updateContainerAtExpirationTime:updateContainerAtExpirationTime,createContainer:createContainer,updateContainer:updateContainer,flushRoot:flushRoot,computeUniqueAsyncExpiration:computeUniqueAsyncExpiration,batchedEventUpdates:batchedEventUpdates,batchedUpdates:batchedUpdates,unbatchedUpdates:unbatchedUpdates,deferredUpdates:deferredUpdates,syncUpdates:syncUpdates,discreteUpdates:discreteUpdates,flushDiscreteUpdates:flushDiscreteUpdates,flushControlled:flushControlled,flushSync:flushSync,flushPassiveEffects:flushPassiveEffects,IsThisRendererActing:IsThisRendererActing,getPublicRootInstance:getPublicRootInstance,findHostInstance:findHostInstance,findHostInstanceWithWarning:findHostInstanceWithWarning,findHostInstanceWithNoPortals:findHostInstanceWithNoPortals,shouldSuspend:shouldSuspend,injectIntoDevTools:injectIntoDevTools});// This entry point is intentionally not typed. It exists only for third-party\n// renderers. The renderers we ship (such as React DOM) instead import a named\n// \"inline\" entry point (for example, `react-reconciler/inline.dom`). It uses\n// the same code, but the Flow configuration redirects the host config to its\n// real implementation so we can check it against exact intended host types.\n//\n// Only one renderer (the one you passed to `yarn flow <renderer>`) is fully\n// type-checked at any given time. The Flow config maps the\n// `react-reconciler/inline.<renderer>` import (which is *not* Flow typed) to\n// `react-reconciler/inline-typed` (which *is*) for the current renderer.\n// On CI, we run Flow checks for each renderer separately.\n// TODO: decide on the top-level export form.\n// This is hacky but makes it work with both Rollup and Jest.\nvar reactReconciler=ReactFiberReconciler.default||ReactFiberReconciler;module.exports=reactReconciler;var $$$renderer=module.exports;module.exports=$$$reconciler;return $$$renderer;};}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-reconciler/cjs/react-reconciler.development.js\n");

/***/ }),

/***/ "./node_modules/react-reconciler/index.js":
/*!************************************************!*\
  !*** ./node_modules/react-reconciler/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-reconciler.development.js */ \"./node_modules/react-reconciler/cjs/react-reconciler.development.js\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVjb25jaWxlci9pbmRleC5qcz8zNDk3Il0sIm5hbWVzIjpbInByb2Nlc3MiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsS0FBSixFQUEyQyxFQUEzQyxNQUVPO0FBQ0xDLFFBQU0sQ0FBQ0MsT0FBUCxHQUFpQkMsbUJBQU8sQ0FBQyxrSEFBRCxDQUF4QjtBQUNEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlY29uY2lsZXIvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtcmVjb25jaWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1yZWNvbmNpbGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-reconciler/index.js\n");

/***/ }),

/***/ "./node_modules/react/cjs/react.development.js":
/*!*****************************************************!*\
  !*** ./node_modules/react/cjs/react.development.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/** @license React v16.14.0\n * react.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nif (true) {\n  (function () {\n    'use strict';\n\n    var _assign = __webpack_require__(/*! object-assign */ \"./node_modules/object-assign/index.js\");\n\n    var checkPropTypes = __webpack_require__(/*! prop-types/checkPropTypes */ \"./node_modules/prop-types/checkPropTypes.js\");\n\n    var ReactVersion = '16.14.0'; // The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n    // nor polyfill, then a plain number is used for performance.\n\n    var hasSymbol = typeof Symbol === 'function' && Symbol.for;\n    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;\n    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;\n    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\n    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\n    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;\n    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;\n    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary\n\n    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;\n    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\n    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;\n    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;\n    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\n    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;\n    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;\n    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;\n    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;\n    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;\n    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n    var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\n    function getIteratorFn(maybeIterable) {\n      if (maybeIterable === null || typeof maybeIterable !== 'object') {\n        return null;\n      }\n\n      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n      if (typeof maybeIterator === 'function') {\n        return maybeIterator;\n      }\n\n      return null;\n    }\n    /**\n     * Keeps track of the current dispatcher.\n     */\n\n\n    var ReactCurrentDispatcher = {\n      /**\n       * @internal\n       * @type {ReactComponent}\n       */\n      current: null\n    };\n    /**\n     * Keeps track of the current batch's configuration such as how long an update\n     * should suspend for if it needs to.\n     */\n\n    var ReactCurrentBatchConfig = {\n      suspense: null\n    };\n    /**\n     * Keeps track of the current owner.\n     *\n     * The current owner is the component who should own any components that are\n     * currently being constructed.\n     */\n\n    var ReactCurrentOwner = {\n      /**\n       * @internal\n       * @type {ReactComponent}\n       */\n      current: null\n    };\n    var BEFORE_SLASH_RE = /^(.*)[\\\\\\/]/;\n\n    function describeComponentFrame(name, source, ownerName) {\n      var sourceInfo = '';\n\n      if (source) {\n        var path = source.fileName;\n        var fileName = path.replace(BEFORE_SLASH_RE, '');\n        {\n          // In DEV, include code for a common special case:\n          // prefer \"folder/index.js\" instead of just \"index.js\".\n          if (/^index\\./.test(fileName)) {\n            var match = path.match(BEFORE_SLASH_RE);\n\n            if (match) {\n              var pathBeforeSlash = match[1];\n\n              if (pathBeforeSlash) {\n                var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');\n                fileName = folderName + '/' + fileName;\n              }\n            }\n          }\n        }\n        sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';\n      } else if (ownerName) {\n        sourceInfo = ' (created by ' + ownerName + ')';\n      }\n\n      return '\\n    in ' + (name || 'Unknown') + sourceInfo;\n    }\n\n    var Resolved = 1;\n\n    function refineResolvedLazyComponent(lazyComponent) {\n      return lazyComponent._status === Resolved ? lazyComponent._result : null;\n    }\n\n    function getWrappedName(outerType, innerType, wrapperName) {\n      var functionName = innerType.displayName || innerType.name || '';\n      return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n    }\n\n    function getComponentName(type) {\n      if (type == null) {\n        // Host root, text node or just invalid type.\n        return null;\n      }\n\n      {\n        if (typeof type.tag === 'number') {\n          error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');\n        }\n      }\n\n      if (typeof type === 'function') {\n        return type.displayName || type.name || null;\n      }\n\n      if (typeof type === 'string') {\n        return type;\n      }\n\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return 'Fragment';\n\n        case REACT_PORTAL_TYPE:\n          return 'Portal';\n\n        case REACT_PROFILER_TYPE:\n          return \"Profiler\";\n\n        case REACT_STRICT_MODE_TYPE:\n          return 'StrictMode';\n\n        case REACT_SUSPENSE_TYPE:\n          return 'Suspense';\n\n        case REACT_SUSPENSE_LIST_TYPE:\n          return 'SuspenseList';\n      }\n\n      if (typeof type === 'object') {\n        switch (type.$$typeof) {\n          case REACT_CONTEXT_TYPE:\n            return 'Context.Consumer';\n\n          case REACT_PROVIDER_TYPE:\n            return 'Context.Provider';\n\n          case REACT_FORWARD_REF_TYPE:\n            return getWrappedName(type, type.render, 'ForwardRef');\n\n          case REACT_MEMO_TYPE:\n            return getComponentName(type.type);\n\n          case REACT_BLOCK_TYPE:\n            return getComponentName(type.render);\n\n          case REACT_LAZY_TYPE:\n            {\n              var thenable = type;\n              var resolvedThenable = refineResolvedLazyComponent(thenable);\n\n              if (resolvedThenable) {\n                return getComponentName(resolvedThenable);\n              }\n\n              break;\n            }\n        }\n      }\n\n      return null;\n    }\n\n    var ReactDebugCurrentFrame = {};\n    var currentlyValidatingElement = null;\n\n    function setCurrentlyValidatingElement(element) {\n      {\n        currentlyValidatingElement = element;\n      }\n    }\n\n    {\n      // Stack implementation injected by the current renderer.\n      ReactDebugCurrentFrame.getCurrentStack = null;\n\n      ReactDebugCurrentFrame.getStackAddendum = function () {\n        var stack = ''; // Add an extra top frame while an element is being validated\n\n        if (currentlyValidatingElement) {\n          var name = getComponentName(currentlyValidatingElement.type);\n          var owner = currentlyValidatingElement._owner;\n          stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));\n        } // Delegate to the injected renderer-specific implementation\n\n\n        var impl = ReactDebugCurrentFrame.getCurrentStack;\n\n        if (impl) {\n          stack += impl() || '';\n        }\n\n        return stack;\n      };\n    }\n    /**\n     * Used by act() to track whether you're inside an act() scope.\n     */\n\n    var IsSomeRendererActing = {\n      current: false\n    };\n    var ReactSharedInternals = {\n      ReactCurrentDispatcher: ReactCurrentDispatcher,\n      ReactCurrentBatchConfig: ReactCurrentBatchConfig,\n      ReactCurrentOwner: ReactCurrentOwner,\n      IsSomeRendererActing: IsSomeRendererActing,\n      // Used by renderers to avoid bundling object-assign twice in UMD bundles:\n      assign: _assign\n    };\n    {\n      _assign(ReactSharedInternals, {\n        // These should not be included in production.\n        ReactDebugCurrentFrame: ReactDebugCurrentFrame,\n        // Shim for React DOM 16.0.0 which still destructured (but not used) this.\n        // TODO: remove in React 17.0.\n        ReactComponentTreeHook: {}\n      });\n    } // by calls to these methods by a Babel plugin.\n    //\n    // In PROD (or in packages without access to React internals),\n    // they are left as they are instead.\n\n    function warn(format) {\n      {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        printWarning('warn', format, args);\n      }\n    }\n\n    function error(format) {\n      {\n        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n\n        printWarning('error', format, args);\n      }\n    }\n\n    function printWarning(level, format, args) {\n      // When changing this logic, you might want to also\n      // update consoleWithStackDev.www.js as well.\n      {\n        var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\\n    in') === 0;\n\n        if (!hasExistingStack) {\n          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n          var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n          if (stack !== '') {\n            format += '%s';\n            args = args.concat([stack]);\n          }\n        }\n\n        var argsWithFormat = args.map(function (item) {\n          return '' + item;\n        }); // Careful: RN currently depends on this prefix\n\n        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n        // breaks IE9: https://github.com/facebook/react/issues/13610\n        // eslint-disable-next-line react-internal/no-production-logging\n\n        Function.prototype.apply.call(console[level], console, argsWithFormat);\n\n        try {\n          // --- Welcome to debugging React ---\n          // This error was thrown as a convenience so that you can use this stack\n          // to find the callsite that caused this warning to fire.\n          var argIndex = 0;\n          var message = 'Warning: ' + format.replace(/%s/g, function () {\n            return args[argIndex++];\n          });\n          throw new Error(message);\n        } catch (x) {}\n      }\n    }\n\n    var didWarnStateUpdateForUnmountedComponent = {};\n\n    function warnNoop(publicInstance, callerName) {\n      {\n        var _constructor = publicInstance.constructor;\n        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';\n        var warningKey = componentName + \".\" + callerName;\n\n        if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n          return;\n        }\n\n        error(\"Can't call %s on a component that is not yet mounted. \" + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);\n        didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n      }\n    }\n    /**\n     * This is the abstract API for an update queue.\n     */\n\n\n    var ReactNoopUpdateQueue = {\n      /**\n       * Checks whether or not this composite component is mounted.\n       * @param {ReactClass} publicInstance The instance we want to test.\n       * @return {boolean} True if mounted, false otherwise.\n       * @protected\n       * @final\n       */\n      isMounted: function isMounted(publicInstance) {\n        return false;\n      },\n\n      /**\n       * Forces an update. This should only be invoked when it is known with\n       * certainty that we are **not** in a DOM transaction.\n       *\n       * You may want to call this when you know that some deeper aspect of the\n       * component's state has changed but `setState` was not called.\n       *\n       * This will not invoke `shouldComponentUpdate`, but it will invoke\n       * `componentWillUpdate` and `componentDidUpdate`.\n       *\n       * @param {ReactClass} publicInstance The instance that should rerender.\n       * @param {?function} callback Called after component is updated.\n       * @param {?string} callerName name of the calling function in the public API.\n       * @internal\n       */\n      enqueueForceUpdate: function enqueueForceUpdate(publicInstance, callback, callerName) {\n        warnNoop(publicInstance, 'forceUpdate');\n      },\n\n      /**\n       * Replaces all of the state. Always use this or `setState` to mutate state.\n       * You should treat `this.state` as immutable.\n       *\n       * There is no guarantee that `this.state` will be immediately updated, so\n       * accessing `this.state` after calling this method may return the old value.\n       *\n       * @param {ReactClass} publicInstance The instance that should rerender.\n       * @param {object} completeState Next state.\n       * @param {?function} callback Called after component is updated.\n       * @param {?string} callerName name of the calling function in the public API.\n       * @internal\n       */\n      enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback, callerName) {\n        warnNoop(publicInstance, 'replaceState');\n      },\n\n      /**\n       * Sets a subset of the state. This only exists because _pendingState is\n       * internal. This provides a merging strategy that is not available to deep\n       * properties which is confusing. TODO: Expose pendingState or don't use it\n       * during the merge.\n       *\n       * @param {ReactClass} publicInstance The instance that should rerender.\n       * @param {object} partialState Next partial state to be merged with state.\n       * @param {?function} callback Called after component is updated.\n       * @param {?string} Name of the calling function in the public API.\n       * @internal\n       */\n      enqueueSetState: function enqueueSetState(publicInstance, partialState, callback, callerName) {\n        warnNoop(publicInstance, 'setState');\n      }\n    };\n    var emptyObject = {};\n    {\n      Object.freeze(emptyObject);\n    }\n    /**\n     * Base class helpers for the updating state of a component.\n     */\n\n    function Component(props, context, updater) {\n      this.props = props;\n      this.context = context; // If a component has string refs, we will assign a different object later.\n\n      this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n      // renderer.\n\n      this.updater = updater || ReactNoopUpdateQueue;\n    }\n\n    Component.prototype.isReactComponent = {};\n    /**\n     * Sets a subset of the state. Always use this to mutate\n     * state. You should treat `this.state` as immutable.\n     *\n     * There is no guarantee that `this.state` will be immediately updated, so\n     * accessing `this.state` after calling this method may return the old value.\n     *\n     * There is no guarantee that calls to `setState` will run synchronously,\n     * as they may eventually be batched together.  You can provide an optional\n     * callback that will be executed when the call to setState is actually\n     * completed.\n     *\n     * When a function is provided to setState, it will be called at some point in\n     * the future (not synchronously). It will be called with the up to date\n     * component arguments (state, props, context). These values can be different\n     * from this.* because your function may be called after receiveProps but before\n     * shouldComponentUpdate, and this new state, props, and context will not yet be\n     * assigned to this.\n     *\n     * @param {object|function} partialState Next partial state or function to\n     *        produce next partial state to be merged with current state.\n     * @param {?function} callback Called after state is updated.\n     * @final\n     * @protected\n     */\n\n    Component.prototype.setState = function (partialState, callback) {\n      if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {\n        {\n          throw Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");\n        }\n      }\n\n      this.updater.enqueueSetState(this, partialState, callback, 'setState');\n    };\n    /**\n     * Forces an update. This should only be invoked when it is known with\n     * certainty that we are **not** in a DOM transaction.\n     *\n     * You may want to call this when you know that some deeper aspect of the\n     * component's state has changed but `setState` was not called.\n     *\n     * This will not invoke `shouldComponentUpdate`, but it will invoke\n     * `componentWillUpdate` and `componentDidUpdate`.\n     *\n     * @param {?function} callback Called after update is complete.\n     * @final\n     * @protected\n     */\n\n\n    Component.prototype.forceUpdate = function (callback) {\n      this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n    };\n    /**\n     * Deprecated APIs. These APIs used to exist on classic React classes but since\n     * we would like to deprecate them, we're not going to move them over to this\n     * modern base class. Instead, we define a getter that warns if it's accessed.\n     */\n\n\n    {\n      var deprecatedAPIs = {\n        isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n        replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n      };\n\n      var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {\n        Object.defineProperty(Component.prototype, methodName, {\n          get: function get() {\n            warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n            return undefined;\n          }\n        });\n      };\n\n      for (var fnName in deprecatedAPIs) {\n        if (deprecatedAPIs.hasOwnProperty(fnName)) {\n          defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n        }\n      }\n    }\n\n    function ComponentDummy() {}\n\n    ComponentDummy.prototype = Component.prototype;\n    /**\n     * Convenience component with default shallow equality check for sCU.\n     */\n\n    function PureComponent(props, context, updater) {\n      this.props = props;\n      this.context = context; // If a component has string refs, we will assign a different object later.\n\n      this.refs = emptyObject;\n      this.updater = updater || ReactNoopUpdateQueue;\n    }\n\n    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\n    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.\n\n    _assign(pureComponentPrototype, Component.prototype);\n\n    pureComponentPrototype.isPureReactComponent = true; // an immutable object with a single mutable value\n\n    function createRef() {\n      var refObject = {\n        current: null\n      };\n      {\n        Object.seal(refObject);\n      }\n      return refObject;\n    }\n\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n    var RESERVED_PROPS = {\n      key: true,\n      ref: true,\n      __self: true,\n      __source: true\n    };\n    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;\n    {\n      didWarnAboutStringRefs = {};\n    }\n\n    function hasValidRef(config) {\n      {\n        if (hasOwnProperty.call(config, 'ref')) {\n          var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n          if (getter && getter.isReactWarning) {\n            return false;\n          }\n        }\n      }\n      return config.ref !== undefined;\n    }\n\n    function hasValidKey(config) {\n      {\n        if (hasOwnProperty.call(config, 'key')) {\n          var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n          if (getter && getter.isReactWarning) {\n            return false;\n          }\n        }\n      }\n      return config.key !== undefined;\n    }\n\n    function defineKeyPropWarningGetter(props, displayName) {\n      var warnAboutAccessingKey = function warnAboutAccessingKey() {\n        {\n          if (!specialPropKeyWarningShown) {\n            specialPropKeyWarningShown = true;\n            error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n          }\n        }\n      };\n\n      warnAboutAccessingKey.isReactWarning = true;\n      Object.defineProperty(props, 'key', {\n        get: warnAboutAccessingKey,\n        configurable: true\n      });\n    }\n\n    function defineRefPropWarningGetter(props, displayName) {\n      var warnAboutAccessingRef = function warnAboutAccessingRef() {\n        {\n          if (!specialPropRefWarningShown) {\n            specialPropRefWarningShown = true;\n            error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n          }\n        }\n      };\n\n      warnAboutAccessingRef.isReactWarning = true;\n      Object.defineProperty(props, 'ref', {\n        get: warnAboutAccessingRef,\n        configurable: true\n      });\n    }\n\n    function warnIfStringRefCannotBeAutoConverted(config) {\n      {\n        if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {\n          var componentName = getComponentName(ReactCurrentOwner.current.type);\n\n          if (!didWarnAboutStringRefs[componentName]) {\n            error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);\n            didWarnAboutStringRefs[componentName] = true;\n          }\n        }\n      }\n    }\n    /**\n     * Factory method to create a new React element. This no longer adheres to\n     * the class pattern, so do not use new to call it. Also, instanceof check\n     * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n     * if something is a React Element.\n     *\n     * @param {*} type\n     * @param {*} props\n     * @param {*} key\n     * @param {string|object} ref\n     * @param {*} owner\n     * @param {*} self A *temporary* helper to detect places where `this` is\n     * different from the `owner` when React.createElement is called, so that we\n     * can warn. We want to get rid of owner and replace string `ref`s with arrow\n     * functions, and as long as `this` and owner are the same, there will be no\n     * change in behavior.\n     * @param {*} source An annotation object (added by a transpiler or otherwise)\n     * indicating filename, line number, and/or other information.\n     * @internal\n     */\n\n\n    var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {\n      var element = {\n        // This tag allows us to uniquely identify this as a React Element\n        $$typeof: REACT_ELEMENT_TYPE,\n        // Built-in properties that belong on the element\n        type: type,\n        key: key,\n        ref: ref,\n        props: props,\n        // Record the component responsible for creating this element.\n        _owner: owner\n      };\n      {\n        // The validation flag is currently mutative. We put it on\n        // an external backing store so that we can freeze the whole object.\n        // This can be replaced with a WeakMap once they are implemented in\n        // commonly used development environments.\n        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n        // the validation flag non-enumerable (where possible, which should\n        // include every environment we run tests in), so the test framework\n        // ignores it.\n\n        Object.defineProperty(element._store, 'validated', {\n          configurable: false,\n          enumerable: false,\n          writable: true,\n          value: false\n        }); // self and source are DEV only properties.\n\n        Object.defineProperty(element, '_self', {\n          configurable: false,\n          enumerable: false,\n          writable: false,\n          value: self\n        }); // Two elements created in two different places should be considered\n        // equal for testing purposes and therefore we hide it from enumeration.\n\n        Object.defineProperty(element, '_source', {\n          configurable: false,\n          enumerable: false,\n          writable: false,\n          value: source\n        });\n\n        if (Object.freeze) {\n          Object.freeze(element.props);\n          Object.freeze(element);\n        }\n      }\n      return element;\n    };\n    /**\n     * Create and return a new ReactElement of the given type.\n     * See https://reactjs.org/docs/react-api.html#createelement\n     */\n\n\n    function createElement(type, config, children) {\n      var propName; // Reserved names are extracted\n\n      var props = {};\n      var key = null;\n      var ref = null;\n      var self = null;\n      var source = null;\n\n      if (config != null) {\n        if (hasValidRef(config)) {\n          ref = config.ref;\n          {\n            warnIfStringRefCannotBeAutoConverted(config);\n          }\n        }\n\n        if (hasValidKey(config)) {\n          key = '' + config.key;\n        }\n\n        self = config.__self === undefined ? null : config.__self;\n        source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object\n\n        for (propName in config) {\n          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n            props[propName] = config[propName];\n          }\n        }\n      } // Children can be more than one argument, and those are transferred onto\n      // the newly allocated props object.\n\n\n      var childrenLength = arguments.length - 2;\n\n      if (childrenLength === 1) {\n        props.children = children;\n      } else if (childrenLength > 1) {\n        var childArray = Array(childrenLength);\n\n        for (var i = 0; i < childrenLength; i++) {\n          childArray[i] = arguments[i + 2];\n        }\n\n        {\n          if (Object.freeze) {\n            Object.freeze(childArray);\n          }\n        }\n        props.children = childArray;\n      } // Resolve default props\n\n\n      if (type && type.defaultProps) {\n        var defaultProps = type.defaultProps;\n\n        for (propName in defaultProps) {\n          if (props[propName] === undefined) {\n            props[propName] = defaultProps[propName];\n          }\n        }\n      }\n\n      {\n        if (key || ref) {\n          var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n          if (key) {\n            defineKeyPropWarningGetter(props, displayName);\n          }\n\n          if (ref) {\n            defineRefPropWarningGetter(props, displayName);\n          }\n        }\n      }\n      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n    }\n\n    function cloneAndReplaceKey(oldElement, newKey) {\n      var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n      return newElement;\n    }\n    /**\n     * Clone and return a new ReactElement using element as the starting point.\n     * See https://reactjs.org/docs/react-api.html#cloneelement\n     */\n\n\n    function cloneElement(element, config, children) {\n      if (!!(element === null || element === undefined)) {\n        {\n          throw Error(\"React.cloneElement(...): The argument must be a React element, but you passed \" + element + \".\");\n        }\n      }\n\n      var propName; // Original props are copied\n\n      var props = _assign({}, element.props); // Reserved names are extracted\n\n\n      var key = element.key;\n      var ref = element.ref; // Self is preserved since the owner is preserved.\n\n      var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a\n      // transpiler, and the original source is probably a better indicator of the\n      // true owner.\n\n      var source = element._source; // Owner will be preserved, unless ref is overridden\n\n      var owner = element._owner;\n\n      if (config != null) {\n        if (hasValidRef(config)) {\n          // Silently steal the ref from the parent.\n          ref = config.ref;\n          owner = ReactCurrentOwner.current;\n        }\n\n        if (hasValidKey(config)) {\n          key = '' + config.key;\n        } // Remaining properties override existing props\n\n\n        var defaultProps;\n\n        if (element.type && element.type.defaultProps) {\n          defaultProps = element.type.defaultProps;\n        }\n\n        for (propName in config) {\n          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n            if (config[propName] === undefined && defaultProps !== undefined) {\n              // Resolve default props\n              props[propName] = defaultProps[propName];\n            } else {\n              props[propName] = config[propName];\n            }\n          }\n        }\n      } // Children can be more than one argument, and those are transferred onto\n      // the newly allocated props object.\n\n\n      var childrenLength = arguments.length - 2;\n\n      if (childrenLength === 1) {\n        props.children = children;\n      } else if (childrenLength > 1) {\n        var childArray = Array(childrenLength);\n\n        for (var i = 0; i < childrenLength; i++) {\n          childArray[i] = arguments[i + 2];\n        }\n\n        props.children = childArray;\n      }\n\n      return ReactElement(element.type, key, ref, self, source, owner, props);\n    }\n    /**\n     * Verifies the object is a ReactElement.\n     * See https://reactjs.org/docs/react-api.html#isvalidelement\n     * @param {?object} object\n     * @return {boolean} True if `object` is a ReactElement.\n     * @final\n     */\n\n\n    function isValidElement(object) {\n      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n    }\n\n    var SEPARATOR = '.';\n    var SUBSEPARATOR = ':';\n    /**\n     * Escape and wrap key so it is safe to use as a reactid\n     *\n     * @param {string} key to be escaped.\n     * @return {string} the escaped key.\n     */\n\n    function escape(key) {\n      var escapeRegex = /[=:]/g;\n      var escaperLookup = {\n        '=': '=0',\n        ':': '=2'\n      };\n      var escapedString = ('' + key).replace(escapeRegex, function (match) {\n        return escaperLookup[match];\n      });\n      return '$' + escapedString;\n    }\n    /**\n     * TODO: Test that a single child and an array with one item have the same key\n     * pattern.\n     */\n\n\n    var didWarnAboutMaps = false;\n    var userProvidedKeyEscapeRegex = /\\/+/g;\n\n    function escapeUserProvidedKey(text) {\n      return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');\n    }\n\n    var POOL_SIZE = 10;\n    var traverseContextPool = [];\n\n    function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {\n      if (traverseContextPool.length) {\n        var traverseContext = traverseContextPool.pop();\n        traverseContext.result = mapResult;\n        traverseContext.keyPrefix = keyPrefix;\n        traverseContext.func = mapFunction;\n        traverseContext.context = mapContext;\n        traverseContext.count = 0;\n        return traverseContext;\n      } else {\n        return {\n          result: mapResult,\n          keyPrefix: keyPrefix,\n          func: mapFunction,\n          context: mapContext,\n          count: 0\n        };\n      }\n    }\n\n    function releaseTraverseContext(traverseContext) {\n      traverseContext.result = null;\n      traverseContext.keyPrefix = null;\n      traverseContext.func = null;\n      traverseContext.context = null;\n      traverseContext.count = 0;\n\n      if (traverseContextPool.length < POOL_SIZE) {\n        traverseContextPool.push(traverseContext);\n      }\n    }\n    /**\n     * @param {?*} children Children tree container.\n     * @param {!string} nameSoFar Name of the key path so far.\n     * @param {!function} callback Callback to invoke with each child found.\n     * @param {?*} traverseContext Used to pass information throughout the traversal\n     * process.\n     * @return {!number} The number of children in this subtree.\n     */\n\n\n    function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {\n      var type = typeof children;\n\n      if (type === 'undefined' || type === 'boolean') {\n        // All of the above are perceived as null.\n        children = null;\n      }\n\n      var invokeCallback = false;\n\n      if (children === null) {\n        invokeCallback = true;\n      } else {\n        switch (type) {\n          case 'string':\n          case 'number':\n            invokeCallback = true;\n            break;\n\n          case 'object':\n            switch (children.$$typeof) {\n              case REACT_ELEMENT_TYPE:\n              case REACT_PORTAL_TYPE:\n                invokeCallback = true;\n            }\n\n        }\n      }\n\n      if (invokeCallback) {\n        callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array\n        // so that it's consistent if the number of children grows.\n        nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);\n        return 1;\n      }\n\n      var child;\n      var nextName;\n      var subtreeCount = 0; // Count of children found in the current subtree.\n\n      var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n      if (Array.isArray(children)) {\n        for (var i = 0; i < children.length; i++) {\n          child = children[i];\n          nextName = nextNamePrefix + getComponentKey(child, i);\n          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n        }\n      } else {\n        var iteratorFn = getIteratorFn(children);\n\n        if (typeof iteratorFn === 'function') {\n          {\n            // Warn about using Maps as children\n            if (iteratorFn === children.entries) {\n              if (!didWarnAboutMaps) {\n                warn('Using Maps as children is deprecated and will be removed in ' + 'a future major release. Consider converting children to ' + 'an array of keyed ReactElements instead.');\n              }\n\n              didWarnAboutMaps = true;\n            }\n          }\n          var iterator = iteratorFn.call(children);\n          var step;\n          var ii = 0;\n\n          while (!(step = iterator.next()).done) {\n            child = step.value;\n            nextName = nextNamePrefix + getComponentKey(child, ii++);\n            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n          }\n        } else if (type === 'object') {\n          var addendum = '';\n          {\n            addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();\n          }\n          var childrenString = '' + children;\n          {\n            {\n              throw Error(\"Objects are not valid as a React child (found: \" + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + \").\" + addendum);\n            }\n          }\n        }\n      }\n\n      return subtreeCount;\n    }\n    /**\n     * Traverses children that are typically specified as `props.children`, but\n     * might also be specified through attributes:\n     *\n     * - `traverseAllChildren(this.props.children, ...)`\n     * - `traverseAllChildren(this.props.leftPanelChildren, ...)`\n     *\n     * The `traverseContext` is an optional argument that is passed through the\n     * entire traversal. It can be used to store accumulations or anything else that\n     * the callback might find relevant.\n     *\n     * @param {?*} children Children tree object.\n     * @param {!function} callback To invoke upon traversing each child.\n     * @param {?*} traverseContext Context for traversal.\n     * @return {!number} The number of children in this subtree.\n     */\n\n\n    function traverseAllChildren(children, callback, traverseContext) {\n      if (children == null) {\n        return 0;\n      }\n\n      return traverseAllChildrenImpl(children, '', callback, traverseContext);\n    }\n    /**\n     * Generate a key string that identifies a component within a set.\n     *\n     * @param {*} component A component that could contain a manual key.\n     * @param {number} index Index that is used if a manual key is not provided.\n     * @return {string}\n     */\n\n\n    function getComponentKey(component, index) {\n      // Do some typechecking here since we call this blindly. We want to ensure\n      // that we don't block potential future ES APIs.\n      if (typeof component === 'object' && component !== null && component.key != null) {\n        // Explicit key\n        return escape(component.key);\n      } // Implicit key determined by the index in the set\n\n\n      return index.toString(36);\n    }\n\n    function forEachSingleChild(bookKeeping, child, name) {\n      var func = bookKeeping.func,\n          context = bookKeeping.context;\n      func.call(context, child, bookKeeping.count++);\n    }\n    /**\n     * Iterates through children that are typically specified as `props.children`.\n     *\n     * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n     *\n     * The provided forEachFunc(child, index) will be called for each\n     * leaf child.\n     *\n     * @param {?*} children Children tree container.\n     * @param {function(*, int)} forEachFunc\n     * @param {*} forEachContext Context for forEachContext.\n     */\n\n\n    function forEachChildren(children, forEachFunc, forEachContext) {\n      if (children == null) {\n        return children;\n      }\n\n      var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);\n      traverseAllChildren(children, forEachSingleChild, traverseContext);\n      releaseTraverseContext(traverseContext);\n    }\n\n    function mapSingleChildIntoContext(bookKeeping, child, childKey) {\n      var result = bookKeeping.result,\n          keyPrefix = bookKeeping.keyPrefix,\n          func = bookKeeping.func,\n          context = bookKeeping.context;\n      var mappedChild = func.call(context, child, bookKeeping.count++);\n\n      if (Array.isArray(mappedChild)) {\n        mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {\n          return c;\n        });\n      } else if (mappedChild != null) {\n        if (isValidElement(mappedChild)) {\n          mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as\n          // traverseAllChildren used to do for objects as children\n          keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);\n        }\n\n        result.push(mappedChild);\n      }\n    }\n\n    function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {\n      var escapedPrefix = '';\n\n      if (prefix != null) {\n        escapedPrefix = escapeUserProvidedKey(prefix) + '/';\n      }\n\n      var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);\n      traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);\n      releaseTraverseContext(traverseContext);\n    }\n    /**\n     * Maps children that are typically specified as `props.children`.\n     *\n     * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n     *\n     * The provided mapFunction(child, key, index) will be called for each\n     * leaf child.\n     *\n     * @param {?*} children Children tree container.\n     * @param {function(*, int)} func The map function.\n     * @param {*} context Context for mapFunction.\n     * @return {object} Object containing the ordered map of results.\n     */\n\n\n    function mapChildren(children, func, context) {\n      if (children == null) {\n        return children;\n      }\n\n      var result = [];\n      mapIntoWithKeyPrefixInternal(children, result, null, func, context);\n      return result;\n    }\n    /**\n     * Count the number of children that are typically specified as\n     * `props.children`.\n     *\n     * See https://reactjs.org/docs/react-api.html#reactchildrencount\n     *\n     * @param {?*} children Children tree container.\n     * @return {number} The number of children.\n     */\n\n\n    function countChildren(children) {\n      return traverseAllChildren(children, function () {\n        return null;\n      }, null);\n    }\n    /**\n     * Flatten a children object (typically specified as `props.children`) and\n     * return an array with appropriately re-keyed children.\n     *\n     * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n     */\n\n\n    function toArray(children) {\n      var result = [];\n      mapIntoWithKeyPrefixInternal(children, result, null, function (child) {\n        return child;\n      });\n      return result;\n    }\n    /**\n     * Returns the first child in a collection of children and verifies that there\n     * is only one child in the collection.\n     *\n     * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n     *\n     * The current implementation of this function assumes that a single child gets\n     * passed without a wrapper, but the purpose of this helper function is to\n     * abstract away the particular structure of children.\n     *\n     * @param {?object} children Child collection structure.\n     * @return {ReactElement} The first and only `ReactElement` contained in the\n     * structure.\n     */\n\n\n    function onlyChild(children) {\n      if (!isValidElement(children)) {\n        {\n          throw Error(\"React.Children.only expected to receive a single React element child.\");\n        }\n      }\n\n      return children;\n    }\n\n    function createContext(defaultValue, calculateChangedBits) {\n      if (calculateChangedBits === undefined) {\n        calculateChangedBits = null;\n      } else {\n        {\n          if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {\n            error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);\n          }\n        }\n      }\n\n      var context = {\n        $$typeof: REACT_CONTEXT_TYPE,\n        _calculateChangedBits: calculateChangedBits,\n        // As a workaround to support multiple concurrent renderers, we categorize\n        // some renderers as primary and others as secondary. We only expect\n        // there to be two concurrent renderers at most: React Native (primary) and\n        // Fabric (secondary); React DOM (primary) and React ART (secondary).\n        // Secondary renderers store their context values on separate fields.\n        _currentValue: defaultValue,\n        _currentValue2: defaultValue,\n        // Used to track how many concurrent renderers this context currently\n        // supports within in a single renderer. Such as parallel server rendering.\n        _threadCount: 0,\n        // These are circular\n        Provider: null,\n        Consumer: null\n      };\n      context.Provider = {\n        $$typeof: REACT_PROVIDER_TYPE,\n        _context: context\n      };\n      var hasWarnedAboutUsingNestedContextConsumers = false;\n      var hasWarnedAboutUsingConsumerProvider = false;\n      {\n        // A separate object, but proxies back to the original context object for\n        // backwards compatibility. It has a different $$typeof, so we can properly\n        // warn for the incorrect usage of Context as a Consumer.\n        var Consumer = {\n          $$typeof: REACT_CONTEXT_TYPE,\n          _context: context,\n          _calculateChangedBits: context._calculateChangedBits\n        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here\n\n        Object.defineProperties(Consumer, {\n          Provider: {\n            get: function get() {\n              if (!hasWarnedAboutUsingConsumerProvider) {\n                hasWarnedAboutUsingConsumerProvider = true;\n                error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');\n              }\n\n              return context.Provider;\n            },\n            set: function set(_Provider) {\n              context.Provider = _Provider;\n            }\n          },\n          _currentValue: {\n            get: function get() {\n              return context._currentValue;\n            },\n            set: function set(_currentValue) {\n              context._currentValue = _currentValue;\n            }\n          },\n          _currentValue2: {\n            get: function get() {\n              return context._currentValue2;\n            },\n            set: function set(_currentValue2) {\n              context._currentValue2 = _currentValue2;\n            }\n          },\n          _threadCount: {\n            get: function get() {\n              return context._threadCount;\n            },\n            set: function set(_threadCount) {\n              context._threadCount = _threadCount;\n            }\n          },\n          Consumer: {\n            get: function get() {\n              if (!hasWarnedAboutUsingNestedContextConsumers) {\n                hasWarnedAboutUsingNestedContextConsumers = true;\n                error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n              }\n\n              return context.Consumer;\n            }\n          }\n        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty\n\n        context.Consumer = Consumer;\n      }\n      {\n        context._currentRenderer = null;\n        context._currentRenderer2 = null;\n      }\n      return context;\n    }\n\n    function lazy(ctor) {\n      var lazyType = {\n        $$typeof: REACT_LAZY_TYPE,\n        _ctor: ctor,\n        // React uses these fields to store the result.\n        _status: -1,\n        _result: null\n      };\n      {\n        // In production, this would just set it on the object.\n        var defaultProps;\n        var propTypes;\n        Object.defineProperties(lazyType, {\n          defaultProps: {\n            configurable: true,\n            get: function get() {\n              return defaultProps;\n            },\n            set: function set(newDefaultProps) {\n              error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n              defaultProps = newDefaultProps; // Match production behavior more closely:\n\n              Object.defineProperty(lazyType, 'defaultProps', {\n                enumerable: true\n              });\n            }\n          },\n          propTypes: {\n            configurable: true,\n            get: function get() {\n              return propTypes;\n            },\n            set: function set(newPropTypes) {\n              error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n              propTypes = newPropTypes; // Match production behavior more closely:\n\n              Object.defineProperty(lazyType, 'propTypes', {\n                enumerable: true\n              });\n            }\n          }\n        });\n      }\n      return lazyType;\n    }\n\n    function forwardRef(render) {\n      {\n        if (render != null && render.$$typeof === REACT_MEMO_TYPE) {\n          error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');\n        } else if (typeof render !== 'function') {\n          error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);\n        } else {\n          if (render.length !== 0 && render.length !== 2) {\n            error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');\n          }\n        }\n\n        if (render != null) {\n          if (render.defaultProps != null || render.propTypes != null) {\n            error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');\n          }\n        }\n      }\n      return {\n        $$typeof: REACT_FORWARD_REF_TYPE,\n        render: render\n      };\n    }\n\n    function isValidElementType(type) {\n      return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);\n    }\n\n    function memo(type, compare) {\n      {\n        if (!isValidElementType(type)) {\n          error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);\n        }\n      }\n      return {\n        $$typeof: REACT_MEMO_TYPE,\n        type: type,\n        compare: compare === undefined ? null : compare\n      };\n    }\n\n    function resolveDispatcher() {\n      var dispatcher = ReactCurrentDispatcher.current;\n\n      if (!(dispatcher !== null)) {\n        {\n          throw Error(\"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\n2. You might be breaking the Rules of Hooks\\n3. You might have more than one copy of React in the same app\\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.\");\n        }\n      }\n\n      return dispatcher;\n    }\n\n    function useContext(Context, unstable_observedBits) {\n      var dispatcher = resolveDispatcher();\n      {\n        if (unstable_observedBits !== undefined) {\n          error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\\n\\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '');\n        } // TODO: add a more generic warning for invalid values.\n\n\n        if (Context._context !== undefined) {\n          var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs\n          // and nobody should be using this in existing code.\n\n          if (realContext.Consumer === Context) {\n            error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');\n          } else if (realContext.Provider === Context) {\n            error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');\n          }\n        }\n      }\n      return dispatcher.useContext(Context, unstable_observedBits);\n    }\n\n    function useState(initialState) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useState(initialState);\n    }\n\n    function useReducer(reducer, initialArg, init) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useReducer(reducer, initialArg, init);\n    }\n\n    function useRef(initialValue) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useRef(initialValue);\n    }\n\n    function useEffect(create, deps) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useEffect(create, deps);\n    }\n\n    function useLayoutEffect(create, deps) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useLayoutEffect(create, deps);\n    }\n\n    function useCallback(callback, deps) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useCallback(callback, deps);\n    }\n\n    function useMemo(create, deps) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useMemo(create, deps);\n    }\n\n    function useImperativeHandle(ref, create, deps) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useImperativeHandle(ref, create, deps);\n    }\n\n    function useDebugValue(value, formatterFn) {\n      {\n        var dispatcher = resolveDispatcher();\n        return dispatcher.useDebugValue(value, formatterFn);\n      }\n    }\n\n    var propTypesMisspellWarningShown;\n    {\n      propTypesMisspellWarningShown = false;\n    }\n\n    function getDeclarationErrorAddendum() {\n      if (ReactCurrentOwner.current) {\n        var name = getComponentName(ReactCurrentOwner.current.type);\n\n        if (name) {\n          return '\\n\\nCheck the render method of `' + name + '`.';\n        }\n      }\n\n      return '';\n    }\n\n    function getSourceInfoErrorAddendum(source) {\n      if (source !== undefined) {\n        var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n        var lineNumber = source.lineNumber;\n        return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n      }\n\n      return '';\n    }\n\n    function getSourceInfoErrorAddendumForProps(elementProps) {\n      if (elementProps !== null && elementProps !== undefined) {\n        return getSourceInfoErrorAddendum(elementProps.__source);\n      }\n\n      return '';\n    }\n    /**\n     * Warn if there's no key explicitly set on dynamic arrays of children or\n     * object keys are not valid. This allows us to keep track of children between\n     * updates.\n     */\n\n\n    var ownerHasKeyUseWarning = {};\n\n    function getCurrentComponentErrorInfo(parentType) {\n      var info = getDeclarationErrorAddendum();\n\n      if (!info) {\n        var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n        if (parentName) {\n          info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n        }\n      }\n\n      return info;\n    }\n    /**\n     * Warn if the element doesn't have an explicit key assigned to it.\n     * This element is in an array. The array could grow and shrink or be\n     * reordered. All children that haven't already been validated are required to\n     * have a \"key\" property assigned to it. Error statuses are cached so a warning\n     * will only be shown once.\n     *\n     * @internal\n     * @param {ReactElement} element Element that requires a key.\n     * @param {*} parentType element's parent's type.\n     */\n\n\n    function validateExplicitKey(element, parentType) {\n      if (!element._store || element._store.validated || element.key != null) {\n        return;\n      }\n\n      element._store.validated = true;\n      var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n      if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n        return;\n      }\n\n      ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n      // property, it may be the creator of the child that's responsible for\n      // assigning it a key.\n\n      var childOwner = '';\n\n      if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n        // Give the component that originally created this child.\n        childOwner = \" It was passed a child from \" + getComponentName(element._owner.type) + \".\";\n      }\n\n      setCurrentlyValidatingElement(element);\n      {\n        error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);\n      }\n      setCurrentlyValidatingElement(null);\n    }\n    /**\n     * Ensure that every element either is passed in a static location, in an\n     * array with an explicit keys property defined, or in an object literal\n     * with valid key property.\n     *\n     * @internal\n     * @param {ReactNode} node Statically passed child of any type.\n     * @param {*} parentType node's parent's type.\n     */\n\n\n    function validateChildKeys(node, parentType) {\n      if (typeof node !== 'object') {\n        return;\n      }\n\n      if (Array.isArray(node)) {\n        for (var i = 0; i < node.length; i++) {\n          var child = node[i];\n\n          if (isValidElement(child)) {\n            validateExplicitKey(child, parentType);\n          }\n        }\n      } else if (isValidElement(node)) {\n        // This element was passed in a valid location.\n        if (node._store) {\n          node._store.validated = true;\n        }\n      } else if (node) {\n        var iteratorFn = getIteratorFn(node);\n\n        if (typeof iteratorFn === 'function') {\n          // Entry iterators used to provide implicit keys,\n          // but now we print a separate warning for them later.\n          if (iteratorFn !== node.entries) {\n            var iterator = iteratorFn.call(node);\n            var step;\n\n            while (!(step = iterator.next()).done) {\n              if (isValidElement(step.value)) {\n                validateExplicitKey(step.value, parentType);\n              }\n            }\n          }\n        }\n      }\n    }\n    /**\n     * Given an element, validate that its props follow the propTypes definition,\n     * provided by the type.\n     *\n     * @param {ReactElement} element\n     */\n\n\n    function validatePropTypes(element) {\n      {\n        var type = element.type;\n\n        if (type === null || type === undefined || typeof type === 'string') {\n          return;\n        }\n\n        var name = getComponentName(type);\n        var propTypes;\n\n        if (typeof type === 'function') {\n          propTypes = type.propTypes;\n        } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n        // Inner props are checked in the reconciler.\n        type.$$typeof === REACT_MEMO_TYPE)) {\n          propTypes = type.propTypes;\n        } else {\n          return;\n        }\n\n        if (propTypes) {\n          setCurrentlyValidatingElement(element);\n          checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);\n          setCurrentlyValidatingElement(null);\n        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n          propTypesMisspellWarningShown = true;\n          error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');\n        }\n\n        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n          error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n        }\n      }\n    }\n    /**\n     * Given a fragment, validate that it can only be provided with fragment props\n     * @param {ReactElement} fragment\n     */\n\n\n    function validateFragmentProps(fragment) {\n      {\n        setCurrentlyValidatingElement(fragment);\n        var keys = Object.keys(fragment.props);\n\n        for (var i = 0; i < keys.length; i++) {\n          var key = keys[i];\n\n          if (key !== 'children' && key !== 'key') {\n            error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n            break;\n          }\n        }\n\n        if (fragment.ref !== null) {\n          error('Invalid attribute `ref` supplied to `React.Fragment`.');\n        }\n\n        setCurrentlyValidatingElement(null);\n      }\n    }\n\n    function createElementWithValidation(type, props, children) {\n      var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n      // succeed and there will likely be errors in render.\n\n      if (!validType) {\n        var info = '';\n\n        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n          info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n        }\n\n        var sourceInfo = getSourceInfoErrorAddendumForProps(props);\n\n        if (sourceInfo) {\n          info += sourceInfo;\n        } else {\n          info += getDeclarationErrorAddendum();\n        }\n\n        var typeString;\n\n        if (type === null) {\n          typeString = 'null';\n        } else if (Array.isArray(type)) {\n          typeString = 'array';\n        } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n          typeString = \"<\" + (getComponentName(type.type) || 'Unknown') + \" />\";\n          info = ' Did you accidentally export a JSX literal instead of a component?';\n        } else {\n          typeString = typeof type;\n        }\n\n        {\n          error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n        }\n      }\n\n      var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.\n      // TODO: Drop this when these are no longer allowed as the type argument.\n\n      if (element == null) {\n        return element;\n      } // Skip key warning if the type isn't valid since our key validation logic\n      // doesn't expect a non-string/function type and can throw confusing errors.\n      // We don't want exception behavior to differ between dev and prod.\n      // (Rendering will throw with a helpful message and as soon as the type is\n      // fixed, the key warnings will appear.)\n\n\n      if (validType) {\n        for (var i = 2; i < arguments.length; i++) {\n          validateChildKeys(arguments[i], type);\n        }\n      }\n\n      if (type === REACT_FRAGMENT_TYPE) {\n        validateFragmentProps(element);\n      } else {\n        validatePropTypes(element);\n      }\n\n      return element;\n    }\n\n    var didWarnAboutDeprecatedCreateFactory = false;\n\n    function createFactoryWithValidation(type) {\n      var validatedFactory = createElementWithValidation.bind(null, type);\n      validatedFactory.type = type;\n      {\n        if (!didWarnAboutDeprecatedCreateFactory) {\n          didWarnAboutDeprecatedCreateFactory = true;\n          warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');\n        } // Legacy hook: remove it\n\n\n        Object.defineProperty(validatedFactory, 'type', {\n          enumerable: false,\n          get: function get() {\n            warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');\n            Object.defineProperty(this, 'type', {\n              value: type\n            });\n            return type;\n          }\n        });\n      }\n      return validatedFactory;\n    }\n\n    function cloneElementWithValidation(element, props, children) {\n      var newElement = cloneElement.apply(this, arguments);\n\n      for (var i = 2; i < arguments.length; i++) {\n        validateChildKeys(arguments[i], newElement.type);\n      }\n\n      validatePropTypes(newElement);\n      return newElement;\n    }\n\n    {\n      try {\n        var frozenObject = Object.freeze({});\n        var testMap = new Map([[frozenObject, null]]);\n        var testSet = new Set([frozenObject]); // This is necessary for Rollup to not consider these unused.\n        // https://github.com/rollup/rollup/issues/1771\n        // TODO: we can remove these if Rollup fixes the bug.\n\n        testMap.set(0, 0);\n        testSet.add(0);\n      } catch (e) {}\n    }\n    var createElement$1 = createElementWithValidation;\n    var cloneElement$1 = cloneElementWithValidation;\n    var createFactory = createFactoryWithValidation;\n    var Children = {\n      map: mapChildren,\n      forEach: forEachChildren,\n      count: countChildren,\n      toArray: toArray,\n      only: onlyChild\n    };\n    exports.Children = Children;\n    exports.Component = Component;\n    exports.Fragment = REACT_FRAGMENT_TYPE;\n    exports.Profiler = REACT_PROFILER_TYPE;\n    exports.PureComponent = PureComponent;\n    exports.StrictMode = REACT_STRICT_MODE_TYPE;\n    exports.Suspense = REACT_SUSPENSE_TYPE;\n    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;\n    exports.cloneElement = cloneElement$1;\n    exports.createContext = createContext;\n    exports.createElement = createElement$1;\n    exports.createFactory = createFactory;\n    exports.createRef = createRef;\n    exports.forwardRef = forwardRef;\n    exports.isValidElement = isValidElement;\n    exports.lazy = lazy;\n    exports.memo = memo;\n    exports.useCallback = useCallback;\n    exports.useContext = useContext;\n    exports.useDebugValue = useDebugValue;\n    exports.useEffect = useEffect;\n    exports.useImperativeHandle = useImperativeHandle;\n    exports.useLayoutEffect = useLayoutEffect;\n    exports.useMemo = useMemo;\n    exports.useReducer = useReducer;\n    exports.useRef = useRef;\n    exports.useState = useState;\n    exports.version = ReactVersion;\n  })();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react/cjs/react.development.js\n");

/***/ }),

/***/ "./node_modules/react/index.js":
/*!*************************************!*\
  !*** ./node_modules/react/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react.development.js */ \"./node_modules/react/cjs/react.development.js\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanM/YWI1YiJdLCJuYW1lcyI6WyJwcm9jZXNzIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLEtBQUosRUFBMkMsRUFBM0MsTUFFTztBQUNMQyxRQUFNLENBQUNDLE9BQVAsR0FBaUJDLG1CQUFPLENBQUMsaUZBQUQsQ0FBeEI7QUFDRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react/index.js\n");

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar runtime = function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function define(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n    return generator;\n  }\n\n  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n\n  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n\n\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"); // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function (genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n    // do is to check its .name property.\n    (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n  };\n\n  exports.mark = function (genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  }; // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n\n\n  exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n\n        if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function (value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function (err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function (unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function (error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = // If enqueue has been called before, then we want to wait until\n      // all previous Promises have been resolved before calling invoke,\n      // so that results are always delivered in the correct order. If\n      // enqueue has not been called before, then it is important to\n      // call invoke immediately, without waiting on a callback to fire,\n      // so that the async generator function has the opportunity to do\n      // any necessary setup in a predictable way. This predictability\n      // is why the Promise constructor synchronously invokes its\n      // executor callback, and why async functions synchronously\n      // execute code before the first await. Since we implement simple\n      // async functions in terms of async generators, it is especially\n      // important to get this right, even though it requires care.\n      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n      // invocations of the iterator.\n      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    } // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n\n\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n\n  exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n    : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        } // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n        var record = tryCatch(innerFn, self, context);\n\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted; // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  } // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (!info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n      context.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    } // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n\n\n    context.delegate = null;\n    return ContinueSentinel;\n  } // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n\n\n  defineIteratorMethods(Gp);\n  define(Gp, toStringTagSymbol, \"Generator\"); // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n  define(Gp, iteratorSymbol, function () {\n    return this;\n  });\n  define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      keys.push(key);\n    }\n\n    keys.reverse(); // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      } // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n\n\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n          return next;\n        };\n\n        return next.next = next;\n      }\n    } // Return an iterator with no values.\n\n\n    return {\n      next: doneResult\n    };\n  }\n\n  exports.values = values;\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: true\n    };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      this.prev = 0;\n      this.next = 0; // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n      this.method = \"next\";\n      this.arg = undefined;\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n    stop: function stop() {\n      this.done = true;\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" || record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      } // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n\n\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  }; // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n\n  return exports;\n}( // If this script is executing as a CommonJS module, use module.exports\n// as the regeneratorRuntime namespace. Otherwise create a new empty\n// object. Either way, the resulting object will be used to initialize\n// the regeneratorRuntime variable at the top of this file.\n true ? module.exports : undefined);\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regenerator-runtime/runtime.js\n");

/***/ }),

/***/ "./node_modules/scheduler/cjs/scheduler-tracing.development.js":
/*!*********************************************************************!*\
  !*** ./node_modules/scheduler/cjs/scheduler-tracing.development.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/** @license React v0.15.0\n * scheduler-tracing.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nif (true) {\n  (function () {\n    'use strict';\n\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    }); // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:\n    // In some cases, StrictMode should also double-render lifecycles.\n    // This can be confusing for tests though,\n    // And it can be bad for performance in production.\n    // This feature flag can be used to control the behavior:\n    // To preserve the \"Pause on caught exceptions\" behavior of the debugger, we\n    // replay the begin phase of a failed component inside invokeGuardedCallback.\n    // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:\n    // Gather advanced timing metrics for Profiler subtrees.\n    // Trace which interactions trigger each commit.\n\n    var enableSchedulerTracing = true; // Only used in www builds.\n    // TODO: true? Here it might just be false.\n    // Only used in www builds.\n    // Only used in www builds.\n    // Disable javascript: URL strings in href for XSS protection.\n    // React Fire: prevent the value and checked attributes from syncing\n    // with their related DOM properties\n    // These APIs will no longer be \"unstable\" in the upcoming 16.7 release,\n    // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.\n    // See https://github.com/react-native-community/discussions-and-proposals/issues/72 for more information\n    // This is a flag so we can fix warnings in RN core before turning it on\n    // Experimental React Flare event system and event components support.\n    // Experimental Host Component support.\n    // New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107\n    // We will enforce mocking scheduler with scheduler/unstable_mock at some point. (v17?)\n    // Till then, we warn about the missing mock, but still fallback to a sync mode compatible version\n    // Temporary flag to revert the fix in #15650\n    // For tests, we flush suspense fallbacks in an act scope;\n    // *except* in some of our own tests, where we test incremental loading states.\n    // Changes priority of some events like mousemove to user-blocking priority,\n    // but without making them discrete. The flag exists in case it causes\n    // starvation problems.\n    // Add a callback property to suspense to notify which promises are currently\n    // in the update queue. This allows reporting and tracing of what is causing\n    // the user to see a loading state.\n    // Part of the simplification of React.createElement so we can eventually move\n    // from React.createElement to React.jsx\n    // https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md\n\n    var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.\n\n    var interactionIDCounter = 0;\n    var threadIDCounter = 0; // Set of currently traced interactions.\n    // Interactions \"stack\"\\u2013\n    // Meaning that newly traced interactions are appended to the previously active set.\n    // When an interaction goes out of scope, the previous set (if any) is restored.\n\n    exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.\n\n    exports.__subscriberRef = null;\n\n    if (enableSchedulerTracing) {\n      exports.__interactionsRef = {\n        current: new Set()\n      };\n      exports.__subscriberRef = {\n        current: null\n      };\n    }\n\n    function unstable_clear(callback) {\n      if (!enableSchedulerTracing) {\n        return callback();\n      }\n\n      var prevInteractions = exports.__interactionsRef.current;\n      exports.__interactionsRef.current = new Set();\n\n      try {\n        return callback();\n      } finally {\n        exports.__interactionsRef.current = prevInteractions;\n      }\n    }\n\n    function unstable_getCurrent() {\n      if (!enableSchedulerTracing) {\n        return null;\n      } else {\n        return exports.__interactionsRef.current;\n      }\n    }\n\n    function unstable_getThreadID() {\n      return ++threadIDCounter;\n    }\n\n    function unstable_trace(name, timestamp, callback) {\n      var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;\n\n      if (!enableSchedulerTracing) {\n        return callback();\n      }\n\n      var interaction = {\n        __count: 1,\n        id: interactionIDCounter++,\n        name: name,\n        timestamp: timestamp\n      };\n      var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.\n      // To do that, clone the current interactions.\n      // The previous set will be restored upon completion.\n\n      var interactions = new Set(prevInteractions);\n      interactions.add(interaction);\n      exports.__interactionsRef.current = interactions;\n      var subscriber = exports.__subscriberRef.current;\n      var returnValue = void 0;\n\n      try {\n        if (subscriber !== null) {\n          subscriber.onInteractionTraced(interaction);\n        }\n      } finally {\n        try {\n          if (subscriber !== null) {\n            subscriber.onWorkStarted(interactions, threadID);\n          }\n        } finally {\n          try {\n            returnValue = callback();\n          } finally {\n            exports.__interactionsRef.current = prevInteractions;\n\n            try {\n              if (subscriber !== null) {\n                subscriber.onWorkStopped(interactions, threadID);\n              }\n            } finally {\n              interaction.__count--; // If no async work was scheduled for this interaction,\n              // Notify subscribers that it's completed.\n\n              if (subscriber !== null && interaction.__count === 0) {\n                subscriber.onInteractionScheduledWorkCompleted(interaction);\n              }\n            }\n          }\n        }\n      }\n\n      return returnValue;\n    }\n\n    function unstable_wrap(callback) {\n      var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;\n\n      if (!enableSchedulerTracing) {\n        return callback;\n      }\n\n      var wrappedInteractions = exports.__interactionsRef.current;\n      var subscriber = exports.__subscriberRef.current;\n\n      if (subscriber !== null) {\n        subscriber.onWorkScheduled(wrappedInteractions, threadID);\n      } // Update the pending async work count for the current interactions.\n      // Update after calling subscribers in case of error.\n\n\n      wrappedInteractions.forEach(function (interaction) {\n        interaction.__count++;\n      });\n      var hasRun = false;\n\n      function wrapped() {\n        var prevInteractions = exports.__interactionsRef.current;\n        exports.__interactionsRef.current = wrappedInteractions;\n        subscriber = exports.__subscriberRef.current;\n\n        try {\n          var returnValue = void 0;\n\n          try {\n            if (subscriber !== null) {\n              subscriber.onWorkStarted(wrappedInteractions, threadID);\n            }\n          } finally {\n            try {\n              returnValue = callback.apply(undefined, arguments);\n            } finally {\n              exports.__interactionsRef.current = prevInteractions;\n\n              if (subscriber !== null) {\n                subscriber.onWorkStopped(wrappedInteractions, threadID);\n              }\n            }\n          }\n\n          return returnValue;\n        } finally {\n          if (!hasRun) {\n            // We only expect a wrapped function to be executed once,\n            // But in the event that it's executed more than once\\u2013\n            // Only decrement the outstanding interaction counts once.\n            hasRun = true; // Update pending async counts for all wrapped interactions.\n            // If this was the last scheduled async work for any of them,\n            // Mark them as completed.\n\n            wrappedInteractions.forEach(function (interaction) {\n              interaction.__count--;\n\n              if (subscriber !== null && interaction.__count === 0) {\n                subscriber.onInteractionScheduledWorkCompleted(interaction);\n              }\n            });\n          }\n        }\n      }\n\n      wrapped.cancel = function cancel() {\n        subscriber = exports.__subscriberRef.current;\n\n        try {\n          if (subscriber !== null) {\n            subscriber.onWorkCanceled(wrappedInteractions, threadID);\n          }\n        } finally {\n          // Update pending async counts for all wrapped interactions.\n          // If this was the last scheduled async work for any of them,\n          // Mark them as completed.\n          wrappedInteractions.forEach(function (interaction) {\n            interaction.__count--;\n\n            if (subscriber && interaction.__count === 0) {\n              subscriber.onInteractionScheduledWorkCompleted(interaction);\n            }\n          });\n        }\n      };\n\n      return wrapped;\n    }\n\n    var subscribers = null;\n\n    if (enableSchedulerTracing) {\n      subscribers = new Set();\n    }\n\n    function unstable_subscribe(subscriber) {\n      if (enableSchedulerTracing) {\n        subscribers.add(subscriber);\n\n        if (subscribers.size === 1) {\n          exports.__subscriberRef.current = {\n            onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,\n            onInteractionTraced: onInteractionTraced,\n            onWorkCanceled: onWorkCanceled,\n            onWorkScheduled: onWorkScheduled,\n            onWorkStarted: onWorkStarted,\n            onWorkStopped: onWorkStopped\n          };\n        }\n      }\n    }\n\n    function unstable_unsubscribe(subscriber) {\n      if (enableSchedulerTracing) {\n        subscribers.delete(subscriber);\n\n        if (subscribers.size === 0) {\n          exports.__subscriberRef.current = null;\n        }\n      }\n    }\n\n    function onInteractionTraced(interaction) {\n      var didCatchError = false;\n      var caughtError = null;\n      subscribers.forEach(function (subscriber) {\n        try {\n          subscriber.onInteractionTraced(interaction);\n        } catch (error) {\n          if (!didCatchError) {\n            didCatchError = true;\n            caughtError = error;\n          }\n        }\n      });\n\n      if (didCatchError) {\n        throw caughtError;\n      }\n    }\n\n    function onInteractionScheduledWorkCompleted(interaction) {\n      var didCatchError = false;\n      var caughtError = null;\n      subscribers.forEach(function (subscriber) {\n        try {\n          subscriber.onInteractionScheduledWorkCompleted(interaction);\n        } catch (error) {\n          if (!didCatchError) {\n            didCatchError = true;\n            caughtError = error;\n          }\n        }\n      });\n\n      if (didCatchError) {\n        throw caughtError;\n      }\n    }\n\n    function onWorkScheduled(interactions, threadID) {\n      var didCatchError = false;\n      var caughtError = null;\n      subscribers.forEach(function (subscriber) {\n        try {\n          subscriber.onWorkScheduled(interactions, threadID);\n        } catch (error) {\n          if (!didCatchError) {\n            didCatchError = true;\n            caughtError = error;\n          }\n        }\n      });\n\n      if (didCatchError) {\n        throw caughtError;\n      }\n    }\n\n    function onWorkStarted(interactions, threadID) {\n      var didCatchError = false;\n      var caughtError = null;\n      subscribers.forEach(function (subscriber) {\n        try {\n          subscriber.onWorkStarted(interactions, threadID);\n        } catch (error) {\n          if (!didCatchError) {\n            didCatchError = true;\n            caughtError = error;\n          }\n        }\n      });\n\n      if (didCatchError) {\n        throw caughtError;\n      }\n    }\n\n    function onWorkStopped(interactions, threadID) {\n      var didCatchError = false;\n      var caughtError = null;\n      subscribers.forEach(function (subscriber) {\n        try {\n          subscriber.onWorkStopped(interactions, threadID);\n        } catch (error) {\n          if (!didCatchError) {\n            didCatchError = true;\n            caughtError = error;\n          }\n        }\n      });\n\n      if (didCatchError) {\n        throw caughtError;\n      }\n    }\n\n    function onWorkCanceled(interactions, threadID) {\n      var didCatchError = false;\n      var caughtError = null;\n      subscribers.forEach(function (subscriber) {\n        try {\n          subscriber.onWorkCanceled(interactions, threadID);\n        } catch (error) {\n          if (!didCatchError) {\n            didCatchError = true;\n            caughtError = error;\n          }\n        }\n      });\n\n      if (didCatchError) {\n        throw caughtError;\n      }\n    }\n\n    exports.unstable_clear = unstable_clear;\n    exports.unstable_getCurrent = unstable_getCurrent;\n    exports.unstable_getThreadID = unstable_getThreadID;\n    exports.unstable_trace = unstable_trace;\n    exports.unstable_wrap = unstable_wrap;\n    exports.unstable_subscribe = unstable_subscribe;\n    exports.unstable_unsubscribe = unstable_unsubscribe;\n  })();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/scheduler/cjs/scheduler-tracing.development.js\n");

/***/ }),

/***/ "./node_modules/scheduler/cjs/scheduler.development.js":
/*!*************************************************************!*\
  !*** ./node_modules/scheduler/cjs/scheduler.development.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/** @license React v0.15.0\n * scheduler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nif (true) {\n  (function () {\n    'use strict';\n\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    });\n    var enableSchedulerDebugging = false;\n    var enableIsInputPending = false;\n    var requestIdleCallbackBeforeFirstFrame = false;\n    var requestTimerEventBeforeFirstFrame = false;\n    var enableMessageLoopImplementation = false; // The DOM Scheduler implementation is similar to requestIdleCallback. It\n    // works by scheduling a requestAnimationFrame, storing the time for the start\n    // of the frame, then scheduling a postMessage which gets scheduled after paint.\n    // Within the postMessage handler do as much work as possible until time + frame\n    // rate. By separating the idle call into a separate event tick we ensure that\n    // layout, paint and other browser work is counted against the available time.\n    // The frame rate is dynamically adjusted.\n\n    var _requestHostCallback = void 0;\n\n    var requestHostTimeout = void 0;\n    var cancelHostTimeout = void 0;\n    var shouldYieldToHost = void 0;\n    var requestPaint = void 0;\n    exports.unstable_now = void 0;\n    exports.unstable_forceFrameRate = void 0;\n\n    if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive\n    // implementation using setTimeout.\n    typeof window === 'undefined' || // Check if MessageChannel is supported, too.\n    typeof MessageChannel !== 'function') {\n      // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,\n      // fallback to a naive implementation.\n      var _callback = null;\n      var _timeoutID = null;\n\n      var _flushCallback = function _flushCallback() {\n        if (_callback !== null) {\n          try {\n            var currentTime = exports.unstable_now();\n            var hasRemainingTime = true;\n\n            _callback(hasRemainingTime, currentTime);\n\n            _callback = null;\n          } catch (e) {\n            setTimeout(_flushCallback, 0);\n            throw e;\n          }\n        }\n      };\n\n      exports.unstable_now = function () {\n        return Date.now();\n      };\n\n      _requestHostCallback = function requestHostCallback(cb) {\n        if (_callback !== null) {\n          // Protect against re-entrancy.\n          setTimeout(_requestHostCallback, 0, cb);\n        } else {\n          _callback = cb;\n          setTimeout(_flushCallback, 0);\n        }\n      };\n\n      requestHostTimeout = function requestHostTimeout(cb, ms) {\n        _timeoutID = setTimeout(cb, ms);\n      };\n\n      cancelHostTimeout = function cancelHostTimeout() {\n        clearTimeout(_timeoutID);\n      };\n\n      shouldYieldToHost = function shouldYieldToHost() {\n        return false;\n      };\n\n      requestPaint = exports.unstable_forceFrameRate = function () {};\n    } else {\n      // Capture local references to native APIs, in case a polyfill overrides them.\n      var performance = window.performance;\n      var _Date = window.Date;\n      var _setTimeout = window.setTimeout;\n      var _clearTimeout = window.clearTimeout;\n      var requestAnimationFrame = window.requestAnimationFrame;\n      var cancelAnimationFrame = window.cancelAnimationFrame;\n      var requestIdleCallback = window.requestIdleCallback;\n\n      if (typeof console !== 'undefined') {\n        // TODO: Remove fb.me link\n        if (typeof requestAnimationFrame !== 'function') {\n          console.error(\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n        }\n\n        if (typeof cancelAnimationFrame !== 'function') {\n          console.error(\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n        }\n      }\n\n      var requestIdleCallbackBeforeFirstFrame$1 = requestIdleCallbackBeforeFirstFrame && typeof requestIdleCallback === 'function' && typeof cancelIdleCallback === 'function';\n      exports.unstable_now = typeof performance === 'object' && typeof performance.now === 'function' ? function () {\n        return performance.now();\n      } : function () {\n        return _Date.now();\n      };\n      var isRAFLoopRunning = false;\n      var isMessageLoopRunning = false;\n      var scheduledHostCallback = null;\n      var rAFTimeoutID = -1;\n      var taskTimeoutID = -1;\n      var frameLength = enableMessageLoopImplementation ? // We won't attempt to align with the vsync. Instead we'll yield multiple\n      // times per frame, often enough to keep it responsive even at really\n      // high frame rates > 120.\n      5 : // Use a heuristic to measure the frame rate and yield at the end of the\n      // frame. We start out assuming that we run at 30fps but then the\n      // heuristic tracking will adjust this value to a faster fps if we get\n      // more frequent animation frames.\n      33.33;\n      var prevRAFTime = -1;\n      var prevRAFInterval = -1;\n      var frameDeadline = 0;\n      var fpsLocked = false; // TODO: Make this configurable\n      // TODO: Adjust this based on priority?\n\n      var maxFrameLength = 300;\n      var needsPaint = false;\n\n      if (enableIsInputPending && navigator !== undefined && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined) {\n        var scheduling = navigator.scheduling;\n\n        shouldYieldToHost = function shouldYieldToHost() {\n          var currentTime = exports.unstable_now();\n\n          if (currentTime >= frameDeadline) {\n            // There's no time left in the frame. We may want to yield control of\n            // the main thread, so the browser can perform high priority tasks. The\n            // main ones are painting and user input. If there's a pending paint or\n            // a pending input, then we should yield. But if there's neither, then\n            // we can yield less often while remaining responsive. We'll eventually\n            // yield regardless, since there could be a pending paint that wasn't\n            // accompanied by a call to `requestPaint`, or other main thread tasks\n            // like network events.\n            if (needsPaint || scheduling.isInputPending()) {\n              // There is either a pending paint or a pending input.\n              return true;\n            } // There's no pending input. Only yield if we've reached the max\n            // frame length.\n\n\n            return currentTime >= frameDeadline + maxFrameLength;\n          } else {\n            // There's still time left in the frame.\n            return false;\n          }\n        };\n\n        requestPaint = function requestPaint() {\n          needsPaint = true;\n        };\n      } else {\n        // `isInputPending` is not available. Since we have no way of knowing if\n        // there's pending input, always yield at the end of the frame.\n        shouldYieldToHost = function shouldYieldToHost() {\n          return exports.unstable_now() >= frameDeadline;\n        }; // Since we yield every frame regardless, `requestPaint` has no effect.\n\n\n        requestPaint = function requestPaint() {};\n      }\n\n      exports.unstable_forceFrameRate = function (fps) {\n        if (fps < 0 || fps > 125) {\n          console.error('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');\n          return;\n        }\n\n        if (fps > 0) {\n          frameLength = Math.floor(1000 / fps);\n          fpsLocked = true;\n        } else {\n          // reset the framerate\n          frameLength = 33.33;\n          fpsLocked = false;\n        }\n      };\n\n      var performWorkUntilDeadline = function performWorkUntilDeadline() {\n        if (enableMessageLoopImplementation) {\n          if (scheduledHostCallback !== null) {\n            var currentTime = exports.unstable_now(); // Yield after `frameLength` ms, regardless of where we are in the vsync\n            // cycle. This means there's always time remaining at the beginning of\n            // the message event.\n\n            frameDeadline = currentTime + frameLength;\n            var hasTimeRemaining = true;\n\n            try {\n              var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n\n              if (!hasMoreWork) {\n                isMessageLoopRunning = false;\n                scheduledHostCallback = null;\n              } else {\n                // If there's more work, schedule the next message event at the end\n                // of the preceding one.\n                port.postMessage(null);\n              }\n            } catch (error) {\n              // If a scheduler task throws, exit the current browser task so the\n              // error can be observed.\n              port.postMessage(null);\n              throw error;\n            }\n          } // Yielding to the browser will give it a chance to paint, so we can\n          // reset this.\n\n\n          needsPaint = false;\n        } else {\n          if (scheduledHostCallback !== null) {\n            var _currentTime = exports.unstable_now();\n\n            var _hasTimeRemaining = frameDeadline - _currentTime > 0;\n\n            try {\n              var _hasMoreWork = scheduledHostCallback(_hasTimeRemaining, _currentTime);\n\n              if (!_hasMoreWork) {\n                scheduledHostCallback = null;\n              }\n            } catch (error) {\n              // If a scheduler task throws, exit the current browser task so the\n              // error can be observed, and post a new task as soon as possible\n              // so we can continue where we left off.\n              port.postMessage(null);\n              throw error;\n            }\n          } // Yielding to the browser will give it a chance to paint, so we can\n          // reset this.\n\n\n          needsPaint = false;\n        }\n      };\n\n      var channel = new MessageChannel();\n      var port = channel.port2;\n      channel.port1.onmessage = performWorkUntilDeadline;\n\n      var onAnimationFrame = function onAnimationFrame(rAFTime) {\n        if (scheduledHostCallback === null) {\n          // No scheduled work. Exit.\n          prevRAFTime = -1;\n          prevRAFInterval = -1;\n          isRAFLoopRunning = false;\n          return;\n        } // Eagerly schedule the next animation callback at the beginning of the\n        // frame. If the scheduler queue is not empty at the end of the frame, it\n        // will continue flushing inside that callback. If the queue *is* empty,\n        // then it will exit immediately. Posting the callback at the start of the\n        // frame ensures it's fired within the earliest possible frame. If we\n        // waited until the end of the frame to post the callback, we risk the\n        // browser skipping a frame and not firing the callback until the frame\n        // after that.\n\n\n        isRAFLoopRunning = true;\n        requestAnimationFrame(function (nextRAFTime) {\n          _clearTimeout(rAFTimeoutID);\n\n          onAnimationFrame(nextRAFTime);\n        }); // requestAnimationFrame is throttled when the tab is backgrounded. We\n        // don't want to stop working entirely. So we'll fallback to a timeout loop.\n        // TODO: Need a better heuristic for backgrounded work.\n\n        var onTimeout = function onTimeout() {\n          frameDeadline = exports.unstable_now() + frameLength / 2;\n          performWorkUntilDeadline();\n          rAFTimeoutID = _setTimeout(onTimeout, frameLength * 3);\n        };\n\n        rAFTimeoutID = _setTimeout(onTimeout, frameLength * 3);\n\n        if (prevRAFTime !== -1 && // Make sure this rAF time is different from the previous one. This check\n        // could fail if two rAFs fire in the same frame.\n        rAFTime - prevRAFTime > 0.1) {\n          var rAFInterval = rAFTime - prevRAFTime;\n\n          if (!fpsLocked && prevRAFInterval !== -1) {\n            // We've observed two consecutive frame intervals. We'll use this to\n            // dynamically adjust the frame rate.\n            //\n            // If one frame goes long, then the next one can be short to catch up.\n            // If two frames are short in a row, then that's an indication that we\n            // actually have a higher frame rate than what we're currently\n            // optimizing. For example, if we're running on 120hz display or 90hz VR\n            // display. Take the max of the two in case one of them was an anomaly\n            // due to missed frame deadlines.\n            if (rAFInterval < frameLength && prevRAFInterval < frameLength) {\n              frameLength = rAFInterval < prevRAFInterval ? prevRAFInterval : rAFInterval;\n\n              if (frameLength < 8.33) {\n                // Defensive coding. We don't support higher frame rates than 120hz.\n                // If the calculated frame length gets lower than 8, it is probably\n                // a bug.\n                frameLength = 8.33;\n              }\n            }\n          }\n\n          prevRAFInterval = rAFInterval;\n        }\n\n        prevRAFTime = rAFTime;\n        frameDeadline = rAFTime + frameLength; // We use the postMessage trick to defer idle work until after the repaint.\n\n        port.postMessage(null);\n      };\n\n      _requestHostCallback = function _requestHostCallback(callback) {\n        scheduledHostCallback = callback;\n\n        if (enableMessageLoopImplementation) {\n          if (!isMessageLoopRunning) {\n            isMessageLoopRunning = true;\n            port.postMessage(null);\n          }\n        } else {\n          if (!isRAFLoopRunning) {\n            // Start a rAF loop.\n            isRAFLoopRunning = true;\n            requestAnimationFrame(function (rAFTime) {\n              if (requestIdleCallbackBeforeFirstFrame$1) {\n                cancelIdleCallback(idleCallbackID);\n              }\n\n              if (requestTimerEventBeforeFirstFrame) {\n                _clearTimeout(idleTimeoutID);\n              }\n\n              onAnimationFrame(rAFTime);\n            }); // If we just missed the last vsync, the next rAF might not happen for\n            // another frame. To claim as much idle time as possible, post a\n            // callback with `requestIdleCallback`, which should fire if there's\n            // idle time left in the frame.\n            //\n            // This should only be an issue for the first rAF in the loop;\n            // subsequent rAFs are scheduled at the beginning of the\n            // preceding frame.\n\n            var idleCallbackID = void 0;\n\n            if (requestIdleCallbackBeforeFirstFrame$1) {\n              idleCallbackID = requestIdleCallback(function onIdleCallbackBeforeFirstFrame() {\n                if (requestTimerEventBeforeFirstFrame) {\n                  _clearTimeout(idleTimeoutID);\n                }\n\n                frameDeadline = exports.unstable_now() + frameLength;\n                performWorkUntilDeadline();\n              });\n            } // Alternate strategy to address the same problem. Scheduler a timer\n            // with no delay. If this fires before the rAF, that likely indicates\n            // that there's idle time before the next vsync. This isn't always the\n            // case, but we'll be aggressive and assume it is, as a trade off to\n            // prevent idle periods.\n\n\n            var idleTimeoutID = void 0;\n\n            if (requestTimerEventBeforeFirstFrame) {\n              idleTimeoutID = _setTimeout(function onTimerEventBeforeFirstFrame() {\n                if (requestIdleCallbackBeforeFirstFrame$1) {\n                  cancelIdleCallback(idleCallbackID);\n                }\n\n                frameDeadline = exports.unstable_now() + frameLength;\n                performWorkUntilDeadline();\n              }, 0);\n            }\n          }\n        }\n      };\n\n      requestHostTimeout = function requestHostTimeout(callback, ms) {\n        taskTimeoutID = _setTimeout(function () {\n          callback(exports.unstable_now());\n        }, ms);\n      };\n\n      cancelHostTimeout = function cancelHostTimeout() {\n        _clearTimeout(taskTimeoutID);\n\n        taskTimeoutID = -1;\n      };\n    }\n    /* eslint-disable no-var */\n    // TODO: Use symbols?\n\n\n    var ImmediatePriority = 1;\n    var UserBlockingPriority = 2;\n    var NormalPriority = 3;\n    var LowPriority = 4;\n    var IdlePriority = 5; // Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n    // Math.pow(2, 30) - 1\n    // 0b111111111111111111111111111111\n\n    var maxSigned31BitInt = 1073741823; // Times out immediately\n\n    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\n    var USER_BLOCKING_PRIORITY = 250;\n    var NORMAL_PRIORITY_TIMEOUT = 5000;\n    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\n    var IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored as a circular, doubly linked list.\n\n    var firstTask = null;\n    var firstDelayedTask = null; // Pausing the scheduler is useful for debugging.\n\n    var isSchedulerPaused = false;\n    var currentTask = null;\n    var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\n\n    var isPerformingWork = false;\n    var isHostCallbackScheduled = false;\n    var isHostTimeoutScheduled = false;\n\n    function scheduler_flushTaskAtPriority_Immediate(callback, didTimeout) {\n      return callback(didTimeout);\n    }\n\n    function scheduler_flushTaskAtPriority_UserBlocking(callback, didTimeout) {\n      return callback(didTimeout);\n    }\n\n    function scheduler_flushTaskAtPriority_Normal(callback, didTimeout) {\n      return callback(didTimeout);\n    }\n\n    function scheduler_flushTaskAtPriority_Low(callback, didTimeout) {\n      return callback(didTimeout);\n    }\n\n    function scheduler_flushTaskAtPriority_Idle(callback, didTimeout) {\n      return callback(didTimeout);\n    }\n\n    function flushTask(task, currentTime) {\n      // Remove the task from the list before calling the callback. That way the\n      // list is in a consistent state even if the callback throws.\n      var next = task.next;\n\n      if (next === task) {\n        // This is the only scheduled task. Clear the list.\n        firstTask = null;\n      } else {\n        // Remove the task from its position in the list.\n        if (task === firstTask) {\n          firstTask = next;\n        }\n\n        var previous = task.previous;\n        previous.next = next;\n        next.previous = previous;\n      }\n\n      task.next = task.previous = null; // Now it's safe to execute the task.\n\n      var callback = task.callback;\n      var previousPriorityLevel = currentPriorityLevel;\n      var previousTask = currentTask;\n      currentPriorityLevel = task.priorityLevel;\n      currentTask = task;\n      var continuationCallback;\n\n      try {\n        var didUserCallbackTimeout = task.expirationTime <= currentTime; // Add an extra function to the callstack. Profiling tools can use this\n        // to infer the priority of work that appears higher in the stack.\n\n        switch (currentPriorityLevel) {\n          case ImmediatePriority:\n            continuationCallback = scheduler_flushTaskAtPriority_Immediate(callback, didUserCallbackTimeout);\n            break;\n\n          case UserBlockingPriority:\n            continuationCallback = scheduler_flushTaskAtPriority_UserBlocking(callback, didUserCallbackTimeout);\n            break;\n\n          case NormalPriority:\n            continuationCallback = scheduler_flushTaskAtPriority_Normal(callback, didUserCallbackTimeout);\n            break;\n\n          case LowPriority:\n            continuationCallback = scheduler_flushTaskAtPriority_Low(callback, didUserCallbackTimeout);\n            break;\n\n          case IdlePriority:\n            continuationCallback = scheduler_flushTaskAtPriority_Idle(callback, didUserCallbackTimeout);\n            break;\n        }\n      } catch (error) {\n        throw error;\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n        currentTask = previousTask;\n      } // A callback may return a continuation. The continuation should be scheduled\n      // with the same priority and expiration as the just-finished callback.\n\n\n      if (typeof continuationCallback === 'function') {\n        var expirationTime = task.expirationTime;\n        var continuationTask = task;\n        continuationTask.callback = continuationCallback; // Insert the new callback into the list, sorted by its timeout. This is\n        // almost the same as the code in `scheduleCallback`, except the callback\n        // is inserted into the list *before* callbacks of equal timeout instead\n        // of after.\n\n        if (firstTask === null) {\n          // This is the first callback in the list.\n          firstTask = continuationTask.next = continuationTask.previous = continuationTask;\n        } else {\n          var nextAfterContinuation = null;\n          var t = firstTask;\n\n          do {\n            if (expirationTime <= t.expirationTime) {\n              // This task times out at or after the continuation. We will insert\n              // the continuation *before* this task.\n              nextAfterContinuation = t;\n              break;\n            }\n\n            t = t.next;\n          } while (t !== firstTask);\n\n          if (nextAfterContinuation === null) {\n            // No equal or lower priority task was found, which means the new task\n            // is the lowest priority task in the list.\n            nextAfterContinuation = firstTask;\n          } else if (nextAfterContinuation === firstTask) {\n            // The new task is the highest priority task in the list.\n            firstTask = continuationTask;\n          }\n\n          var _previous = nextAfterContinuation.previous;\n          _previous.next = nextAfterContinuation.previous = continuationTask;\n          continuationTask.next = nextAfterContinuation;\n          continuationTask.previous = _previous;\n        }\n      }\n    }\n\n    function advanceTimers(currentTime) {\n      // Check for tasks that are no longer delayed and add them to the queue.\n      if (firstDelayedTask !== null && firstDelayedTask.startTime <= currentTime) {\n        do {\n          var task = firstDelayedTask;\n          var next = task.next;\n\n          if (task === next) {\n            firstDelayedTask = null;\n          } else {\n            firstDelayedTask = next;\n            var previous = task.previous;\n            previous.next = next;\n            next.previous = previous;\n          }\n\n          task.next = task.previous = null;\n          insertScheduledTask(task, task.expirationTime);\n        } while (firstDelayedTask !== null && firstDelayedTask.startTime <= currentTime);\n      }\n    }\n\n    function handleTimeout(currentTime) {\n      isHostTimeoutScheduled = false;\n      advanceTimers(currentTime);\n\n      if (!isHostCallbackScheduled) {\n        if (firstTask !== null) {\n          isHostCallbackScheduled = true;\n\n          _requestHostCallback(flushWork);\n        } else if (firstDelayedTask !== null) {\n          requestHostTimeout(handleTimeout, firstDelayedTask.startTime - currentTime);\n        }\n      }\n    }\n\n    function flushWork(hasTimeRemaining, initialTime) {\n      // Exit right away if we're currently paused\n      if (enableSchedulerDebugging && isSchedulerPaused) {\n        return;\n      } // We'll need a host callback the next time work is scheduled.\n\n\n      isHostCallbackScheduled = false;\n\n      if (isHostTimeoutScheduled) {\n        // We scheduled a timeout but it's no longer needed. Cancel it.\n        isHostTimeoutScheduled = false;\n        cancelHostTimeout();\n      }\n\n      var currentTime = initialTime;\n      advanceTimers(currentTime);\n      isPerformingWork = true;\n\n      try {\n        if (!hasTimeRemaining) {\n          // Flush all the expired callbacks without yielding.\n          // TODO: Split flushWork into two separate functions instead of using\n          // a boolean argument?\n          while (firstTask !== null && firstTask.expirationTime <= currentTime && !(enableSchedulerDebugging && isSchedulerPaused)) {\n            flushTask(firstTask, currentTime);\n            currentTime = exports.unstable_now();\n            advanceTimers(currentTime);\n          }\n        } else {\n          // Keep flushing callbacks until we run out of time in the frame.\n          if (firstTask !== null) {\n            do {\n              flushTask(firstTask, currentTime);\n              currentTime = exports.unstable_now();\n              advanceTimers(currentTime);\n            } while (firstTask !== null && !shouldYieldToHost() && !(enableSchedulerDebugging && isSchedulerPaused));\n          }\n        } // Return whether there's additional work\n\n\n        if (firstTask !== null) {\n          return true;\n        } else {\n          if (firstDelayedTask !== null) {\n            requestHostTimeout(handleTimeout, firstDelayedTask.startTime - currentTime);\n          }\n\n          return false;\n        }\n      } finally {\n        isPerformingWork = false;\n      }\n    }\n\n    function unstable_runWithPriority(priorityLevel, eventHandler) {\n      switch (priorityLevel) {\n        case ImmediatePriority:\n        case UserBlockingPriority:\n        case NormalPriority:\n        case LowPriority:\n        case IdlePriority:\n          break;\n\n        default:\n          priorityLevel = NormalPriority;\n      }\n\n      var previousPriorityLevel = currentPriorityLevel;\n      currentPriorityLevel = priorityLevel;\n\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n      }\n    }\n\n    function unstable_next(eventHandler) {\n      var priorityLevel;\n\n      switch (currentPriorityLevel) {\n        case ImmediatePriority:\n        case UserBlockingPriority:\n        case NormalPriority:\n          // Shift down to normal priority\n          priorityLevel = NormalPriority;\n          break;\n\n        default:\n          // Anything lower than normal priority should remain at the current level.\n          priorityLevel = currentPriorityLevel;\n          break;\n      }\n\n      var previousPriorityLevel = currentPriorityLevel;\n      currentPriorityLevel = priorityLevel;\n\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n      }\n    }\n\n    function unstable_wrapCallback(callback) {\n      var parentPriorityLevel = currentPriorityLevel;\n      return function () {\n        // This is a fork of runWithPriority, inlined for performance.\n        var previousPriorityLevel = currentPriorityLevel;\n        currentPriorityLevel = parentPriorityLevel;\n\n        try {\n          return callback.apply(this, arguments);\n        } finally {\n          currentPriorityLevel = previousPriorityLevel;\n        }\n      };\n    }\n\n    function timeoutForPriorityLevel(priorityLevel) {\n      switch (priorityLevel) {\n        case ImmediatePriority:\n          return IMMEDIATE_PRIORITY_TIMEOUT;\n\n        case UserBlockingPriority:\n          return USER_BLOCKING_PRIORITY;\n\n        case IdlePriority:\n          return IDLE_PRIORITY;\n\n        case LowPriority:\n          return LOW_PRIORITY_TIMEOUT;\n\n        case NormalPriority:\n        default:\n          return NORMAL_PRIORITY_TIMEOUT;\n      }\n    }\n\n    function unstable_scheduleCallback(priorityLevel, callback, options) {\n      var currentTime = exports.unstable_now();\n      var startTime;\n      var timeout;\n\n      if (typeof options === 'object' && options !== null) {\n        var delay = options.delay;\n\n        if (typeof delay === 'number' && delay > 0) {\n          startTime = currentTime + delay;\n        } else {\n          startTime = currentTime;\n        }\n\n        timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);\n      } else {\n        timeout = timeoutForPriorityLevel(priorityLevel);\n        startTime = currentTime;\n      }\n\n      var expirationTime = startTime + timeout;\n      var newTask = {\n        callback: callback,\n        priorityLevel: priorityLevel,\n        startTime: startTime,\n        expirationTime: expirationTime,\n        next: null,\n        previous: null\n      };\n\n      if (startTime > currentTime) {\n        // This is a delayed task.\n        insertDelayedTask(newTask, startTime);\n\n        if (firstTask === null && firstDelayedTask === newTask) {\n          // All tasks are delayed, and this is the task with the earliest delay.\n          if (isHostTimeoutScheduled) {\n            // Cancel an existing timeout.\n            cancelHostTimeout();\n          } else {\n            isHostTimeoutScheduled = true;\n          } // Schedule a timeout.\n\n\n          requestHostTimeout(handleTimeout, startTime - currentTime);\n        }\n      } else {\n        insertScheduledTask(newTask, expirationTime); // Schedule a host callback, if needed. If we're already performing work,\n        // wait until the next time we yield.\n\n        if (!isHostCallbackScheduled && !isPerformingWork) {\n          isHostCallbackScheduled = true;\n\n          _requestHostCallback(flushWork);\n        }\n      }\n\n      return newTask;\n    }\n\n    function insertScheduledTask(newTask, expirationTime) {\n      // Insert the new task into the list, ordered first by its timeout, then by\n      // insertion. So the new task is inserted after any other task the\n      // same timeout\n      if (firstTask === null) {\n        // This is the first task in the list.\n        firstTask = newTask.next = newTask.previous = newTask;\n      } else {\n        var next = null;\n        var task = firstTask;\n\n        do {\n          if (expirationTime < task.expirationTime) {\n            // The new task times out before this one.\n            next = task;\n            break;\n          }\n\n          task = task.next;\n        } while (task !== firstTask);\n\n        if (next === null) {\n          // No task with a later timeout was found, which means the new task has\n          // the latest timeout in the list.\n          next = firstTask;\n        } else if (next === firstTask) {\n          // The new task has the earliest expiration in the entire list.\n          firstTask = newTask;\n        }\n\n        var previous = next.previous;\n        previous.next = next.previous = newTask;\n        newTask.next = next;\n        newTask.previous = previous;\n      }\n    }\n\n    function insertDelayedTask(newTask, startTime) {\n      // Insert the new task into the list, ordered by its start time.\n      if (firstDelayedTask === null) {\n        // This is the first task in the list.\n        firstDelayedTask = newTask.next = newTask.previous = newTask;\n      } else {\n        var next = null;\n        var task = firstDelayedTask;\n\n        do {\n          if (startTime < task.startTime) {\n            // The new task times out before this one.\n            next = task;\n            break;\n          }\n\n          task = task.next;\n        } while (task !== firstDelayedTask);\n\n        if (next === null) {\n          // No task with a later timeout was found, which means the new task has\n          // the latest timeout in the list.\n          next = firstDelayedTask;\n        } else if (next === firstDelayedTask) {\n          // The new task has the earliest expiration in the entire list.\n          firstDelayedTask = newTask;\n        }\n\n        var previous = next.previous;\n        previous.next = next.previous = newTask;\n        newTask.next = next;\n        newTask.previous = previous;\n      }\n    }\n\n    function unstable_pauseExecution() {\n      isSchedulerPaused = true;\n    }\n\n    function unstable_continueExecution() {\n      isSchedulerPaused = false;\n\n      if (!isHostCallbackScheduled && !isPerformingWork) {\n        isHostCallbackScheduled = true;\n\n        _requestHostCallback(flushWork);\n      }\n    }\n\n    function unstable_getFirstCallbackNode() {\n      return firstTask;\n    }\n\n    function unstable_cancelCallback(task) {\n      var next = task.next;\n\n      if (next === null) {\n        // Already cancelled.\n        return;\n      }\n\n      if (task === next) {\n        if (task === firstTask) {\n          firstTask = null;\n        } else if (task === firstDelayedTask) {\n          firstDelayedTask = null;\n        }\n      } else {\n        if (task === firstTask) {\n          firstTask = next;\n        } else if (task === firstDelayedTask) {\n          firstDelayedTask = next;\n        }\n\n        var previous = task.previous;\n        previous.next = next;\n        next.previous = previous;\n      }\n\n      task.next = task.previous = null;\n    }\n\n    function unstable_getCurrentPriorityLevel() {\n      return currentPriorityLevel;\n    }\n\n    function unstable_shouldYield() {\n      var currentTime = exports.unstable_now();\n      advanceTimers(currentTime);\n      return currentTask !== null && firstTask !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();\n    }\n\n    var unstable_requestPaint = requestPaint;\n    exports.unstable_ImmediatePriority = ImmediatePriority;\n    exports.unstable_UserBlockingPriority = UserBlockingPriority;\n    exports.unstable_NormalPriority = NormalPriority;\n    exports.unstable_IdlePriority = IdlePriority;\n    exports.unstable_LowPriority = LowPriority;\n    exports.unstable_runWithPriority = unstable_runWithPriority;\n    exports.unstable_next = unstable_next;\n    exports.unstable_scheduleCallback = unstable_scheduleCallback;\n    exports.unstable_cancelCallback = unstable_cancelCallback;\n    exports.unstable_wrapCallback = unstable_wrapCallback;\n    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\n    exports.unstable_shouldYield = unstable_shouldYield;\n    exports.unstable_requestPaint = unstable_requestPaint;\n    exports.unstable_continueExecution = unstable_continueExecution;\n    exports.unstable_pauseExecution = unstable_pauseExecution;\n    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\n  })();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/scheduler/cjs/scheduler.development.js\n");

/***/ }),

/***/ "./node_modules/scheduler/index.js":
/*!*****************************************!*\
  !*** ./node_modules/scheduler/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/scheduler.development.js */ \"./node_modules/scheduler/cjs/scheduler.development.js\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzPzQwMjkiXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxLQUFKLEVBQTJDLEVBQTNDLE1BRU87QUFDTEMsUUFBTSxDQUFDQyxPQUFQLEdBQWlCQyxtQkFBTyxDQUFDLDZGQUFELENBQXhCO0FBQ0QiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/scheduler/index.js\n");

/***/ }),

/***/ "./node_modules/scheduler/tracing.js":
/*!*******************************************!*\
  !*** ./node_modules/scheduler/tracing.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/scheduler-tracing.development.js */ \"./node_modules/scheduler/cjs/scheduler-tracing.development.js\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL3RyYWNpbmcuanM/NmYwNyJdLCJuYW1lcyI6WyJwcm9jZXNzIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLEtBQUosRUFBMkMsRUFBM0MsTUFFTztBQUNMQyxRQUFNLENBQUNDLE9BQVAsR0FBaUJDLG1CQUFPLENBQUMsNkdBQUQsQ0FBeEI7QUFDRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvdHJhY2luZy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXItdHJhY2luZy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXItdHJhY2luZy5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/scheduler/tracing.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g; // This works in non-strict mode\n\ng = function () {\n  return this;\n}();\n\ntry {\n  // This works if eval is allowed (see CSP)\n  g = g || new Function(\"return this\")();\n} catch (e) {\n  // This works if the window reference is available\n  if (typeof window === \"object\") g = window;\n} // g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\n\nmodule.exports = g;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOlsiZyIsIkZ1bmN0aW9uIiwiZSIsIndpbmRvdyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLENBQUosQyxDQUVBOztBQUNBQSxDQUFDLEdBQUksWUFBVztBQUNmLFNBQU8sSUFBUDtBQUNBLENBRkcsRUFBSjs7QUFJQSxJQUFJO0FBQ0g7QUFDQUEsR0FBQyxHQUFHQSxDQUFDLElBQUksSUFBSUMsUUFBSixDQUFhLGFBQWIsR0FBVDtBQUNBLENBSEQsQ0FHRSxPQUFPQyxDQUFQLEVBQVU7QUFDWDtBQUNBLE1BQUksT0FBT0MsTUFBUCxLQUFrQixRQUF0QixFQUFnQ0gsQ0FBQyxHQUFHRyxNQUFKO0FBQ2hDLEMsQ0FFRDtBQUNBO0FBQ0E7OztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJMLENBQWpCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ 0:
/*!******************************************************************************!*\
  !*** multi regenerator-runtime ./index.js @hippy/hippy-live-reload-polyfill ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! regenerator-runtime */"./node_modules/regenerator-runtime/runtime.js");
__webpack_require__(/*! /Users/user/Tencent/zoom/Hippy/examples/kdtab/index.js */"./index.js");
module.exports = __webpack_require__(/*! @hippy/hippy-live-reload-polyfill */"./node_modules/@hippy/hippy-live-reload-polyfill/index.js");


/***/ })

/******/ });
